// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DlaPrototestInterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "priv/DlaPrototestInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nvdla_prototest_interface {

namespace {

const ::google::protobuf::Descriptor* LUTOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LUTOffset_reflection_ = NULL;
struct LUTOffsetOneofInstance {
  ::google::protobuf::int32 exp_offset_;
  ::google::protobuf::int32 frac_bits_;
}* LUTOffset_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* FloatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FloatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DLASlope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DLASlope_reflection_ = NULL;
struct DLASlopeOneofInstance {
  const ::nvdla_prototest_interface::FloatData* data_i_;
  ::google::protobuf::uint32 data_f_;
}* DLASlope_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DataFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Constant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Constant_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataFiller_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataFiller_reflection_ = NULL;
struct DataFillerOneofInstance {
  const ::nvdla_prototest_interface::DataFile* data_file_;
  const ::nvdla_prototest_interface::Constant* const__;
}* DataFiller_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LUTParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LUTParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* BDMATransferDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BDMATransferDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BDMASurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BDMASurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* BDMAOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BDMAOpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVTParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVTParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCube_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCube_reflection_ = NULL;
const ::google::protobuf::Descriptor* CONVSurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CONVSurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CONVOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CONVOpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDPCvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDPCvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDPOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDPOp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SDPOp_SDPOpMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SDPSurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDPSurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDPOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDPOpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDPSurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDPSurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PDPOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PDPOpDesc_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PDPOpDesc_PoolingMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDPSurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDPSurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDPOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDPOpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RUBIKSurfaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RUBIKSurfaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RUBIKOpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RUBIKOpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfaceContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceContainer_reflection_ = NULL;
struct SurfaceContainerOneofInstance {
  const ::nvdla_prototest_interface::BDMASurfaceDesc* bdma_surface_;
  const ::nvdla_prototest_interface::CONVSurfaceDesc* conv_surface_;
  const ::nvdla_prototest_interface::SDPSurfaceDesc* sdp_surface_;
  const ::nvdla_prototest_interface::PDPSurfaceDesc* pdp_surface_;
  const ::nvdla_prototest_interface::CDPSurfaceDesc* cdp_surface_;
  const ::nvdla_prototest_interface::RUBIKSurfaceDesc* rubik_surface_;
}* SurfaceContainer_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* OperationContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperationContainer_reflection_ = NULL;
struct OperationContainerOneofInstance {
  const ::nvdla_prototest_interface::BDMAOpDesc* bdma_op_;
  const ::nvdla_prototest_interface::CONVOpDesc* conv_op_;
  const ::nvdla_prototest_interface::SDPOpDesc* sdp_op_;
  const ::nvdla_prototest_interface::PDPOpDesc* pdp_op_;
  const ::nvdla_prototest_interface::CDPOpDesc* cdp_op_;
  const ::nvdla_prototest_interface::RUBIKOpDesc* rubik_op_;
}* OperationContainer_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Consumer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Consumer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Consumer_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* LUTParamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LUTParamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIArrayDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIArrayDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* TasksData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TasksData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EventList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataPrecision_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MemFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EngineID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ALUType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SDPOpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LUTLOGSize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LUTTable_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LUTMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LUTPriority_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ConvPixelMAP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PixelOverride_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PoolSize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RUBIKMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WeightFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MeanFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SDPActivation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataFormat_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FillerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DlaPrototestInterface_2eproto() {
  protobuf_AddDesc_DlaPrototestInterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DlaPrototestInterface.proto");
  GOOGLE_CHECK(file != NULL);
  LUTOffset_descriptor_ = file->message_type(0);
  static const int LUTOffset_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LUTOffset_default_oneof_instance_, exp_offset_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(LUTOffset_default_oneof_instance_, frac_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTOffset, lut_offset_oneof_),
  };
  LUTOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LUTOffset_descriptor_,
      LUTOffset::default_instance_,
      LUTOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTOffset, _unknown_fields_),
      -1,
      LUTOffset_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTOffset, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LUTOffset));
  FloatData_descriptor_ = file->message_type(1);
  static const int FloatData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatData, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatData, shifter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatData, reserved0_),
  };
  FloatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FloatData_descriptor_,
      FloatData::default_instance_,
      FloatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FloatData));
  DLASlope_descriptor_ = file->message_type(2);
  static const int DLASlope_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DLASlope_default_oneof_instance_, data_i_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DLASlope_default_oneof_instance_, data_f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLASlope, dla_slope_oneof_),
  };
  DLASlope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DLASlope_descriptor_,
      DLASlope::default_instance_,
      DLASlope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLASlope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLASlope, _unknown_fields_),
      -1,
      DLASlope_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DLASlope, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DLASlope));
  DataFile_descriptor_ = file->message_type(3);
  static const int DataFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, file_type_),
  };
  DataFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFile_descriptor_,
      DataFile::default_instance_,
      DataFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFile));
  Constant_descriptor_ = file->message_type(4);
  static const int Constant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, value_),
  };
  Constant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Constant_descriptor_,
      Constant::default_instance_,
      Constant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Constant));
  DataFiller_descriptor_ = file->message_type(5);
  static const int DataFiller_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DataFiller_default_oneof_instance_, data_file_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DataFiller_default_oneof_instance_, const__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFiller, data_filler_oneof_),
  };
  DataFiller_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataFiller_descriptor_,
      DataFiller::default_instance_,
      DataFiller_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFiller, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFiller, _unknown_fields_),
      -1,
      DataFiller_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataFiller, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataFiller));
  LUTParam_descriptor_ = file->message_type(6);
  static const int LUTParam_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_underflow_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_exp_overflow_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_underflow_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, linear_only_overflow_slope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, hybrid_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, underflow_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, overflow_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, fill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, precision_),
  };
  LUTParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LUTParam_descriptor_,
      LUTParam::default_instance_,
      LUTParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LUTParam));
  BDMATransferDesc_descriptor_ = file->message_type(7);
  static const int BDMATransferDesc_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, source_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, destination_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, line_repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, source_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, destination_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, surface_repeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, source_surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, destination_surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, src_mem_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, dst_mem_info_),
  };
  BDMATransferDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BDMATransferDesc_descriptor_,
      BDMATransferDesc::default_instance_,
      BDMATransferDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMATransferDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BDMATransferDesc));
  BDMASurfaceDesc_descriptor_ = file->message_type(8);
  static const int BDMASurfaceDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, destination_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, num_transfers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, transfers_),
  };
  BDMASurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BDMASurfaceDesc_descriptor_,
      BDMASurfaceDesc::default_instance_,
      BDMASurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMASurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BDMASurfaceDesc));
  BDMAOpDesc_descriptor_ = file->message_type(9);
  static const int BDMAOpDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMAOpDesc, num_transfers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMAOpDesc, reserved0_),
  };
  BDMAOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BDMAOpDesc_descriptor_,
      BDMAOpDesc::default_instance_,
      BDMAOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMAOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BDMAOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BDMAOpDesc));
  CVTParam_descriptor_ = file->message_type(10);
  static const int CVTParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, truncate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, offset_),
  };
  CVTParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVTParam_descriptor_,
      CVTParam::default_instance_,
      CVTParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVTParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVTParam));
  MemInfo_descriptor_ = file->message_type(11);
  static const int MemInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, mem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, fill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, filler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, sw_dilation_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, sw_dilation_y_),
  };
  MemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemInfo_descriptor_,
      MemInfo::default_instance_,
      MemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemInfo));
  DataCube_descriptor_ = file->message_type(12);
  static const int DataCube_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, reserved0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, reserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, line_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, surf_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, plane_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, mem_info_),
  };
  DataCube_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCube_descriptor_,
      DataCube::default_instance_,
      DataCube_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCube, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCube));
  CONVSurfaceDesc_descriptor_ = file->message_type(13);
  static const int CONVSurfaceDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, weight_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, wmb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, wgs_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, src_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, dst_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, offset_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, in_line_uv_stride_),
  };
  CONVSurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CONVSurfaceDesc_descriptor_,
      CONVSurfaceDesc::default_instance_,
      CONVSurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVSurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CONVSurfaceDesc));
  CONVOpDesc_descriptor_ = file->message_type(14);
  static const int CONVOpDesc_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, conv_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, data_reuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, weight_reuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, skip_data_rls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, skip_weight_rls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, reserved0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, entry_per_slice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, data_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pixel_mapping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, fetch_grain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pixel_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pixel_offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, gob_per_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, gob_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, gob_y_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, gob_per_uv_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, weight_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, data_bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, weight_bank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, batch_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, post_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pixel_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, input_width_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, input_height_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, input_channel_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, kernel_width_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, kernel_height_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, kernel_channel_csc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, input_width_cmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, input_height_cmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, bytes_per_kernel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, mean_ry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, mean_gu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, mean_bv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, mean_ax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, mean_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, conv_stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, conv_stride_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pad_x_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pad_x_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pad_y_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pad_y_bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, dilation_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, dilation_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, reserved2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pra_truncate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, in_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, out_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, pad_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, in_cvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, out_cvt_),
  };
  CONVOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CONVOpDesc_descriptor_,
      CONVOpDesc::default_instance_,
      CONVOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CONVOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CONVOpDesc));
  SDPCvt_descriptor_ = file->message_type(15);
  static const int SDPCvt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPCvt, alu_cvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPCvt, mul_cvt_),
  };
  SDPCvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDPCvt_descriptor_,
      SDPCvt::default_instance_,
      SDPCvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPCvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPCvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDPCvt));
  SDPOp_descriptor_ = file->message_type(16);
  static const int SDPOp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, alu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, shift_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, truncate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, alu_operand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, mul_operand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, cvt_),
  };
  SDPOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDPOp_descriptor_,
      SDPOp::default_instance_,
      SDPOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDPOp));
  SDPOp_SDPOpMode_descriptor_ = SDPOp_descriptor_->enum_type(0);
  SDPSurfaceDesc_descriptor_ = file->message_type(17);
  static const int SDPSurfaceDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, src_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, x1_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, x2_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, y_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, dst_data_),
  };
  SDPSurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDPSurfaceDesc_descriptor_,
      SDPSurfaceDesc::default_instance_,
      SDPSurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPSurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDPSurfaceDesc));
  SDPOpDesc_descriptor_ = file->message_type(18);
  static const int SDPOpDesc_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, src_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, dst_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, lut_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, out_cvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, conv_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, batch_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, reserved0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, batch_stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, x1_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, x2_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, y_op_),
  };
  SDPOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SDPOpDesc_descriptor_,
      SDPOpDesc::default_instance_,
      SDPOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDPOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SDPOpDesc));
  PDPSurfaceDesc_descriptor_ = file->message_type(19);
  static const int PDPSurfaceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPSurfaceDesc, src_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPSurfaceDesc, dst_data_),
  };
  PDPSurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDPSurfaceDesc_descriptor_,
      PDPSurfaceDesc::default_instance_,
      PDPSurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPSurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPSurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDPSurfaceDesc));
  PDPOpDesc_descriptor_ = file->message_type(20);
  static const int PDPOpDesc_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_in_width_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_in_width_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_in_width_last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_width_first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_width_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, partial_width_last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, split_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pool_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pool_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pool_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, stride_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pad_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pad_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pad_top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, pad_bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, reserved0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, padding_value_),
  };
  PDPOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PDPOpDesc_descriptor_,
      PDPOpDesc::default_instance_,
      PDPOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDPOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PDPOpDesc));
  PDPOpDesc_PoolingMode_descriptor_ = PDPOpDesc_descriptor_->enum_type(0);
  CDPSurfaceDesc_descriptor_ = file->message_type(21);
  static const int CDPSurfaceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPSurfaceDesc, src_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPSurfaceDesc, dst_data_),
  };
  CDPSurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDPSurfaceDesc_descriptor_,
      CDPSurfaceDesc::default_instance_,
      CDPSurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPSurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPSurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDPSurfaceDesc));
  CDPOpDesc_descriptor_ = file->message_type(22);
  static const int CDPOpDesc_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, in_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, out_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, lut_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, in_cvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, out_cvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, local_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, bypass_sqsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, bypass_out_mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, reserved0_),
  };
  CDPOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDPOpDesc_descriptor_,
      CDPOpDesc::default_instance_,
      CDPOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDPOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDPOpDesc));
  RUBIKSurfaceDesc_descriptor_ = file->message_type(23);
  static const int RUBIKSurfaceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKSurfaceDesc, src_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKSurfaceDesc, dst_data_),
  };
  RUBIKSurfaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RUBIKSurfaceDesc_descriptor_,
      RUBIKSurfaceDesc::default_instance_,
      RUBIKSurfaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKSurfaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKSurfaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RUBIKSurfaceDesc));
  RUBIKOpDesc_descriptor_ = file->message_type(24);
  static const int RUBIKOpDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, stride_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, stride_y_),
  };
  RUBIKOpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RUBIKOpDesc_descriptor_,
      RUBIKOpDesc::default_instance_,
      RUBIKOpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUBIKOpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RUBIKOpDesc));
  SurfaceContainer_descriptor_ = file->message_type(25);
  static const int SurfaceContainer_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, bdma_surface_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, conv_surface_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, sdp_surface_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, pdp_surface_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, cdp_surface_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(SurfaceContainer_default_oneof_instance_, rubik_surface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceContainer, surface_container_oneof_),
  };
  SurfaceContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceContainer_descriptor_,
      SurfaceContainer::default_instance_,
      SurfaceContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceContainer, _unknown_fields_),
      -1,
      SurfaceContainer_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceContainer, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceContainer));
  OperationContainer_descriptor_ = file->message_type(26);
  static const int OperationContainer_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, bdma_op_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, conv_op_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, sdp_op_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, pdp_op_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, cdp_op_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(OperationContainer_default_oneof_instance_, rubik_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationContainer, op_container_oneof_),
  };
  OperationContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperationContainer_descriptor_,
      OperationContainer::default_instance_,
      OperationContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationContainer, _unknown_fields_),
      -1,
      OperationContainer_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperationContainer, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperationContainer));
  Consumer_descriptor_ = file->message_type(27);
  static const int Consumer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumer, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumer, event_),
  };
  Consumer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Consumer_descriptor_,
      Consumer::default_instance_,
      Consumer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Consumer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Consumer));
  Consumer_EventType_descriptor_ = Consumer_descriptor_->enum_type(0);
  Layer_descriptor_ = file->message_type(28);
  static const int Layer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, roi_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, dependency_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, fused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, op_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, surface_),
  };
  Layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Layer_descriptor_,
      Layer::default_instance_,
      Layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Layer));
  NetworkLayer_descriptor_ = file->message_type(29);
  static const int NetworkLayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayer, layer_),
  };
  NetworkLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkLayer_descriptor_,
      NetworkLayer::default_instance_,
      NetworkLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkLayer));
  NetworkDesc_descriptor_ = file->message_type(30);
  static const int NetworkDesc_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, operation_desc_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, surface_desc_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, dependency_graph_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, lut_data_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, roi_array_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, surface_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, stat_list_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, reserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, op_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, num_rois_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, num_operations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, num_luts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, num_addresses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, input_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, dynamic_roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, reserved0_),
  };
  NetworkDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkDesc_descriptor_,
      NetworkDesc::default_instance_,
      NetworkDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkDesc));
  LUTParamList_descriptor_ = file->message_type(31);
  static const int LUTParamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParamList, lut_param_),
  };
  LUTParamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LUTParamList_descriptor_,
      LUTParamList::default_instance_,
      LUTParamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LUTParamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LUTParamList));
  ROIArrayDesc_descriptor_ = file->message_type(32);
  static const int ROIArrayDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIArrayDesc, array_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIArrayDesc, array_reserved_),
  };
  ROIArrayDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROIArrayDesc_descriptor_,
      ROIArrayDesc::default_instance_,
      ROIArrayDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIArrayDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIArrayDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROIArrayDesc));
  ROIDesc_descriptor_ = file->message_type(33);
  static const int ROIDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, bottom_),
  };
  ROIDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROIDesc_descriptor_,
      ROIDesc::default_instance_,
      ROIDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROIDesc));
  ROIDescription_descriptor_ = file->message_type(34);
  static const int ROIDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDescription, roi_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDescription, roi_desc_),
  };
  ROIDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROIDescription_descriptor_,
      ROIDescription::default_instance_,
      ROIDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROIDescription));
  Network_descriptor_ = file->message_type(35);
  static const int Network_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, lut_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, roi_list_),
  };
  Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Network));
  TaskStatus_descriptor_ = file->message_type(36);
  static const int TaskStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, status_engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, subframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, status_task_),
  };
  TaskStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStatus));
  Action_descriptor_ = file->message_type(37);
  static const int Action_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, event_id_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  TaskSchedule_descriptor_ = file->message_type(38);
  static const int TaskSchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSchedule, pre_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSchedule, post_actions_),
  };
  TaskSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskSchedule_descriptor_,
      TaskSchedule::default_instance_,
      TaskSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskSchedule));
  TasksData_descriptor_ = file->message_type(39);
  static const int TasksData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, engine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, task_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, task_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, task_result_),
  };
  TasksData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TasksData_descriptor_,
      TasksData::default_instance_,
      TasksData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TasksData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TasksData));
  Event_descriptor_ = file->message_type(40);
  static const int Event_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_timeout_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_EventType_descriptor_ = Event_descriptor_->enum_type(0);
  EventList_descriptor_ = file->message_type(41);
  static const int EventList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventList, event_),
  };
  EventList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventList_descriptor_,
      EventList::default_instance_,
      EventList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventList));
  SubmitSlot_descriptor_ = file->message_type(42);
  static const int SubmitSlot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitSlot, task_id_),
  };
  SubmitSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitSlot_descriptor_,
      SubmitSlot::default_instance_,
      SubmitSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitSlot));
  TestInfo_descriptor_ = file->message_type(43);
  static const int TestInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, num_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, num_buffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, event_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, slots_),
  };
  TestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestInfo_descriptor_,
      TestInfo::default_instance_,
      TestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestInfo));
  Test_descriptor_ = file->message_type(44);
  static const int Test_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, test_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  DataPrecision_descriptor_ = file->enum_type(0);
  MemType_descriptor_ = file->enum_type(1);
  MemFlag_descriptor_ = file->enum_type(2);
  EngineID_descriptor_ = file->enum_type(3);
  LayerType_descriptor_ = file->enum_type(4);
  ALUType_descriptor_ = file->enum_type(5);
  SDPOpType_descriptor_ = file->enum_type(6);
  LUTLOGSize_descriptor_ = file->enum_type(7);
  LUTTable_descriptor_ = file->enum_type(8);
  LUTMethod_descriptor_ = file->enum_type(9);
  LUTPriority_descriptor_ = file->enum_type(10);
  ConvMode_descriptor_ = file->enum_type(11);
  ConvPixelMAP_descriptor_ = file->enum_type(12);
  PixelOverride_descriptor_ = file->enum_type(13);
  PoolSize_descriptor_ = file->enum_type(14);
  RUBIKMode_descriptor_ = file->enum_type(15);
  WeightFormat_descriptor_ = file->enum_type(16);
  MeanFormat_descriptor_ = file->enum_type(17);
  SDPActivation_descriptor_ = file->enum_type(18);
  DataFormat_descriptor_ = file->enum_type(19);
  FillerType_descriptor_ = file->enum_type(20);
  FileType_descriptor_ = file->enum_type(21);
  DataType_descriptor_ = file->enum_type(22);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DlaPrototestInterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LUTOffset_descriptor_, &LUTOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FloatData_descriptor_, &FloatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DLASlope_descriptor_, &DLASlope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFile_descriptor_, &DataFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Constant_descriptor_, &Constant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataFiller_descriptor_, &DataFiller::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LUTParam_descriptor_, &LUTParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BDMATransferDesc_descriptor_, &BDMATransferDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BDMASurfaceDesc_descriptor_, &BDMASurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BDMAOpDesc_descriptor_, &BDMAOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVTParam_descriptor_, &CVTParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemInfo_descriptor_, &MemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCube_descriptor_, &DataCube::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CONVSurfaceDesc_descriptor_, &CONVSurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CONVOpDesc_descriptor_, &CONVOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDPCvt_descriptor_, &SDPCvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDPOp_descriptor_, &SDPOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDPSurfaceDesc_descriptor_, &SDPSurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SDPOpDesc_descriptor_, &SDPOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDPSurfaceDesc_descriptor_, &PDPSurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PDPOpDesc_descriptor_, &PDPOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDPSurfaceDesc_descriptor_, &CDPSurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDPOpDesc_descriptor_, &CDPOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RUBIKSurfaceDesc_descriptor_, &RUBIKSurfaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RUBIKOpDesc_descriptor_, &RUBIKOpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceContainer_descriptor_, &SurfaceContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperationContainer_descriptor_, &OperationContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Consumer_descriptor_, &Consumer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Layer_descriptor_, &Layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkLayer_descriptor_, &NetworkLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkDesc_descriptor_, &NetworkDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LUTParamList_descriptor_, &LUTParamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROIArrayDesc_descriptor_, &ROIArrayDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROIDesc_descriptor_, &ROIDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROIDescription_descriptor_, &ROIDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskSchedule_descriptor_, &TaskSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TasksData_descriptor_, &TasksData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventList_descriptor_, &EventList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitSlot_descriptor_, &SubmitSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestInfo_descriptor_, &TestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DlaPrototestInterface_2eproto() {
  delete LUTOffset::default_instance_;
  delete LUTOffset_default_oneof_instance_;
  delete LUTOffset_reflection_;
  delete FloatData::default_instance_;
  delete FloatData_reflection_;
  delete DLASlope::default_instance_;
  delete DLASlope_default_oneof_instance_;
  delete DLASlope_reflection_;
  delete DataFile::default_instance_;
  delete DataFile_reflection_;
  delete Constant::default_instance_;
  delete Constant_reflection_;
  delete DataFiller::default_instance_;
  delete DataFiller_default_oneof_instance_;
  delete DataFiller_reflection_;
  delete LUTParam::default_instance_;
  delete LUTParam_reflection_;
  delete BDMATransferDesc::default_instance_;
  delete BDMATransferDesc_reflection_;
  delete BDMASurfaceDesc::default_instance_;
  delete BDMASurfaceDesc_reflection_;
  delete BDMAOpDesc::default_instance_;
  delete BDMAOpDesc_reflection_;
  delete CVTParam::default_instance_;
  delete CVTParam_reflection_;
  delete MemInfo::default_instance_;
  delete MemInfo_reflection_;
  delete DataCube::default_instance_;
  delete DataCube_reflection_;
  delete CONVSurfaceDesc::default_instance_;
  delete CONVSurfaceDesc_reflection_;
  delete CONVOpDesc::default_instance_;
  delete CONVOpDesc_reflection_;
  delete SDPCvt::default_instance_;
  delete SDPCvt_reflection_;
  delete SDPOp::default_instance_;
  delete SDPOp_reflection_;
  delete SDPSurfaceDesc::default_instance_;
  delete SDPSurfaceDesc_reflection_;
  delete SDPOpDesc::default_instance_;
  delete SDPOpDesc_reflection_;
  delete PDPSurfaceDesc::default_instance_;
  delete PDPSurfaceDesc_reflection_;
  delete PDPOpDesc::default_instance_;
  delete PDPOpDesc_reflection_;
  delete CDPSurfaceDesc::default_instance_;
  delete CDPSurfaceDesc_reflection_;
  delete CDPOpDesc::default_instance_;
  delete CDPOpDesc_reflection_;
  delete RUBIKSurfaceDesc::default_instance_;
  delete RUBIKSurfaceDesc_reflection_;
  delete RUBIKOpDesc::default_instance_;
  delete RUBIKOpDesc_reflection_;
  delete SurfaceContainer::default_instance_;
  delete SurfaceContainer_default_oneof_instance_;
  delete SurfaceContainer_reflection_;
  delete OperationContainer::default_instance_;
  delete OperationContainer_default_oneof_instance_;
  delete OperationContainer_reflection_;
  delete Consumer::default_instance_;
  delete Consumer_reflection_;
  delete Layer::default_instance_;
  delete Layer_reflection_;
  delete NetworkLayer::default_instance_;
  delete NetworkLayer_reflection_;
  delete NetworkDesc::default_instance_;
  delete NetworkDesc_reflection_;
  delete LUTParamList::default_instance_;
  delete LUTParamList_reflection_;
  delete ROIArrayDesc::default_instance_;
  delete ROIArrayDesc_reflection_;
  delete ROIDesc::default_instance_;
  delete ROIDesc_reflection_;
  delete ROIDescription::default_instance_;
  delete ROIDescription_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete TaskSchedule::default_instance_;
  delete TaskSchedule_reflection_;
  delete TasksData::default_instance_;
  delete TasksData_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete EventList::default_instance_;
  delete EventList_reflection_;
  delete SubmitSlot::default_instance_;
  delete SubmitSlot_reflection_;
  delete TestInfo::default_instance_;
  delete TestInfo_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
}

void protobuf_AddDesc_DlaPrototestInterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033DlaPrototestInterface.proto\022\031nvdla_pro"
    "totest_interface\"J\n\tLUTOffset\022\024\n\nexp_off"
    "set\030\001 \001(\005H\000\022\023\n\tfrac_bits\030\002 \001(\005H\000B\022\n\020lut_"
    "offset_oneof\"A\n\tFloatData\022\r\n\005scale\030\001 \002(\005"
    "\022\017\n\007shifter\030\002 \002(\005\022\024\n\treserved0\030\003 \001(\r:\0010\""
    "g\n\010DLASlope\0226\n\006data_i\030\001 \001(\0132$.nvdla_prot"
    "otest_interface.FloatDataH\000\022\020\n\006data_f\030\002 "
    "\001(\rH\000B\021\n\017dla_slope_oneof\"\246\001\n\010DataFile\022\014\n"
    "\004name\030\001 \002(\t\0226\n\tdata_type\030\002 \002(\0162#.nvdla_p"
    "rototest_interface.DataType\022\016\n\006offset\030\003 "
    "\002(\r\022\014\n\004size\030\004 \002(\r\0226\n\tfile_type\030\005 \002(\0162#.n"
    "vdla_prototest_interface.FileType\"\031\n\010Con"
    "stant\022\r\n\005value\030\001 \002(\005\"\221\001\n\nDataFiller\0228\n\td"
    "ata_file\030\001 \001(\0132#.nvdla_prototest_interfa"
    "ce.DataFileH\000\0224\n\005const\030\002 \001(\0132#.nvdla_pro"
    "totest_interface.ConstantH\000B\023\n\021data_fill"
    "er_oneof\"\244\007\n\010LUTParam\022\034\n\020linear_exp_tabl"
    "e\030\001 \003(\005B\002\020\001\022\035\n\021linear_only_table\030\002 \003(\005B\002"
    "\020\001\022\?\n\021linear_exp_offset\030\003 \002(\0132$.nvdla_pr"
    "ototest_interface.LUTOffset\022@\n\022linear_on"
    "ly_offset\030\004 \002(\0132$.nvdla_prototest_interf"
    "ace.LUTOffset\022\030\n\020linear_exp_start\030\005 \002(\004\022"
    "\026\n\016linear_exp_end\030\006 \002(\004\022\031\n\021linear_only_s"
    "tart\030\007 \002(\004\022\027\n\017linear_only_end\030\010 \002(\004\022G\n\032l"
    "inear_exp_underflow_slope\030\t \002(\0132#.nvdla_"
    "prototest_interface.DLASlope\022F\n\031linear_e"
    "xp_overflow_slope\030\n \002(\0132#.nvdla_prototes"
    "t_interface.DLASlope\022H\n\033linear_only_unde"
    "rflow_slope\030\013 \002(\0132#.nvdla_prototest_inte"
    "rface.DLASlope\022G\n\032linear_only_overflow_s"
    "lope\030\014 \002(\0132#.nvdla_prototest_interface.D"
    "LASlope\022\027\n\017hybrid_priority\030\r \002(\r\022\032\n\022unde"
    "rflow_priority\030\016 \002(\r\022\031\n\021overflow_priorit"
    "y\030\017 \002(\r\0224\n\006method\030\020 \002(\0162$.nvdla_prototes"
    "t_interface.LUTMethod\022C\n\tfill_type\030\021 \001(\016"
    "2%.nvdla_prototest_interface.FillerType:"
    "\tFILL_NONE\0225\n\006filler\030\022 \001(\0132%.nvdla_proto"
    "test_interface.DataFiller\022L\n\tprecision\030\023"
    " \001(\0162(.nvdla_prototest_interface.DataPre"
    "cision:\017PRECISION_INT16\"\337\002\n\020BDMATransfer"
    "Desc\022\026\n\016source_address\030\001 \002(\005\022\033\n\023destinat"
    "ion_address\030\002 \002(\005\022\021\n\tline_size\030\003 \002(\r\022\023\n\013"
    "line_repeat\030\004 \002(\r\022\023\n\013source_line\030\005 \002(\r\022\030"
    "\n\020destination_line\030\006 \002(\r\022\026\n\016surface_repe"
    "at\030\007 \002(\r\022\026\n\016source_surface\030\010 \002(\r\022\033\n\023dest"
    "ination_surface\030\t \002(\r\0228\n\014src_mem_info\030\n "
    "\002(\0132\".nvdla_prototest_interface.MemInfo\022"
    "8\n\014dst_mem_info\030\013 \002(\0132\".nvdla_prototest_"
    "interface.MemInfo\"\337\001\n\017BDMASurfaceDesc\0227\n"
    "\013source_type\030\001 \002(\0162\".nvdla_prototest_int"
    "erface.MemType\022<\n\020destination_type\030\002 \002(\016"
    "2\".nvdla_prototest_interface.MemType\022\025\n\r"
    "num_transfers\030\003 \002(\r\022>\n\ttransfers\030\004 \003(\0132+"
    ".nvdla_prototest_interface.BDMATransferD"
    "esc\"9\n\nBDMAOpDesc\022\025\n\rnum_transfers\030\001 \002(\r"
    "\022\024\n\treserved0\030\002 \001(\r:\0010\"K\n\010CVTParam\022\r\n\005sc"
    "ale\030\001 \002(\005\022\020\n\010truncate\030\002 \002(\r\022\016\n\006enable\030\003 "
    "\002(\r\022\016\n\006offset\030\004 \002(\005\"\203\003\n\007MemInfo\022\022\n\006mem_i"
    "d\030\001 \002(\005:\002-1\022\023\n\010mem_size\030\002 \002(\r:\0010\022\021\n\006offs"
    "et\030\003 \002(\r:\0010\022C\n\tfill_type\030\004 \001(\0162%.nvdla_p"
    "rototest_interface.FillerType:\tFILL_NONE"
    "\0225\n\006filler\030\005 \001(\0132%.nvdla_prototest_inter"
    "face.DataFiller\022\?\n\004flag\030\006 \001(\0162\".nvdla_pr"
    "ototest_interface.MemFlag:\rDLA_MEM_ALLOC"
    "\022K\n\tprecision\030\007 \001(\0162(.nvdla_prototest_in"
    "terface.DataPrecision:\016PRECISION_INT8\022\030\n"
    "\rsw_dilation_x\030\010 \001(\r:\0011\022\030\n\rsw_dilation_y"
    "\030\t \001(\r:\0011\"\255\002\n\010DataCube\022\024\n\treserved0\030\001 \001("
    "\r:\0010\0220\n\004type\030\002 \002(\0162\".nvdla_prototest_int"
    "erface.MemType\022\017\n\007address\030\003 \002(\005\022\014\n\004size\030"
    "\004 \002(\r\022\r\n\005width\030\005 \002(\r\022\016\n\006height\030\006 \002(\r\022\017\n\007"
    "channel\030\007 \002(\r\022\024\n\treserved1\030\010 \001(\r:\0010\022\023\n\013l"
    "ine_stride\030\t \002(\r\022\023\n\013surf_stride\030\n \002(\r\022\024\n"
    "\014plane_stride\030\013 \002(\r\0224\n\010mem_info\030\014 \002(\0132\"."
    "nvdla_prototest_interface.MemInfo\"\324\002\n\017CO"
    "NVSurfaceDesc\0228\n\013weight_data\030\001 \002(\0132#.nvd"
    "la_prototest_interface.DataCube\0225\n\010wmb_d"
    "ata\030\002 \001(\0132#.nvdla_prototest_interface.Da"
    "taCube\0225\n\010wgs_data\030\003 \001(\0132#.nvdla_protote"
    "st_interface.DataCube\0225\n\010src_data\030\004 \002(\0132"
    "#.nvdla_prototest_interface.DataCube\0225\n\010"
    "dst_data\030\005 \002(\0132#.nvdla_prototest_interfa"
    "ce.DataCube\022\020\n\010offset_u\030\006 \002(\003\022\031\n\021in_line"
    "_uv_stride\030\007 \002(\r\"\365\013\n\nCONVOpDesc\0226\n\tconv_"
    "mode\030\001 \002(\0162#.nvdla_prototest_interface.C"
    "onvMode\022\022\n\ndata_reuse\030\002 \002(\r\022\024\n\014weight_re"
    "use\030\003 \002(\r\022\025\n\rskip_data_rls\030\004 \002(\r\022\027\n\017skip"
    "_weight_rls\030\005 \002(\r\022\024\n\treserved0\030\006 \001(\r:\0010\022"
    "\027\n\017entry_per_slice\030\007 \002(\r\022:\n\013data_format\030"
    "\010 \002(\0162%.nvdla_prototest_interface.DataFo"
    "rmat\022\025\n\rpixel_mapping\030\t \002(\r\022\023\n\013fetch_gra"
    "in\030\n \002(\r\022\026\n\016pixel_offset_x\030\013 \002(\r\022\026\n\016pixe"
    "l_offset_y\030\014 \002(\r\022\024\n\014gob_per_line\030\r \002(\r\022\022"
    "\n\ngob_height\030\016 \002(\r\022\023\n\013gob_y_index\030\017 \002(\r\022"
    "\027\n\017gob_per_uv_line\030\020 \002(\r\022\r\n\005batch\030\021 \002(\r\022"
    ">\n\rweight_format\030\022 \002(\0162\'.nvdla_prototest"
    "_interface.WeightFormat\022\021\n\tdata_bank\030\023 \002"
    "(\r\022\023\n\013weight_bank\030\024 \002(\r\022\024\n\014batch_stride\030"
    "\025 \002(\r\022\026\n\016post_extension\030\026 \002(\r\022@\n\016pixel_o"
    "verride\030\027 \001(\0162(.nvdla_prototest_interfac"
    "e.PixelOverride\022\017\n\007release\030\030 \002(\r\022\027\n\017inpu"
    "t_width_csc\030\031 \002(\r\022\030\n\020input_height_csc\030\032 "
    "\002(\r\022\031\n\021input_channel_csc\030\033 \002(\r\022\030\n\020kernel"
    "_width_csc\030\034 \002(\r\022\031\n\021kernel_height_csc\030\035 "
    "\002(\r\022\032\n\022kernel_channel_csc\030\036 \002(\r\022\030\n\020input"
    "_width_cmac\030\037 \002(\r\022\031\n\021input_height_cmac\030 "
    " \002(\r\022\030\n\020bytes_per_kernel\030! \002(\r\022\017\n\007mean_r"
    "y\030\" \002(\005\022\017\n\007mean_gu\030# \002(\005\022\017\n\007mean_bv\030$ \002("
    "\005\022\017\n\007mean_ax\030% \002(\005\022:\n\013mean_format\030& \002(\0162"
    "%.nvdla_prototest_interface.MeanFormat\022\025"
    "\n\rconv_stride_x\030\' \002(\r\022\025\n\rconv_stride_y\030("
    " \002(\r\022\022\n\npad_x_left\030) \002(\r\022\023\n\013pad_x_right\030"
    "* \002(\r\022\021\n\tpad_y_top\030+ \002(\r\022\024\n\014pad_y_bottom"
    "\030, \002(\r\022\022\n\ndilation_x\030- \002(\r\022\022\n\ndilation_y"
    "\030. \002(\r\022\025\n\treserved2\030/ \003(\rB\002\020\001\022\024\n\014pra_tru"
    "ncate\0300 \002(\r\022>\n\014in_precision\0301 \002(\0162(.nvdl"
    "a_prototest_interface.DataPrecision\022\?\n\ro"
    "ut_precision\0302 \002(\0162(.nvdla_prototest_int"
    "erface.DataPrecision\022\017\n\007pad_val\0303 \002(\005\0223\n"
    "\006in_cvt\0304 \002(\0132#.nvdla_prototest_interfac"
    "e.CVTParam\0224\n\007out_cvt\0305 \002(\0132#.nvdla_prot"
    "otest_interface.CVTParam\"t\n\006SDPCvt\0224\n\007al"
    "u_cvt\030\001 \002(\0132#.nvdla_prototest_interface."
    "CVTParam\0224\n\007mul_cvt\030\002 \002(\0132#.nvdla_protot"
    "est_interface.CVTParam\"\200\004\n\005SDPOp\022\016\n\006enab"
    "le\030\001 \002(\r\0224\n\010alu_type\030\002 \002(\0162\".nvdla_proto"
    "test_interface.ALUType\0222\n\004type\030\003 \002(\0162$.n"
    "vdla_prototest_interface.SDPOpType\0228\n\004mo"
    "de\030\004 \002(\0162*.nvdla_prototest_interface.SDP"
    "Op.SDPOpMode\0225\n\003act\030\005 \002(\0162(.nvdla_protot"
    "est_interface.SDPActivation\022\023\n\013shift_val"
    "ue\030\006 \002(\r\022\020\n\010truncate\030\007 \002(\r\022;\n\tprecision\030"
    "\010 \002(\0162(.nvdla_prototest_interface.DataPr"
    "ecision\022\023\n\013alu_operand\030\t \002(\005\022\023\n\013mul_oper"
    "and\030\n \002(\005\022.\n\003cvt\030\013 \002(\0132!.nvdla_prototest"
    "_interface.SDPCvt\"N\n\tSDPOpMode\022\024\n\020SDP_OP"
    "_PER_LAYER\020\000\022\025\n\021SDP_OP_PER_KERNEL\020\001\022\024\n\020S"
    "DP_OP_PER_POINT\020\002\"\237\002\n\016SDPSurfaceDesc\0225\n\010"
    "src_data\030\001 \002(\0132#.nvdla_prototest_interfa"
    "ce.DataCube\0224\n\007x1_data\030\002 \001(\0132#.nvdla_pro"
    "totest_interface.DataCube\0224\n\007x2_data\030\003 \001"
    "(\0132#.nvdla_prototest_interface.DataCube\022"
    "3\n\006y_data\030\004 \001(\0132#.nvdla_prototest_interf"
    "ace.DataCube\0225\n\010dst_data\030\005 \002(\0132#.nvdla_p"
    "rototest_interface.DataCube\"\337\003\n\tSDPOpDes"
    "c\022\?\n\rsrc_precision\030\001 \002(\0162(.nvdla_protote"
    "st_interface.DataPrecision\022\?\n\rdst_precis"
    "ion\030\002 \002(\0162(.nvdla_prototest_interface.Da"
    "taPrecision\022\021\n\tlut_index\030\003 \002(\005\0224\n\007out_cv"
    "t\030\004 \002(\0132#.nvdla_prototest_interface.CVTP"
    "aram\0226\n\tconv_mode\030\005 \002(\0162#.nvdla_prototes"
    "t_interface.ConvMode\022\021\n\tbatch_num\030\006 \002(\r\022"
    "\024\n\treserved0\030\007 \001(\r:\0010\022\024\n\014batch_stride\030\010 "
    "\002(\r\022/\n\005x1_op\030\t \002(\0132 .nvdla_prototest_int"
    "erface.SDPOp\022/\n\005x2_op\030\n \002(\0132 .nvdla_prot"
    "otest_interface.SDPOp\022.\n\004y_op\030\013 \002(\0132 .nv"
    "dla_prototest_interface.SDPOp\"~\n\016PDPSurf"
    "aceDesc\0225\n\010src_data\030\001 \002(\0132#.nvdla_protot"
    "est_interface.DataCube\0225\n\010dst_data\030\002 \002(\013"
    "2#.nvdla_prototest_interface.DataCube\"\234\005"
    "\n\tPDPOpDesc\022\036\n\026partial_in_width_first\030\001 "
    "\002(\r\022\034\n\024partial_in_width_mid\030\002 \002(\r\022\035\n\025par"
    "tial_in_width_last\030\003 \002(\r\022\033\n\023partial_widt"
    "h_first\030\004 \002(\r\022\031\n\021partial_width_mid\030\005 \002(\r"
    "\022\032\n\022partial_width_last\030\006 \002(\r\022\021\n\tsplit_nu"
    "m\030\007 \002(\r\022C\n\tpool_mode\030\010 \002(\01620.nvdla_proto"
    "test_interface.PDPOpDesc.PoolingMode\0227\n\n"
    "pool_width\030\t \002(\0162#.nvdla_prototest_inter"
    "face.PoolSize\0228\n\013pool_height\030\n \002(\0162#.nvd"
    "la_prototest_interface.PoolSize\022\020\n\010strid"
    "e_x\030\013 \002(\r\022\020\n\010stride_y\030\014 \002(\r\022\020\n\010pad_left\030"
    "\r \002(\r\022\021\n\tpad_right\030\016 \002(\r\022\017\n\007pad_top\030\017 \002("
    "\r\022\022\n\npad_bottom\030\020 \002(\r\022;\n\tprecision\030\021 \002(\016"
    "2(.nvdla_prototest_interface.DataPrecisi"
    "on\022\024\n\treserved0\030\022 \001(\r:\0010\022\031\n\rpadding_valu"
    "e\030\023 \003(\005B\002\020\001\"7\n\013PoolingMode\022\014\n\010MODE_AVG\020\000"
    "\022\014\n\010MODE_MAX\020\001\022\014\n\010MODE_MIN\020\002\"~\n\016CDPSurfa"
    "ceDesc\0225\n\010src_data\030\001 \002(\0132#.nvdla_protote"
    "st_interface.DataCube\0225\n\010dst_data\030\002 \002(\0132"
    "#.nvdla_prototest_interface.DataCube\"\342\002\n"
    "\tCDPOpDesc\022>\n\014in_precision\030\001 \002(\0162(.nvdla"
    "_prototest_interface.DataPrecision\022\?\n\rou"
    "t_precision\030\002 \002(\0162(.nvdla_prototest_inte"
    "rface.DataPrecision\022\021\n\tlut_index\030\003 \002(\005\0223"
    "\n\006in_cvt\030\004 \002(\0132#.nvdla_prototest_interfa"
    "ce.CVTParam\0224\n\007out_cvt\030\005 \002(\0132#.nvdla_pro"
    "totest_interface.CVTParam\022\022\n\nlocal_size\030"
    "\006 \002(\r\022\024\n\014bypass_sqsum\030\007 \002(\r\022\026\n\016bypass_ou"
    "t_mul\030\010 \002(\r\022\024\n\treserved0\030\t \001(\r:\0010\"\200\001\n\020RU"
    "BIKSurfaceDesc\0225\n\010src_data\030\001 \002(\0132#.nvdla"
    "_prototest_interface.DataCube\0225\n\010dst_dat"
    "a\030\002 \002(\0132#.nvdla_prototest_interface.Data"
    "Cube\"\242\001\n\013RUBIKOpDesc\0222\n\004mode\030\001 \002(\0162$.nvd"
    "la_prototest_interface.RUBIKMode\022;\n\tprec"
    "ision\030\002 \002(\0162(.nvdla_prototest_interface."
    "DataPrecision\022\020\n\010stride_x\030\003 \002(\r\022\020\n\010strid"
    "e_y\030\004 \002(\r\"\301\003\n\020SurfaceContainer\022B\n\014bdma_s"
    "urface\030\001 \001(\0132*.nvdla_prototest_interface"
    ".BDMASurfaceDescH\000\022B\n\014conv_surface\030\002 \001(\013"
    "2*.nvdla_prototest_interface.CONVSurface"
    "DescH\000\022@\n\013sdp_surface\030\003 \001(\0132).nvdla_prot"
    "otest_interface.SDPSurfaceDescH\000\022@\n\013pdp_"
    "surface\030\004 \001(\0132).nvdla_prototest_interfac"
    "e.PDPSurfaceDescH\000\022@\n\013cdp_surface\030\005 \001(\0132"
    ").nvdla_prototest_interface.CDPSurfaceDe"
    "scH\000\022D\n\rrubik_surface\030\006 \001(\0132+.nvdla_prot"
    "otest_interface.RUBIKSurfaceDescH\000B\031\n\027su"
    "rface_container_oneof\"\202\003\n\022OperationConta"
    "iner\0228\n\007bdma_op\030\001 \001(\0132%.nvdla_prototest_"
    "interface.BDMAOpDescH\000\0228\n\007conv_op\030\002 \001(\0132"
    "%.nvdla_prototest_interface.CONVOpDescH\000"
    "\0226\n\006sdp_op\030\003 \001(\0132$.nvdla_prototest_inter"
    "face.SDPOpDescH\000\0226\n\006pdp_op\030\004 \001(\0132$.nvdla"
    "_prototest_interface.PDPOpDescH\000\0226\n\006cdp_"
    "op\030\005 \001(\0132$.nvdla_prototest_interface.CDP"
    "OpDescH\000\022:\n\010rubik_op\030\006 \001(\0132&.nvdla_proto"
    "test_interface.RUBIKOpDescH\000B\024\n\022op_conta"
    "iner_oneof\"\361\001\n\010Consumer\022\r\n\005index\030\001 \002(\005\0222"
    "\n\004type\030\002 \002(\0162$.nvdla_prototest_interface"
    ".LayerType\022<\n\005event\030\003 \002(\0162-.nvdla_protot"
    "est_interface.Consumer.EventType\"d\n\tEven"
    "tType\022\020\n\014OP_COMPLETED\020\001\022\021\n\rOP_PROGRAMMED"
    "\020\002\022\016\n\nOP_ENABLED\020\003\022\020\n\014CDMA_WT_DONE\020\004\022\020\n\014"
    "CDMA_DT_DONE\020\005\"\366\002\n\005Layer\022\r\n\005index\030\001 \002(\005\022"
    "\021\n\troi_index\030\002 \002(\005\0222\n\004type\030\003 \002(\0162$.nvdla"
    "_prototest_interface.LayerType\022\030\n\020depend"
    "ency_count\030\004 \002(\r\022\024\n\010reserved\030\005 \003(\rB\002\020\001\0223"
    "\n\006bottom\030\006 \003(\0132#.nvdla_prototest_interfa"
    "ce.Consumer\0222\n\005fused\030\007 \001(\0132#.nvdla_proto"
    "test_interface.Consumer\022@\n\top_config\030\010 \002"
    "(\0132-.nvdla_prototest_interface.Operation"
    "Container\022<\n\007surface\030\t \002(\0132+.nvdla_proto"
    "test_interface.SurfaceContainer\"\?\n\014Netwo"
    "rkLayer\022/\n\005layer\030\001 \003(\0132 .nvdla_prototest"
    "_interface.Layer\"\213\003\n\013NetworkDesc\022\034\n\024oper"
    "ation_desc_index\030\001 \002(\005\022\032\n\022surface_desc_i"
    "ndex\030\002 \002(\005\022\036\n\026dependency_graph_index\030\003 \002"
    "(\005\022\026\n\016lut_data_index\030\004 \002(\005\022\027\n\017roi_array_"
    "index\030\005 \002(\005\022\025\n\rsurface_index\030\006 \002(\005\022\033\n\017st"
    "at_list_index\030\007 \001(\005:\002-1\022\025\n\treserved1\030\010 \001"
    "(\005:\002-1\022\023\n\007op_head\030\t \003(\005B\002\020\001\022\020\n\010num_rois\030"
    "\n \002(\r\022\026\n\016num_operations\030\013 \002(\r\022\020\n\010num_lut"
    "s\030\014 \002(\r\022\025\n\rnum_addresses\030\r \002(\r\022\023\n\013input_"
    "layer\030\016 \002(\005\022\023\n\013dynamic_roi\030\017 \002(\r\022\024\n\trese"
    "rved0\030\020 \001(\r:\0010\"F\n\014LUTParamList\0226\n\tlut_pa"
    "ram\030\001 \003(\0132#.nvdla_prototest_interface.LU"
    "TParam\"<\n\014ROIArrayDesc\022\024\n\014array_length\030\001"
    " \002(\r\022\026\n\016array_reserved\030\002 \002(\r\"C\n\007ROIDesc\022"
    "\014\n\004left\030\001 \002(\r\022\013\n\003top\030\002 \002(\r\022\r\n\005right\030\003 \002("
    "\r\022\016\n\006bottom\030\004 \002(\r\"\200\001\n\016ROIDescription\0228\n\007"
    "roi_arr\030\001 \002(\0132\'.nvdla_prototest_interfac"
    "e.ROIArrayDesc\0224\n\010roi_desc\030\002 \003(\0132\".nvdla"
    "_prototest_interface.ROIDesc\"\361\001\n\007Network"
    "\0225\n\005param\030\001 \002(\0132&.nvdla_prototest_interf"
    "ace.NetworkDesc\0227\n\006layers\030\002 \002(\0132\'.nvdla_"
    "prototest_interface.NetworkLayer\0229\n\010lut_"
    "list\030\003 \002(\0132\'.nvdla_prototest_interface.L"
    "UTParamList\022;\n\010roi_list\030\004 \002(\0132).nvdla_pr"
    "ototest_interface.ROIDescription\"]\n\nTask"
    "Status\022\021\n\ttimestamp\030\001 \002(\004\022\025\n\rstatus_engi"
    "ne\030\002 \002(\r\022\020\n\010subframe\030\003 \002(\r\022\023\n\013status_tas"
    "k\030\004 \002(\r\"\036\n\006Action\022\024\n\010event_id\030\001 \003(\rB\002\020\001\""
    "\177\n\014TaskSchedule\0226\n\013pre_actions\030\001 \001(\0132!.n"
    "vdla_prototest_interface.Action\0227\n\014post_"
    "actions\030\002 \001(\0132!.nvdla_prototest_interfac"
    "e.Action\"\272\002\n\tTasksData\022\017\n\007task_id\030\001 \001(\r\022"
    "6\n\tengine_id\030\002 \002(\0162#.nvdla_prototest_int"
    "erface.EngineID\0223\n\007network\030\003 \002(\0132\".nvdla"
    "_prototest_interface.Network\0229\n\010schedule"
    "\030\004 \001(\0132\'.nvdla_prototest_interface.TaskS"
    "chedule\022:\n\013task_status\030\005 \001(\0132%.nvdla_pro"
    "totest_interface.TaskStatus\022 \n\014task_time"
    "out\030\006 \001(\r:\n4294967295\022\026\n\013task_result\030\007 \001"
    "(\005:\0010\"\332\001\n\005Event\022\020\n\010event_id\030\001 \002(\r\022>\n\neve"
    "nt_type\030\002 \002(\0162*.nvdla_prototest_interfac"
    "e.Event.EventType\022\023\n\013event_flags\030\003 \002(\r\022!"
    "\n\revent_timeout\030\004 \001(\r:\n4294967295\"G\n\tEve"
    "ntType\022\r\n\tSYNCPOINT\020\000\022\n\n\006SYNCFD\020\001\022\r\n\tSEM"
    "APHORE\020\002\022\020\n\014TS_SEMAPHORE\020\003\"<\n\tEventList\022"
    "/\n\005event\030\001 \003(\0132 .nvdla_prototest_interfa"
    "ce.Event\"\035\n\nSubmitSlot\022\017\n\007task_id\030\001 \003(\r\""
    "\326\001\n\010TestInfo\022\021\n\tnum_tasks\030\001 \002(\r\022\023\n\013num_b"
    "uffers\030\002 \002(\r\0222\n\004task\030\003 \003(\0132$.nvdla_proto"
    "test_interface.TasksData\0228\n\nevent_list\030\004"
    " \001(\0132$.nvdla_prototest_interface.EventLi"
    "st\0224\n\005slots\030\005 \003(\0132%.nvdla_prototest_inte"
    "rface.SubmitSlot\"9\n\004Test\0221\n\004test\030\001 \002(\0132#"
    ".nvdla_prototest_interface.TestInfo*L\n\rD"
    "ataPrecision\022\022\n\016PRECISION_INT8\020\000\022\023\n\017PREC"
    "ISION_INT16\020\001\022\022\n\016PRECISION_FP16\020\002*9\n\007Mem"
    "Type\022\016\n\nDLA_MEM_MC\020\000\022\016\n\nDLA_MEM_CV\020\001\022\016\n\n"
    "DLA_MEM_HW\020\002*g\n\007MemFlag\022\021\n\rDLA_MEM_ALLOC"
    "\020\000\022\017\n\013DLA_MEM_SET\020\001\022\021\n\rDLA_MEM_INPUT\020\002\022\022"
    "\n\016DLA_MEM_OUTPUT\020\003\022\021\n\rDLA_MEM_DEBUG\020\004* \n"
    "\010EngineID\022\t\n\005DLA_0\020\000\022\t\n\005DLA_1\020\001*o\n\tLayer"
    "Type\022\017\n\013DLA_OP_BDMA\020\000\022\017\n\013DLA_OP_CONV\020\001\022\016"
    "\n\nDLA_OP_SDP\020\002\022\016\n\nDLA_OP_PDP\020\003\022\016\n\nDLA_OP"
    "_CDP\020\004\022\020\n\014DLA_OP_RUBIK\020\005*=\n\007ALUType\022\013\n\007A"
    "LU_MAX\020\000\022\013\n\007ALU_MIN\020\001\022\013\n\007ALU_SUM\020\002\022\013\n\007AL"
    "U_EQL\020\003*M\n\tSDPOpType\022\017\n\013SDP_OP_NONE\020\000\022\016\n"
    "\nSDP_OP_MUL\020\001\022\016\n\nSDP_OP_ADD\020\002\022\017\n\013SDP_OP_"
    "BOTH\020\003*C\n\nLUTLOGSize\022\030\n\024EXP_TABLE_ENTRY_"
    "LOG2\020\006\022\033\n\027LINEAR_TABLE_ENTRY_LOG2\020\010*+\n\010L"
    "UTTable\022\r\n\tEXP_TABLE\020\000\022\020\n\014LINEAR_TABLE\020\001"
    "*6\n\tLUTMethod\022\026\n\022METHOD_EXPONENTIAL\020\000\022\021\n"
    "\rMETHOD_LINEAR\020\001*2\n\013LUTPriority\022\023\n\017PRI_E"
    "XPONENTIAL\020\000\022\016\n\nPRI_LINEAR\020\001*$\n\010ConvMode"
    "\022\n\n\006DIRECT\020\000\022\014\n\010WINOGRAD\020\001*2\n\014ConvPixelM"
    "AP\022\020\n\014PITCH_LINEAR\020\000\022\020\n\014BLOCK_LINEAR\020\001*4"
    "\n\rPixelOverride\022\021\n\rOVERRIDE_UINT\020\000\022\020\n\014OV"
    "ERRIDE_INT\020\001*j\n\010PoolSize\022\n\n\006SIZE_1\020\000\022\n\n\006"
    "SIZE_2\020\001\022\n\n\006SIZE_3\020\002\022\n\n\006SIZE_4\020\003\022\n\n\006SIZE"
    "_5\020\004\022\n\n\006SIZE_6\020\005\022\n\n\006SIZE_7\020\006\022\n\n\006SIZE_8\020\007"
    "*>\n\tRUBIKMode\022\021\n\rMODE_CONTRACT\020\000\022\016\n\nMODE"
    "_SPLIT\020\001\022\016\n\nMODE_MERGE\020\002*0\n\014WeightFormat"
    "\022\020\n\014UNCOMPRESSED\020\000\022\016\n\nCOMPRESSED\020\001*/\n\nMe"
    "anFormat\022\020\n\014MEAN_DISABLE\020\000\022\017\n\013MEAN_ENABL"
    "E\020\001*G\n\rSDPActivation\022\014\n\010ACT_NONE\020\000\022\014\n\010AC"
    "T_RELU\020\001\022\013\n\007ACT_LUT\020\002\022\r\n\tACT_PRELU\020\003*\261\007\n"
    "\nDataFormat\022\017\n\013FORMAT_T_R8\020\000\022\020\n\014FORMAT_T"
    "_R10\020\001\022\020\n\014FORMAT_T_R12\020\002\022\020\n\014FORMAT_T_R16"
    "\020\003\022\022\n\016FORMAT_T_R16_I\020\004\022\022\n\016FORMAT_T_R16_F"
    "\020\005\022\031\n\025FORMAT_T_A16B16G16R16\020\006\022\031\n\025FORMAT_"
    "T_X16B16G16R16\020\007\022\033\n\027FORMAT_T_A16B16G16R1"
    "6_F\020\010\022\031\n\025FORMAT_T_A16Y16U16V16\020\t\022\031\n\025FORM"
    "AT_T_V16U16Y16A16\020\n\022\033\n\027FORMAT_T_A16Y16U1"
    "6V16_F\020\013\022\025\n\021FORMAT_T_A8B8G8R8\020\014\022\025\n\021FORMA"
    "T_T_A8R8G8B8\020\r\022\025\n\021FORMAT_T_B8G8R8A8\020\016\022\025\n"
    "\021FORMAT_T_R8G8B8A8\020\017\022\025\n\021FORMAT_T_X8B8G8R"
    "8\020\020\022\025\n\021FORMAT_T_X8R8G8B8\020\021\022\025\n\021FORMAT_T_B"
    "8G8R8X8\020\022\022\025\n\021FORMAT_T_R8G8B8X8\020\023\022\030\n\024FORM"
    "AT_T_A2B10G10R10\020\024\022\030\n\024FORMAT_T_A2R10G10B"
    "10\020\025\022\030\n\024FORMAT_T_B10G10R10A2\020\026\022\030\n\024FORMAT"
    "_T_R10G10B10A2\020\027\022\030\n\024FORMAT_T_A2Y10U10V10"
    "\020\030\022\030\n\024FORMAT_T_V10U10Y10A2\020\031\022\025\n\021FORMAT_T"
    "_A8Y8U8V8\020\032\022\025\n\021FORMAT_T_V8U8Y8A8\020\033\022\033\n\027FO"
    "RMAT_T_Y8___U8V8_N444\020\034\022\033\n\027FORMAT_T_Y8__"
    "_V8U8_N444\020\035\022\036\n\032FORMAT_T_Y10___U10V10_N4"
    "44\020\036\022\036\n\032FORMAT_T_Y10___V10U10_N444\020\037\022\036\n\032"
    "FORMAT_T_Y12___U12V12_N444\020 \022\036\n\032FORMAT_T"
    "_Y12___V12U12_N444\020!\022\036\n\032FORMAT_T_Y16___U"
    "16V16_N444\020\"\022\036\n\032FORMAT_T_Y16___V16U16_N4"
    "44\020#\022\022\n\016FORMAT_FEATURE\020$*N\n\nFillerType\022\r"
    "\n\tFILL_NONE\020\000\022\r\n\tFILL_FILE\020\001\022\021\n\rFILL_CON"
    "STANT\020\002\022\017\n\013FILL_RANDOM\020\003*^\n\010FileType\022\021\n\r"
    "FILE_PROTOBIN\020\000\022\021\n\rFILE_PROTOTXT\020\001\022\017\n\013FI"
    "LE_RAWBIN\020\002\022\014\n\010FILE_PNG\020\003\022\r\n\tFILE_JPEG\020\004"
    "*\272\001\n\010DataType\022\026\n\022DLA_DATA_DC_WEIGHT\020\000\022\026\n"
    "\022DLA_DATA_WG_WEIGHT\020\001\022\027\n\023DLA_DATA_IMG_WE"
    "IGHT\020\002\022\026\n\022DLA_DATA_FC_WEIGHT\020\003\022\021\n\rDLA_DA"
    "TA_BIAS\020\004\022\022\n\016DLA_DATA_IMAGE\020\005\022\020\n\014DLA_DAT"
    "A_LUT\020\006\022\024\n\020DLA_DATA_FEATURE\020\007", 14069);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DlaPrototestInterface.proto", &protobuf_RegisterTypes);
  LUTOffset::default_instance_ = new LUTOffset();
  LUTOffset_default_oneof_instance_ = new LUTOffsetOneofInstance;
  FloatData::default_instance_ = new FloatData();
  DLASlope::default_instance_ = new DLASlope();
  DLASlope_default_oneof_instance_ = new DLASlopeOneofInstance;
  DataFile::default_instance_ = new DataFile();
  Constant::default_instance_ = new Constant();
  DataFiller::default_instance_ = new DataFiller();
  DataFiller_default_oneof_instance_ = new DataFillerOneofInstance;
  LUTParam::default_instance_ = new LUTParam();
  BDMATransferDesc::default_instance_ = new BDMATransferDesc();
  BDMASurfaceDesc::default_instance_ = new BDMASurfaceDesc();
  BDMAOpDesc::default_instance_ = new BDMAOpDesc();
  CVTParam::default_instance_ = new CVTParam();
  MemInfo::default_instance_ = new MemInfo();
  DataCube::default_instance_ = new DataCube();
  CONVSurfaceDesc::default_instance_ = new CONVSurfaceDesc();
  CONVOpDesc::default_instance_ = new CONVOpDesc();
  SDPCvt::default_instance_ = new SDPCvt();
  SDPOp::default_instance_ = new SDPOp();
  SDPSurfaceDesc::default_instance_ = new SDPSurfaceDesc();
  SDPOpDesc::default_instance_ = new SDPOpDesc();
  PDPSurfaceDesc::default_instance_ = new PDPSurfaceDesc();
  PDPOpDesc::default_instance_ = new PDPOpDesc();
  CDPSurfaceDesc::default_instance_ = new CDPSurfaceDesc();
  CDPOpDesc::default_instance_ = new CDPOpDesc();
  RUBIKSurfaceDesc::default_instance_ = new RUBIKSurfaceDesc();
  RUBIKOpDesc::default_instance_ = new RUBIKOpDesc();
  SurfaceContainer::default_instance_ = new SurfaceContainer();
  SurfaceContainer_default_oneof_instance_ = new SurfaceContainerOneofInstance;
  OperationContainer::default_instance_ = new OperationContainer();
  OperationContainer_default_oneof_instance_ = new OperationContainerOneofInstance;
  Consumer::default_instance_ = new Consumer();
  Layer::default_instance_ = new Layer();
  NetworkLayer::default_instance_ = new NetworkLayer();
  NetworkDesc::default_instance_ = new NetworkDesc();
  LUTParamList::default_instance_ = new LUTParamList();
  ROIArrayDesc::default_instance_ = new ROIArrayDesc();
  ROIDesc::default_instance_ = new ROIDesc();
  ROIDescription::default_instance_ = new ROIDescription();
  Network::default_instance_ = new Network();
  TaskStatus::default_instance_ = new TaskStatus();
  Action::default_instance_ = new Action();
  TaskSchedule::default_instance_ = new TaskSchedule();
  TasksData::default_instance_ = new TasksData();
  Event::default_instance_ = new Event();
  EventList::default_instance_ = new EventList();
  SubmitSlot::default_instance_ = new SubmitSlot();
  TestInfo::default_instance_ = new TestInfo();
  Test::default_instance_ = new Test();
  LUTOffset::default_instance_->InitAsDefaultInstance();
  FloatData::default_instance_->InitAsDefaultInstance();
  DLASlope::default_instance_->InitAsDefaultInstance();
  DataFile::default_instance_->InitAsDefaultInstance();
  Constant::default_instance_->InitAsDefaultInstance();
  DataFiller::default_instance_->InitAsDefaultInstance();
  LUTParam::default_instance_->InitAsDefaultInstance();
  BDMATransferDesc::default_instance_->InitAsDefaultInstance();
  BDMASurfaceDesc::default_instance_->InitAsDefaultInstance();
  BDMAOpDesc::default_instance_->InitAsDefaultInstance();
  CVTParam::default_instance_->InitAsDefaultInstance();
  MemInfo::default_instance_->InitAsDefaultInstance();
  DataCube::default_instance_->InitAsDefaultInstance();
  CONVSurfaceDesc::default_instance_->InitAsDefaultInstance();
  CONVOpDesc::default_instance_->InitAsDefaultInstance();
  SDPCvt::default_instance_->InitAsDefaultInstance();
  SDPOp::default_instance_->InitAsDefaultInstance();
  SDPSurfaceDesc::default_instance_->InitAsDefaultInstance();
  SDPOpDesc::default_instance_->InitAsDefaultInstance();
  PDPSurfaceDesc::default_instance_->InitAsDefaultInstance();
  PDPOpDesc::default_instance_->InitAsDefaultInstance();
  CDPSurfaceDesc::default_instance_->InitAsDefaultInstance();
  CDPOpDesc::default_instance_->InitAsDefaultInstance();
  RUBIKSurfaceDesc::default_instance_->InitAsDefaultInstance();
  RUBIKOpDesc::default_instance_->InitAsDefaultInstance();
  SurfaceContainer::default_instance_->InitAsDefaultInstance();
  OperationContainer::default_instance_->InitAsDefaultInstance();
  Consumer::default_instance_->InitAsDefaultInstance();
  Layer::default_instance_->InitAsDefaultInstance();
  NetworkLayer::default_instance_->InitAsDefaultInstance();
  NetworkDesc::default_instance_->InitAsDefaultInstance();
  LUTParamList::default_instance_->InitAsDefaultInstance();
  ROIArrayDesc::default_instance_->InitAsDefaultInstance();
  ROIDesc::default_instance_->InitAsDefaultInstance();
  ROIDescription::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  TaskSchedule::default_instance_->InitAsDefaultInstance();
  TasksData::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  EventList::default_instance_->InitAsDefaultInstance();
  SubmitSlot::default_instance_->InitAsDefaultInstance();
  TestInfo::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DlaPrototestInterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DlaPrototestInterface_2eproto {
  StaticDescriptorInitializer_DlaPrototestInterface_2eproto() {
    protobuf_AddDesc_DlaPrototestInterface_2eproto();
  }
} static_descriptor_initializer_DlaPrototestInterface_2eproto_;
const ::google::protobuf::EnumDescriptor* DataPrecision_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataPrecision_descriptor_;
}
bool DataPrecision_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemType_descriptor_;
}
bool MemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MemFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemFlag_descriptor_;
}
bool MemFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EngineID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EngineID_descriptor_;
}
bool EngineID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerType_descriptor_;
}
bool LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ALUType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ALUType_descriptor_;
}
bool ALUType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SDPOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPOpType_descriptor_;
}
bool SDPOpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LUTLOGSize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTLOGSize_descriptor_;
}
bool LUTLOGSize_IsValid(int value) {
  switch(value) {
    case 6:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LUTTable_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTTable_descriptor_;
}
bool LUTTable_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LUTMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTMethod_descriptor_;
}
bool LUTMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LUTPriority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTPriority_descriptor_;
}
bool LUTPriority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConvMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvMode_descriptor_;
}
bool ConvMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ConvPixelMAP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvPixelMAP_descriptor_;
}
bool ConvPixelMAP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PixelOverride_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelOverride_descriptor_;
}
bool PixelOverride_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PoolSize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoolSize_descriptor_;
}
bool PoolSize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RUBIKMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RUBIKMode_descriptor_;
}
bool RUBIKMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WeightFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightFormat_descriptor_;
}
bool WeightFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MeanFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeanFormat_descriptor_;
}
bool MeanFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SDPActivation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPActivation_descriptor_;
}
bool SDPActivation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFormat_descriptor_;
}
bool DataFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FillerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillerType_descriptor_;
}
bool FillerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileType_descriptor_;
}
bool FileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LUTOffset::kExpOffsetFieldNumber;
const int LUTOffset::kFracBitsFieldNumber;
#endif  // !_MSC_VER

LUTOffset::LUTOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.LUTOffset)
}

void LUTOffset::InitAsDefaultInstance() {
  LUTOffset_default_oneof_instance_->exp_offset_ = 0;
  LUTOffset_default_oneof_instance_->frac_bits_ = 0;
}

LUTOffset::LUTOffset(const LUTOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.LUTOffset)
}

void LUTOffset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_lut_offset_oneof();
}

LUTOffset::~LUTOffset() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.LUTOffset)
  SharedDtor();
}

void LUTOffset::SharedDtor() {
  if (has_lut_offset_oneof()) {
    clear_lut_offset_oneof();
  }
  if (this != default_instance_) {
  }
}

void LUTOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LUTOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTOffset_descriptor_;
}

const LUTOffset& LUTOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

LUTOffset* LUTOffset::default_instance_ = NULL;

LUTOffset* LUTOffset::New() const {
  return new LUTOffset;
}

void LUTOffset::clear_lut_offset_oneof() {
  switch(lut_offset_oneof_case()) {
    case kExpOffset: {
      // No need to clear
      break;
    }
    case kFracBits: {
      // No need to clear
      break;
    }
    case LUT_OFFSET_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LUT_OFFSET_ONEOF_NOT_SET;
}


void LUTOffset::Clear() {
  clear_lut_offset_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LUTOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.LUTOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp_offset = 1;
      case 1: {
        if (tag == 8) {
          clear_lut_offset_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lut_offset_oneof_.exp_offset_)));
          set_has_exp_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_frac_bits;
        break;
      }

      // optional int32 frac_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_frac_bits:
          clear_lut_offset_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lut_offset_oneof_.frac_bits_)));
          set_has_frac_bits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.LUTOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.LUTOffset)
  return false;
#undef DO_
}

void LUTOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.LUTOffset)
  // optional int32 exp_offset = 1;
  if (has_exp_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp_offset(), output);
  }

  // optional int32 frac_bits = 2;
  if (has_frac_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frac_bits(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.LUTOffset)
}

::google::protobuf::uint8* LUTOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.LUTOffset)
  // optional int32 exp_offset = 1;
  if (has_exp_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp_offset(), target);
  }

  // optional int32 frac_bits = 2;
  if (has_frac_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frac_bits(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.LUTOffset)
  return target;
}

int LUTOffset::ByteSize() const {
  int total_size = 0;

  switch (lut_offset_oneof_case()) {
    // optional int32 exp_offset = 1;
    case kExpOffset: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_offset());
      break;
    }
    // optional int32 frac_bits = 2;
    case kFracBits: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frac_bits());
      break;
    }
    case LUT_OFFSET_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LUTOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LUTOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LUTOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LUTOffset::MergeFrom(const LUTOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.lut_offset_oneof_case()) {
    case kExpOffset: {
      set_exp_offset(from.exp_offset());
      break;
    }
    case kFracBits: {
      set_frac_bits(from.frac_bits());
      break;
    }
    case LUT_OFFSET_ONEOF_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LUTOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LUTOffset::CopyFrom(const LUTOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LUTOffset::IsInitialized() const {

  return true;
}

void LUTOffset::Swap(LUTOffset* other) {
  if (other != this) {
    std::swap(lut_offset_oneof_, other->lut_offset_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LUTOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LUTOffset_descriptor_;
  metadata.reflection = LUTOffset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FloatData::kScaleFieldNumber;
const int FloatData::kShifterFieldNumber;
const int FloatData::kReserved0FieldNumber;
#endif  // !_MSC_VER

FloatData::FloatData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.FloatData)
}

void FloatData::InitAsDefaultInstance() {
}

FloatData::FloatData(const FloatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.FloatData)
}

void FloatData::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  shifter_ = 0;
  reserved0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloatData::~FloatData() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.FloatData)
  SharedDtor();
}

void FloatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FloatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FloatData_descriptor_;
}

const FloatData& FloatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

FloatData* FloatData::default_instance_ = NULL;

FloatData* FloatData::New() const {
  return new FloatData;
}

void FloatData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FloatData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scale_, reserved0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FloatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.FloatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scale = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shifter;
        break;
      }

      // required int32 shifter = 2;
      case 2: {
        if (tag == 16) {
         parse_shifter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shifter_)));
          set_has_shifter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.FloatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.FloatData)
  return false;
#undef DO_
}

void FloatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.FloatData)
  // required int32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // required int32 shifter = 2;
  if (has_shifter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shifter(), output);
  }

  // optional uint32 reserved0 = 3 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reserved0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.FloatData)
}

::google::protobuf::uint8* FloatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.FloatData)
  // required int32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  // required int32 shifter = 2;
  if (has_shifter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shifter(), target);
  }

  // optional uint32 reserved0 = 3 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reserved0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.FloatData)
  return target;
}

int FloatData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // required int32 shifter = 2;
    if (has_shifter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shifter());
    }

    // optional uint32 reserved0 = 3 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FloatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FloatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FloatData::MergeFrom(const FloatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_shifter()) {
      set_shifter(from.shifter());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FloatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatData::CopyFrom(const FloatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FloatData::Swap(FloatData* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(shifter_, other->shifter_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FloatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FloatData_descriptor_;
  metadata.reflection = FloatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DLASlope::kDataIFieldNumber;
const int DLASlope::kDataFFieldNumber;
#endif  // !_MSC_VER

DLASlope::DLASlope()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.DLASlope)
}

void DLASlope::InitAsDefaultInstance() {
  DLASlope_default_oneof_instance_->data_i_ = const_cast< ::nvdla_prototest_interface::FloatData*>(&::nvdla_prototest_interface::FloatData::default_instance());
  DLASlope_default_oneof_instance_->data_f_ = 0u;
}

DLASlope::DLASlope(const DLASlope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.DLASlope)
}

void DLASlope::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_dla_slope_oneof();
}

DLASlope::~DLASlope() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.DLASlope)
  SharedDtor();
}

void DLASlope::SharedDtor() {
  if (has_dla_slope_oneof()) {
    clear_dla_slope_oneof();
  }
  if (this != default_instance_) {
  }
}

void DLASlope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DLASlope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DLASlope_descriptor_;
}

const DLASlope& DLASlope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

DLASlope* DLASlope::default_instance_ = NULL;

DLASlope* DLASlope::New() const {
  return new DLASlope;
}

void DLASlope::clear_dla_slope_oneof() {
  switch(dla_slope_oneof_case()) {
    case kDataI: {
      delete dla_slope_oneof_.data_i_;
      break;
    }
    case kDataF: {
      // No need to clear
      break;
    }
    case DLA_SLOPE_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DLA_SLOPE_ONEOF_NOT_SET;
}


void DLASlope::Clear() {
  clear_dla_slope_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DLASlope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.DLASlope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nvdla_prototest_interface.FloatData data_i = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_i()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_f;
        break;
      }

      // optional uint32 data_f = 2;
      case 2: {
        if (tag == 16) {
         parse_data_f:
          clear_dla_slope_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dla_slope_oneof_.data_f_)));
          set_has_data_f();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.DLASlope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.DLASlope)
  return false;
#undef DO_
}

void DLASlope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.DLASlope)
  // optional .nvdla_prototest_interface.FloatData data_i = 1;
  if (has_data_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_i(), output);
  }

  // optional uint32 data_f = 2;
  if (has_data_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_f(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.DLASlope)
}

::google::protobuf::uint8* DLASlope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.DLASlope)
  // optional .nvdla_prototest_interface.FloatData data_i = 1;
  if (has_data_i()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_i(), target);
  }

  // optional uint32 data_f = 2;
  if (has_data_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_f(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.DLASlope)
  return target;
}

int DLASlope::ByteSize() const {
  int total_size = 0;

  switch (dla_slope_oneof_case()) {
    // optional .nvdla_prototest_interface.FloatData data_i = 1;
    case kDataI: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_i());
      break;
    }
    // optional uint32 data_f = 2;
    case kDataF: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_f());
      break;
    }
    case DLA_SLOPE_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DLASlope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DLASlope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DLASlope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DLASlope::MergeFrom(const DLASlope& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.dla_slope_oneof_case()) {
    case kDataI: {
      mutable_data_i()->::nvdla_prototest_interface::FloatData::MergeFrom(from.data_i());
      break;
    }
    case kDataF: {
      set_data_f(from.data_f());
      break;
    }
    case DLA_SLOPE_ONEOF_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DLASlope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DLASlope::CopyFrom(const DLASlope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DLASlope::IsInitialized() const {

  if (has_data_i()) {
    if (!this->data_i().IsInitialized()) return false;
  }
  return true;
}

void DLASlope::Swap(DLASlope* other) {
  if (other != this) {
    std::swap(dla_slope_oneof_, other->dla_slope_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DLASlope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DLASlope_descriptor_;
  metadata.reflection = DLASlope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataFile::kNameFieldNumber;
const int DataFile::kDataTypeFieldNumber;
const int DataFile::kOffsetFieldNumber;
const int DataFile::kSizeFieldNumber;
const int DataFile::kFileTypeFieldNumber;
#endif  // !_MSC_VER

DataFile::DataFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.DataFile)
}

void DataFile::InitAsDefaultInstance() {
}

DataFile::DataFile(const DataFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.DataFile)
}

void DataFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
  offset_ = 0u;
  size_ = 0u;
  file_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataFile::~DataFile() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.DataFile)
  SharedDtor();
}

void DataFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFile_descriptor_;
}

const DataFile& DataFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

DataFile* DataFile::default_instance_ = NULL;

DataFile* DataFile::New() const {
  return new DataFile;
}

void DataFile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataFile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(data_type_, file_type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.DataFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // required .nvdla_prototest_interface.DataType data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataType_IsValid(value)) {
            set_data_type(static_cast< ::nvdla_prototest_interface::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_file_type;
        break;
      }

      // required .nvdla_prototest_interface.FileType file_type = 5;
      case 5: {
        if (tag == 40) {
         parse_file_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::FileType_IsValid(value)) {
            set_file_type(static_cast< ::nvdla_prototest_interface::FileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.DataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.DataFile)
  return false;
#undef DO_
}

void DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.DataFile)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .nvdla_prototest_interface.DataType data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // required .nvdla_prototest_interface.FileType file_type = 5;
  if (has_file_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->file_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.DataFile)
}

::google::protobuf::uint8* DataFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.DataFile)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .nvdla_prototest_interface.DataType data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // required uint32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // required uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // required .nvdla_prototest_interface.FileType file_type = 5;
  if (has_file_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->file_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.DataFile)
  return target;
}

int DataFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .nvdla_prototest_interface.DataType data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // required uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // required uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // required .nvdla_prototest_interface.FileType file_type = 5;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFile::MergeFrom(const DataFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_file_type()) {
      set_file_type(from.file_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFile::CopyFrom(const DataFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DataFile::Swap(DataFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(data_type_, other->data_type_);
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(file_type_, other->file_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFile_descriptor_;
  metadata.reflection = DataFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Constant::kValueFieldNumber;
#endif  // !_MSC_VER

Constant::Constant()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Constant)
}

void Constant::InitAsDefaultInstance() {
}

Constant::Constant(const Constant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Constant)
}

void Constant::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Constant::~Constant() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Constant)
  SharedDtor();
}

void Constant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Constant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Constant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constant_descriptor_;
}

const Constant& Constant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Constant* Constant::default_instance_ = NULL;

Constant* Constant::New() const {
  return new Constant;
}

void Constant::Clear() {
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Constant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Constant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Constant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Constant)
  return false;
#undef DO_
}

void Constant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Constant)
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Constant)
}

::google::protobuf::uint8* Constant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Constant)
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Constant)
  return target;
}

int Constant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Constant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Constant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Constant::MergeFrom(const Constant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Constant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constant::CopyFrom(const Constant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Constant::Swap(Constant* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Constant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Constant_descriptor_;
  metadata.reflection = Constant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataFiller::kDataFileFieldNumber;
const int DataFiller::kConstFieldNumber;
#endif  // !_MSC_VER

DataFiller::DataFiller()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.DataFiller)
}

void DataFiller::InitAsDefaultInstance() {
  DataFiller_default_oneof_instance_->data_file_ = const_cast< ::nvdla_prototest_interface::DataFile*>(&::nvdla_prototest_interface::DataFile::default_instance());
  DataFiller_default_oneof_instance_->const__ = const_cast< ::nvdla_prototest_interface::Constant*>(&::nvdla_prototest_interface::Constant::default_instance());
}

DataFiller::DataFiller(const DataFiller& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.DataFiller)
}

void DataFiller::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_data_filler_oneof();
}

DataFiller::~DataFiller() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.DataFiller)
  SharedDtor();
}

void DataFiller::SharedDtor() {
  if (has_data_filler_oneof()) {
    clear_data_filler_oneof();
  }
  if (this != default_instance_) {
  }
}

void DataFiller::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataFiller::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataFiller_descriptor_;
}

const DataFiller& DataFiller::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

DataFiller* DataFiller::default_instance_ = NULL;

DataFiller* DataFiller::New() const {
  return new DataFiller;
}

void DataFiller::clear_data_filler_oneof() {
  switch(data_filler_oneof_case()) {
    case kDataFile: {
      delete data_filler_oneof_.data_file_;
      break;
    }
    case kConst: {
      delete data_filler_oneof_.const__;
      break;
    }
    case DATA_FILLER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_FILLER_ONEOF_NOT_SET;
}


void DataFiller::Clear() {
  clear_data_filler_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataFiller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.DataFiller)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nvdla_prototest_interface.DataFile data_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_const;
        break;
      }

      // optional .nvdla_prototest_interface.Constant const = 2;
      case 2: {
        if (tag == 18) {
         parse_const:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_const_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.DataFiller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.DataFiller)
  return false;
#undef DO_
}

void DataFiller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.DataFiller)
  // optional .nvdla_prototest_interface.DataFile data_file = 1;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_file(), output);
  }

  // optional .nvdla_prototest_interface.Constant const = 2;
  if (has_const_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->const_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.DataFiller)
}

::google::protobuf::uint8* DataFiller::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.DataFiller)
  // optional .nvdla_prototest_interface.DataFile data_file = 1;
  if (has_data_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_file(), target);
  }

  // optional .nvdla_prototest_interface.Constant const = 2;
  if (has_const_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->const_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.DataFiller)
  return target;
}

int DataFiller::ByteSize() const {
  int total_size = 0;

  switch (data_filler_oneof_case()) {
    // optional .nvdla_prototest_interface.DataFile data_file = 1;
    case kDataFile: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_file());
      break;
    }
    // optional .nvdla_prototest_interface.Constant const = 2;
    case kConst: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->const_());
      break;
    }
    case DATA_FILLER_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataFiller::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataFiller* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataFiller*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataFiller::MergeFrom(const DataFiller& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.data_filler_oneof_case()) {
    case kDataFile: {
      mutable_data_file()->::nvdla_prototest_interface::DataFile::MergeFrom(from.data_file());
      break;
    }
    case kConst: {
      mutable_const_()->::nvdla_prototest_interface::Constant::MergeFrom(from.const_());
      break;
    }
    case DATA_FILLER_ONEOF_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataFiller::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataFiller::CopyFrom(const DataFiller& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFiller::IsInitialized() const {

  if (has_data_file()) {
    if (!this->data_file().IsInitialized()) return false;
  }
  if (has_const_()) {
    if (!this->const_().IsInitialized()) return false;
  }
  return true;
}

void DataFiller::Swap(DataFiller* other) {
  if (other != this) {
    std::swap(data_filler_oneof_, other->data_filler_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataFiller::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataFiller_descriptor_;
  metadata.reflection = DataFiller_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LUTParam::kLinearExpTableFieldNumber;
const int LUTParam::kLinearOnlyTableFieldNumber;
const int LUTParam::kLinearExpOffsetFieldNumber;
const int LUTParam::kLinearOnlyOffsetFieldNumber;
const int LUTParam::kLinearExpStartFieldNumber;
const int LUTParam::kLinearExpEndFieldNumber;
const int LUTParam::kLinearOnlyStartFieldNumber;
const int LUTParam::kLinearOnlyEndFieldNumber;
const int LUTParam::kLinearExpUnderflowSlopeFieldNumber;
const int LUTParam::kLinearExpOverflowSlopeFieldNumber;
const int LUTParam::kLinearOnlyUnderflowSlopeFieldNumber;
const int LUTParam::kLinearOnlyOverflowSlopeFieldNumber;
const int LUTParam::kHybridPriorityFieldNumber;
const int LUTParam::kUnderflowPriorityFieldNumber;
const int LUTParam::kOverflowPriorityFieldNumber;
const int LUTParam::kMethodFieldNumber;
const int LUTParam::kFillTypeFieldNumber;
const int LUTParam::kFillerFieldNumber;
const int LUTParam::kPrecisionFieldNumber;
#endif  // !_MSC_VER

LUTParam::LUTParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.LUTParam)
}

void LUTParam::InitAsDefaultInstance() {
  linear_exp_offset_ = const_cast< ::nvdla_prototest_interface::LUTOffset*>(&::nvdla_prototest_interface::LUTOffset::default_instance());
  linear_only_offset_ = const_cast< ::nvdla_prototest_interface::LUTOffset*>(&::nvdla_prototest_interface::LUTOffset::default_instance());
  linear_exp_underflow_slope_ = const_cast< ::nvdla_prototest_interface::DLASlope*>(&::nvdla_prototest_interface::DLASlope::default_instance());
  linear_exp_overflow_slope_ = const_cast< ::nvdla_prototest_interface::DLASlope*>(&::nvdla_prototest_interface::DLASlope::default_instance());
  linear_only_underflow_slope_ = const_cast< ::nvdla_prototest_interface::DLASlope*>(&::nvdla_prototest_interface::DLASlope::default_instance());
  linear_only_overflow_slope_ = const_cast< ::nvdla_prototest_interface::DLASlope*>(&::nvdla_prototest_interface::DLASlope::default_instance());
  filler_ = const_cast< ::nvdla_prototest_interface::DataFiller*>(&::nvdla_prototest_interface::DataFiller::default_instance());
}

LUTParam::LUTParam(const LUTParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.LUTParam)
}

void LUTParam::SharedCtor() {
  _cached_size_ = 0;
  linear_exp_offset_ = NULL;
  linear_only_offset_ = NULL;
  linear_exp_start_ = GOOGLE_ULONGLONG(0);
  linear_exp_end_ = GOOGLE_ULONGLONG(0);
  linear_only_start_ = GOOGLE_ULONGLONG(0);
  linear_only_end_ = GOOGLE_ULONGLONG(0);
  linear_exp_underflow_slope_ = NULL;
  linear_exp_overflow_slope_ = NULL;
  linear_only_underflow_slope_ = NULL;
  linear_only_overflow_slope_ = NULL;
  hybrid_priority_ = 0u;
  underflow_priority_ = 0u;
  overflow_priority_ = 0u;
  method_ = 0;
  fill_type_ = 0;
  filler_ = NULL;
  precision_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LUTParam::~LUTParam() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.LUTParam)
  SharedDtor();
}

void LUTParam::SharedDtor() {
  if (this != default_instance_) {
    delete linear_exp_offset_;
    delete linear_only_offset_;
    delete linear_exp_underflow_slope_;
    delete linear_exp_overflow_slope_;
    delete linear_only_underflow_slope_;
    delete linear_only_overflow_slope_;
    delete filler_;
  }
}

void LUTParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LUTParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTParam_descriptor_;
}

const LUTParam& LUTParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

LUTParam* LUTParam::default_instance_ = NULL;

LUTParam* LUTParam::New() const {
  return new LUTParam;
}

void LUTParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LUTParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(linear_exp_start_, linear_only_end_);
    if (has_linear_exp_offset()) {
      if (linear_exp_offset_ != NULL) linear_exp_offset_->::nvdla_prototest_interface::LUTOffset::Clear();
    }
    if (has_linear_only_offset()) {
      if (linear_only_offset_ != NULL) linear_only_offset_->::nvdla_prototest_interface::LUTOffset::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(hybrid_priority_, method_);
    if (has_linear_exp_underflow_slope()) {
      if (linear_exp_underflow_slope_ != NULL) linear_exp_underflow_slope_->::nvdla_prototest_interface::DLASlope::Clear();
    }
    if (has_linear_exp_overflow_slope()) {
      if (linear_exp_overflow_slope_ != NULL) linear_exp_overflow_slope_->::nvdla_prototest_interface::DLASlope::Clear();
    }
    if (has_linear_only_underflow_slope()) {
      if (linear_only_underflow_slope_ != NULL) linear_only_underflow_slope_->::nvdla_prototest_interface::DLASlope::Clear();
    }
    if (has_linear_only_overflow_slope()) {
      if (linear_only_overflow_slope_ != NULL) linear_only_overflow_slope_->::nvdla_prototest_interface::DLASlope::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    fill_type_ = 0;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::nvdla_prototest_interface::DataFiller::Clear();
    }
    precision_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  linear_exp_table_.Clear();
  linear_only_table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LUTParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.LUTParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 linear_exp_table = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_linear_exp_table())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_linear_exp_table())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_linear_only_table;
        break;
      }

      // repeated int32 linear_only_table = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_linear_only_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_linear_only_table())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_linear_only_table())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_linear_exp_offset;
        break;
      }

      // required .nvdla_prototest_interface.LUTOffset linear_exp_offset = 3;
      case 3: {
        if (tag == 26) {
         parse_linear_exp_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_exp_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_linear_only_offset;
        break;
      }

      // required .nvdla_prototest_interface.LUTOffset linear_only_offset = 4;
      case 4: {
        if (tag == 34) {
         parse_linear_only_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_only_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_linear_exp_start;
        break;
      }

      // required uint64 linear_exp_start = 5;
      case 5: {
        if (tag == 40) {
         parse_linear_exp_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &linear_exp_start_)));
          set_has_linear_exp_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_linear_exp_end;
        break;
      }

      // required uint64 linear_exp_end = 6;
      case 6: {
        if (tag == 48) {
         parse_linear_exp_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &linear_exp_end_)));
          set_has_linear_exp_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_linear_only_start;
        break;
      }

      // required uint64 linear_only_start = 7;
      case 7: {
        if (tag == 56) {
         parse_linear_only_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &linear_only_start_)));
          set_has_linear_only_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_linear_only_end;
        break;
      }

      // required uint64 linear_only_end = 8;
      case 8: {
        if (tag == 64) {
         parse_linear_only_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &linear_only_end_)));
          set_has_linear_only_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_linear_exp_underflow_slope;
        break;
      }

      // required .nvdla_prototest_interface.DLASlope linear_exp_underflow_slope = 9;
      case 9: {
        if (tag == 74) {
         parse_linear_exp_underflow_slope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_exp_underflow_slope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_linear_exp_overflow_slope;
        break;
      }

      // required .nvdla_prototest_interface.DLASlope linear_exp_overflow_slope = 10;
      case 10: {
        if (tag == 82) {
         parse_linear_exp_overflow_slope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_exp_overflow_slope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_linear_only_underflow_slope;
        break;
      }

      // required .nvdla_prototest_interface.DLASlope linear_only_underflow_slope = 11;
      case 11: {
        if (tag == 90) {
         parse_linear_only_underflow_slope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_only_underflow_slope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_linear_only_overflow_slope;
        break;
      }

      // required .nvdla_prototest_interface.DLASlope linear_only_overflow_slope = 12;
      case 12: {
        if (tag == 98) {
         parse_linear_only_overflow_slope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_only_overflow_slope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hybrid_priority;
        break;
      }

      // required uint32 hybrid_priority = 13;
      case 13: {
        if (tag == 104) {
         parse_hybrid_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hybrid_priority_)));
          set_has_hybrid_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_underflow_priority;
        break;
      }

      // required uint32 underflow_priority = 14;
      case 14: {
        if (tag == 112) {
         parse_underflow_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &underflow_priority_)));
          set_has_underflow_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_overflow_priority;
        break;
      }

      // required uint32 overflow_priority = 15;
      case 15: {
        if (tag == 120) {
         parse_overflow_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overflow_priority_)));
          set_has_overflow_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_method;
        break;
      }

      // required .nvdla_prototest_interface.LUTMethod method = 16;
      case 16: {
        if (tag == 128) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::LUTMethod_IsValid(value)) {
            set_method(static_cast< ::nvdla_prototest_interface::LUTMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fill_type;
        break;
      }

      // optional .nvdla_prototest_interface.FillerType fill_type = 17 [default = FILL_NONE];
      case 17: {
        if (tag == 136) {
         parse_fill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::FillerType_IsValid(value)) {
            set_fill_type(static_cast< ::nvdla_prototest_interface::FillerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_filler;
        break;
      }

      // optional .nvdla_prototest_interface.DataFiller filler = 18;
      case 18: {
        if (tag == 146) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_precision;
        break;
      }

      // optional .nvdla_prototest_interface.DataPrecision precision = 19 [default = PRECISION_INT16];
      case 19: {
        if (tag == 152) {
         parse_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.LUTParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.LUTParam)
  return false;
#undef DO_
}

void LUTParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.LUTParam)
  // repeated int32 linear_exp_table = 1 [packed = true];
  if (this->linear_exp_table_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_exp_table_cached_byte_size_);
  }
  for (int i = 0; i < this->linear_exp_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->linear_exp_table(i), output);
  }

  // repeated int32 linear_only_table = 2 [packed = true];
  if (this->linear_only_table_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_only_table_cached_byte_size_);
  }
  for (int i = 0; i < this->linear_only_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->linear_only_table(i), output);
  }

  // required .nvdla_prototest_interface.LUTOffset linear_exp_offset = 3;
  if (has_linear_exp_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->linear_exp_offset(), output);
  }

  // required .nvdla_prototest_interface.LUTOffset linear_only_offset = 4;
  if (has_linear_only_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->linear_only_offset(), output);
  }

  // required uint64 linear_exp_start = 5;
  if (has_linear_exp_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->linear_exp_start(), output);
  }

  // required uint64 linear_exp_end = 6;
  if (has_linear_exp_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->linear_exp_end(), output);
  }

  // required uint64 linear_only_start = 7;
  if (has_linear_only_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->linear_only_start(), output);
  }

  // required uint64 linear_only_end = 8;
  if (has_linear_only_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->linear_only_end(), output);
  }

  // required .nvdla_prototest_interface.DLASlope linear_exp_underflow_slope = 9;
  if (has_linear_exp_underflow_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->linear_exp_underflow_slope(), output);
  }

  // required .nvdla_prototest_interface.DLASlope linear_exp_overflow_slope = 10;
  if (has_linear_exp_overflow_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->linear_exp_overflow_slope(), output);
  }

  // required .nvdla_prototest_interface.DLASlope linear_only_underflow_slope = 11;
  if (has_linear_only_underflow_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->linear_only_underflow_slope(), output);
  }

  // required .nvdla_prototest_interface.DLASlope linear_only_overflow_slope = 12;
  if (has_linear_only_overflow_slope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->linear_only_overflow_slope(), output);
  }

  // required uint32 hybrid_priority = 13;
  if (has_hybrid_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hybrid_priority(), output);
  }

  // required uint32 underflow_priority = 14;
  if (has_underflow_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->underflow_priority(), output);
  }

  // required uint32 overflow_priority = 15;
  if (has_overflow_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->overflow_priority(), output);
  }

  // required .nvdla_prototest_interface.LUTMethod method = 16;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->method(), output);
  }

  // optional .nvdla_prototest_interface.FillerType fill_type = 17 [default = FILL_NONE];
  if (has_fill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->fill_type(), output);
  }

  // optional .nvdla_prototest_interface.DataFiller filler = 18;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->filler(), output);
  }

  // optional .nvdla_prototest_interface.DataPrecision precision = 19 [default = PRECISION_INT16];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.LUTParam)
}

::google::protobuf::uint8* LUTParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.LUTParam)
  // repeated int32 linear_exp_table = 1 [packed = true];
  if (this->linear_exp_table_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_exp_table_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linear_exp_table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->linear_exp_table(i), target);
  }

  // repeated int32 linear_only_table = 2 [packed = true];
  if (this->linear_only_table_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_only_table_cached_byte_size_, target);
  }
  for (int i = 0; i < this->linear_only_table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->linear_only_table(i), target);
  }

  // required .nvdla_prototest_interface.LUTOffset linear_exp_offset = 3;
  if (has_linear_exp_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->linear_exp_offset(), target);
  }

  // required .nvdla_prototest_interface.LUTOffset linear_only_offset = 4;
  if (has_linear_only_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->linear_only_offset(), target);
  }

  // required uint64 linear_exp_start = 5;
  if (has_linear_exp_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->linear_exp_start(), target);
  }

  // required uint64 linear_exp_end = 6;
  if (has_linear_exp_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->linear_exp_end(), target);
  }

  // required uint64 linear_only_start = 7;
  if (has_linear_only_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->linear_only_start(), target);
  }

  // required uint64 linear_only_end = 8;
  if (has_linear_only_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->linear_only_end(), target);
  }

  // required .nvdla_prototest_interface.DLASlope linear_exp_underflow_slope = 9;
  if (has_linear_exp_underflow_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->linear_exp_underflow_slope(), target);
  }

  // required .nvdla_prototest_interface.DLASlope linear_exp_overflow_slope = 10;
  if (has_linear_exp_overflow_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->linear_exp_overflow_slope(), target);
  }

  // required .nvdla_prototest_interface.DLASlope linear_only_underflow_slope = 11;
  if (has_linear_only_underflow_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->linear_only_underflow_slope(), target);
  }

  // required .nvdla_prototest_interface.DLASlope linear_only_overflow_slope = 12;
  if (has_linear_only_overflow_slope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->linear_only_overflow_slope(), target);
  }

  // required uint32 hybrid_priority = 13;
  if (has_hybrid_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->hybrid_priority(), target);
  }

  // required uint32 underflow_priority = 14;
  if (has_underflow_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->underflow_priority(), target);
  }

  // required uint32 overflow_priority = 15;
  if (has_overflow_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->overflow_priority(), target);
  }

  // required .nvdla_prototest_interface.LUTMethod method = 16;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->method(), target);
  }

  // optional .nvdla_prototest_interface.FillerType fill_type = 17 [default = FILL_NONE];
  if (has_fill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->fill_type(), target);
  }

  // optional .nvdla_prototest_interface.DataFiller filler = 18;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->filler(), target);
  }

  // optional .nvdla_prototest_interface.DataPrecision precision = 19 [default = PRECISION_INT16];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.LUTParam)
  return target;
}

int LUTParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .nvdla_prototest_interface.LUTOffset linear_exp_offset = 3;
    if (has_linear_exp_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_exp_offset());
    }

    // required .nvdla_prototest_interface.LUTOffset linear_only_offset = 4;
    if (has_linear_only_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_only_offset());
    }

    // required uint64 linear_exp_start = 5;
    if (has_linear_exp_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->linear_exp_start());
    }

    // required uint64 linear_exp_end = 6;
    if (has_linear_exp_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->linear_exp_end());
    }

    // required uint64 linear_only_start = 7;
    if (has_linear_only_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->linear_only_start());
    }

    // required uint64 linear_only_end = 8;
    if (has_linear_only_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->linear_only_end());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .nvdla_prototest_interface.DLASlope linear_exp_underflow_slope = 9;
    if (has_linear_exp_underflow_slope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_exp_underflow_slope());
    }

    // required .nvdla_prototest_interface.DLASlope linear_exp_overflow_slope = 10;
    if (has_linear_exp_overflow_slope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_exp_overflow_slope());
    }

    // required .nvdla_prototest_interface.DLASlope linear_only_underflow_slope = 11;
    if (has_linear_only_underflow_slope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_only_underflow_slope());
    }

    // required .nvdla_prototest_interface.DLASlope linear_only_overflow_slope = 12;
    if (has_linear_only_overflow_slope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_only_overflow_slope());
    }

    // required uint32 hybrid_priority = 13;
    if (has_hybrid_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hybrid_priority());
    }

    // required uint32 underflow_priority = 14;
    if (has_underflow_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->underflow_priority());
    }

    // required uint32 overflow_priority = 15;
    if (has_overflow_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overflow_priority());
    }

    // required .nvdla_prototest_interface.LUTMethod method = 16;
    if (has_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .nvdla_prototest_interface.FillerType fill_type = 17 [default = FILL_NONE];
    if (has_fill_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fill_type());
    }

    // optional .nvdla_prototest_interface.DataFiller filler = 18;
    if (has_filler()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filler());
    }

    // optional .nvdla_prototest_interface.DataPrecision precision = 19 [default = PRECISION_INT16];
    if (has_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision());
    }

  }
  // repeated int32 linear_exp_table = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->linear_exp_table_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->linear_exp_table(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_exp_table_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 linear_only_table = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->linear_only_table_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->linear_only_table(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_only_table_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LUTParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LUTParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LUTParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LUTParam::MergeFrom(const LUTParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  linear_exp_table_.MergeFrom(from.linear_exp_table_);
  linear_only_table_.MergeFrom(from.linear_only_table_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_linear_exp_offset()) {
      mutable_linear_exp_offset()->::nvdla_prototest_interface::LUTOffset::MergeFrom(from.linear_exp_offset());
    }
    if (from.has_linear_only_offset()) {
      mutable_linear_only_offset()->::nvdla_prototest_interface::LUTOffset::MergeFrom(from.linear_only_offset());
    }
    if (from.has_linear_exp_start()) {
      set_linear_exp_start(from.linear_exp_start());
    }
    if (from.has_linear_exp_end()) {
      set_linear_exp_end(from.linear_exp_end());
    }
    if (from.has_linear_only_start()) {
      set_linear_only_start(from.linear_only_start());
    }
    if (from.has_linear_only_end()) {
      set_linear_only_end(from.linear_only_end());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linear_exp_underflow_slope()) {
      mutable_linear_exp_underflow_slope()->::nvdla_prototest_interface::DLASlope::MergeFrom(from.linear_exp_underflow_slope());
    }
    if (from.has_linear_exp_overflow_slope()) {
      mutable_linear_exp_overflow_slope()->::nvdla_prototest_interface::DLASlope::MergeFrom(from.linear_exp_overflow_slope());
    }
    if (from.has_linear_only_underflow_slope()) {
      mutable_linear_only_underflow_slope()->::nvdla_prototest_interface::DLASlope::MergeFrom(from.linear_only_underflow_slope());
    }
    if (from.has_linear_only_overflow_slope()) {
      mutable_linear_only_overflow_slope()->::nvdla_prototest_interface::DLASlope::MergeFrom(from.linear_only_overflow_slope());
    }
    if (from.has_hybrid_priority()) {
      set_hybrid_priority(from.hybrid_priority());
    }
    if (from.has_underflow_priority()) {
      set_underflow_priority(from.underflow_priority());
    }
    if (from.has_overflow_priority()) {
      set_overflow_priority(from.overflow_priority());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fill_type()) {
      set_fill_type(from.fill_type());
    }
    if (from.has_filler()) {
      mutable_filler()->::nvdla_prototest_interface::DataFiller::MergeFrom(from.filler());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LUTParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LUTParam::CopyFrom(const LUTParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LUTParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffc) != 0x0000fffc) return false;

  if (has_linear_exp_underflow_slope()) {
    if (!this->linear_exp_underflow_slope().IsInitialized()) return false;
  }
  if (has_linear_exp_overflow_slope()) {
    if (!this->linear_exp_overflow_slope().IsInitialized()) return false;
  }
  if (has_linear_only_underflow_slope()) {
    if (!this->linear_only_underflow_slope().IsInitialized()) return false;
  }
  if (has_linear_only_overflow_slope()) {
    if (!this->linear_only_overflow_slope().IsInitialized()) return false;
  }
  if (has_filler()) {
    if (!this->filler().IsInitialized()) return false;
  }
  return true;
}

void LUTParam::Swap(LUTParam* other) {
  if (other != this) {
    linear_exp_table_.Swap(&other->linear_exp_table_);
    linear_only_table_.Swap(&other->linear_only_table_);
    std::swap(linear_exp_offset_, other->linear_exp_offset_);
    std::swap(linear_only_offset_, other->linear_only_offset_);
    std::swap(linear_exp_start_, other->linear_exp_start_);
    std::swap(linear_exp_end_, other->linear_exp_end_);
    std::swap(linear_only_start_, other->linear_only_start_);
    std::swap(linear_only_end_, other->linear_only_end_);
    std::swap(linear_exp_underflow_slope_, other->linear_exp_underflow_slope_);
    std::swap(linear_exp_overflow_slope_, other->linear_exp_overflow_slope_);
    std::swap(linear_only_underflow_slope_, other->linear_only_underflow_slope_);
    std::swap(linear_only_overflow_slope_, other->linear_only_overflow_slope_);
    std::swap(hybrid_priority_, other->hybrid_priority_);
    std::swap(underflow_priority_, other->underflow_priority_);
    std::swap(overflow_priority_, other->overflow_priority_);
    std::swap(method_, other->method_);
    std::swap(fill_type_, other->fill_type_);
    std::swap(filler_, other->filler_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LUTParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LUTParam_descriptor_;
  metadata.reflection = LUTParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BDMATransferDesc::kSourceAddressFieldNumber;
const int BDMATransferDesc::kDestinationAddressFieldNumber;
const int BDMATransferDesc::kLineSizeFieldNumber;
const int BDMATransferDesc::kLineRepeatFieldNumber;
const int BDMATransferDesc::kSourceLineFieldNumber;
const int BDMATransferDesc::kDestinationLineFieldNumber;
const int BDMATransferDesc::kSurfaceRepeatFieldNumber;
const int BDMATransferDesc::kSourceSurfaceFieldNumber;
const int BDMATransferDesc::kDestinationSurfaceFieldNumber;
const int BDMATransferDesc::kSrcMemInfoFieldNumber;
const int BDMATransferDesc::kDstMemInfoFieldNumber;
#endif  // !_MSC_VER

BDMATransferDesc::BDMATransferDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.BDMATransferDesc)
}

void BDMATransferDesc::InitAsDefaultInstance() {
  src_mem_info_ = const_cast< ::nvdla_prototest_interface::MemInfo*>(&::nvdla_prototest_interface::MemInfo::default_instance());
  dst_mem_info_ = const_cast< ::nvdla_prototest_interface::MemInfo*>(&::nvdla_prototest_interface::MemInfo::default_instance());
}

BDMATransferDesc::BDMATransferDesc(const BDMATransferDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.BDMATransferDesc)
}

void BDMATransferDesc::SharedCtor() {
  _cached_size_ = 0;
  source_address_ = 0;
  destination_address_ = 0;
  line_size_ = 0u;
  line_repeat_ = 0u;
  source_line_ = 0u;
  destination_line_ = 0u;
  surface_repeat_ = 0u;
  source_surface_ = 0u;
  destination_surface_ = 0u;
  src_mem_info_ = NULL;
  dst_mem_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BDMATransferDesc::~BDMATransferDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.BDMATransferDesc)
  SharedDtor();
}

void BDMATransferDesc::SharedDtor() {
  if (this != default_instance_) {
    delete src_mem_info_;
    delete dst_mem_info_;
  }
}

void BDMATransferDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BDMATransferDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BDMATransferDesc_descriptor_;
}

const BDMATransferDesc& BDMATransferDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

BDMATransferDesc* BDMATransferDesc::default_instance_ = NULL;

BDMATransferDesc* BDMATransferDesc::New() const {
  return new BDMATransferDesc;
}

void BDMATransferDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BDMATransferDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(source_address_, source_surface_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    destination_surface_ = 0u;
    if (has_src_mem_info()) {
      if (src_mem_info_ != NULL) src_mem_info_->::nvdla_prototest_interface::MemInfo::Clear();
    }
    if (has_dst_mem_info()) {
      if (dst_mem_info_ != NULL) dst_mem_info_->::nvdla_prototest_interface::MemInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BDMATransferDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.BDMATransferDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source_address = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_address_)));
          set_has_source_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_destination_address;
        break;
      }

      // required int32 destination_address = 2;
      case 2: {
        if (tag == 16) {
         parse_destination_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_address_)));
          set_has_destination_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_size;
        break;
      }

      // required uint32 line_size = 3;
      case 3: {
        if (tag == 24) {
         parse_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_size_)));
          set_has_line_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line_repeat;
        break;
      }

      // required uint32 line_repeat = 4;
      case 4: {
        if (tag == 32) {
         parse_line_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_repeat_)));
          set_has_line_repeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_source_line;
        break;
      }

      // required uint32 source_line = 5;
      case 5: {
        if (tag == 40) {
         parse_source_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_line_)));
          set_has_source_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_destination_line;
        break;
      }

      // required uint32 destination_line = 6;
      case 6: {
        if (tag == 48) {
         parse_destination_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_line_)));
          set_has_destination_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_surface_repeat;
        break;
      }

      // required uint32 surface_repeat = 7;
      case 7: {
        if (tag == 56) {
         parse_surface_repeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surface_repeat_)));
          set_has_surface_repeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_source_surface;
        break;
      }

      // required uint32 source_surface = 8;
      case 8: {
        if (tag == 64) {
         parse_source_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_surface_)));
          set_has_source_surface();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_destination_surface;
        break;
      }

      // required uint32 destination_surface = 9;
      case 9: {
        if (tag == 72) {
         parse_destination_surface:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_surface_)));
          set_has_destination_surface();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_src_mem_info;
        break;
      }

      // required .nvdla_prototest_interface.MemInfo src_mem_info = 10;
      case 10: {
        if (tag == 82) {
         parse_src_mem_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_mem_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_dst_mem_info;
        break;
      }

      // required .nvdla_prototest_interface.MemInfo dst_mem_info = 11;
      case 11: {
        if (tag == 90) {
         parse_dst_mem_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_mem_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.BDMATransferDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.BDMATransferDesc)
  return false;
#undef DO_
}

void BDMATransferDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.BDMATransferDesc)
  // required int32 source_address = 1;
  if (has_source_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source_address(), output);
  }

  // required int32 destination_address = 2;
  if (has_destination_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destination_address(), output);
  }

  // required uint32 line_size = 3;
  if (has_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->line_size(), output);
  }

  // required uint32 line_repeat = 4;
  if (has_line_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line_repeat(), output);
  }

  // required uint32 source_line = 5;
  if (has_source_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->source_line(), output);
  }

  // required uint32 destination_line = 6;
  if (has_destination_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->destination_line(), output);
  }

  // required uint32 surface_repeat = 7;
  if (has_surface_repeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->surface_repeat(), output);
  }

  // required uint32 source_surface = 8;
  if (has_source_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->source_surface(), output);
  }

  // required uint32 destination_surface = 9;
  if (has_destination_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->destination_surface(), output);
  }

  // required .nvdla_prototest_interface.MemInfo src_mem_info = 10;
  if (has_src_mem_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->src_mem_info(), output);
  }

  // required .nvdla_prototest_interface.MemInfo dst_mem_info = 11;
  if (has_dst_mem_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->dst_mem_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.BDMATransferDesc)
}

::google::protobuf::uint8* BDMATransferDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.BDMATransferDesc)
  // required int32 source_address = 1;
  if (has_source_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source_address(), target);
  }

  // required int32 destination_address = 2;
  if (has_destination_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destination_address(), target);
  }

  // required uint32 line_size = 3;
  if (has_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->line_size(), target);
  }

  // required uint32 line_repeat = 4;
  if (has_line_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line_repeat(), target);
  }

  // required uint32 source_line = 5;
  if (has_source_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->source_line(), target);
  }

  // required uint32 destination_line = 6;
  if (has_destination_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->destination_line(), target);
  }

  // required uint32 surface_repeat = 7;
  if (has_surface_repeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->surface_repeat(), target);
  }

  // required uint32 source_surface = 8;
  if (has_source_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->source_surface(), target);
  }

  // required uint32 destination_surface = 9;
  if (has_destination_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->destination_surface(), target);
  }

  // required .nvdla_prototest_interface.MemInfo src_mem_info = 10;
  if (has_src_mem_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->src_mem_info(), target);
  }

  // required .nvdla_prototest_interface.MemInfo dst_mem_info = 11;
  if (has_dst_mem_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->dst_mem_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.BDMATransferDesc)
  return target;
}

int BDMATransferDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 source_address = 1;
    if (has_source_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_address());
    }

    // required int32 destination_address = 2;
    if (has_destination_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destination_address());
    }

    // required uint32 line_size = 3;
    if (has_line_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_size());
    }

    // required uint32 line_repeat = 4;
    if (has_line_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_repeat());
    }

    // required uint32 source_line = 5;
    if (has_source_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_line());
    }

    // required uint32 destination_line = 6;
    if (has_destination_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_line());
    }

    // required uint32 surface_repeat = 7;
    if (has_surface_repeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surface_repeat());
    }

    // required uint32 source_surface = 8;
    if (has_source_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_surface());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 destination_surface = 9;
    if (has_destination_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_surface());
    }

    // required .nvdla_prototest_interface.MemInfo src_mem_info = 10;
    if (has_src_mem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_mem_info());
    }

    // required .nvdla_prototest_interface.MemInfo dst_mem_info = 11;
    if (has_dst_mem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_mem_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BDMATransferDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BDMATransferDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BDMATransferDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BDMATransferDesc::MergeFrom(const BDMATransferDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_address()) {
      set_source_address(from.source_address());
    }
    if (from.has_destination_address()) {
      set_destination_address(from.destination_address());
    }
    if (from.has_line_size()) {
      set_line_size(from.line_size());
    }
    if (from.has_line_repeat()) {
      set_line_repeat(from.line_repeat());
    }
    if (from.has_source_line()) {
      set_source_line(from.source_line());
    }
    if (from.has_destination_line()) {
      set_destination_line(from.destination_line());
    }
    if (from.has_surface_repeat()) {
      set_surface_repeat(from.surface_repeat());
    }
    if (from.has_source_surface()) {
      set_source_surface(from.source_surface());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_destination_surface()) {
      set_destination_surface(from.destination_surface());
    }
    if (from.has_src_mem_info()) {
      mutable_src_mem_info()->::nvdla_prototest_interface::MemInfo::MergeFrom(from.src_mem_info());
    }
    if (from.has_dst_mem_info()) {
      mutable_dst_mem_info()->::nvdla_prototest_interface::MemInfo::MergeFrom(from.dst_mem_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BDMATransferDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BDMATransferDesc::CopyFrom(const BDMATransferDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDMATransferDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_src_mem_info()) {
    if (!this->src_mem_info().IsInitialized()) return false;
  }
  if (has_dst_mem_info()) {
    if (!this->dst_mem_info().IsInitialized()) return false;
  }
  return true;
}

void BDMATransferDesc::Swap(BDMATransferDesc* other) {
  if (other != this) {
    std::swap(source_address_, other->source_address_);
    std::swap(destination_address_, other->destination_address_);
    std::swap(line_size_, other->line_size_);
    std::swap(line_repeat_, other->line_repeat_);
    std::swap(source_line_, other->source_line_);
    std::swap(destination_line_, other->destination_line_);
    std::swap(surface_repeat_, other->surface_repeat_);
    std::swap(source_surface_, other->source_surface_);
    std::swap(destination_surface_, other->destination_surface_);
    std::swap(src_mem_info_, other->src_mem_info_);
    std::swap(dst_mem_info_, other->dst_mem_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BDMATransferDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BDMATransferDesc_descriptor_;
  metadata.reflection = BDMATransferDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BDMASurfaceDesc::kSourceTypeFieldNumber;
const int BDMASurfaceDesc::kDestinationTypeFieldNumber;
const int BDMASurfaceDesc::kNumTransfersFieldNumber;
const int BDMASurfaceDesc::kTransfersFieldNumber;
#endif  // !_MSC_VER

BDMASurfaceDesc::BDMASurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.BDMASurfaceDesc)
}

void BDMASurfaceDesc::InitAsDefaultInstance() {
}

BDMASurfaceDesc::BDMASurfaceDesc(const BDMASurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.BDMASurfaceDesc)
}

void BDMASurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  source_type_ = 0;
  destination_type_ = 0;
  num_transfers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BDMASurfaceDesc::~BDMASurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.BDMASurfaceDesc)
  SharedDtor();
}

void BDMASurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BDMASurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BDMASurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BDMASurfaceDesc_descriptor_;
}

const BDMASurfaceDesc& BDMASurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

BDMASurfaceDesc* BDMASurfaceDesc::default_instance_ = NULL;

BDMASurfaceDesc* BDMASurfaceDesc::New() const {
  return new BDMASurfaceDesc;
}

void BDMASurfaceDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BDMASurfaceDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(source_type_, destination_type_);
    num_transfers_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  transfers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BDMASurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.BDMASurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.MemType source_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::MemType_IsValid(value)) {
            set_source_type(static_cast< ::nvdla_prototest_interface::MemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_destination_type;
        break;
      }

      // required .nvdla_prototest_interface.MemType destination_type = 2;
      case 2: {
        if (tag == 16) {
         parse_destination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::MemType_IsValid(value)) {
            set_destination_type(static_cast< ::nvdla_prototest_interface::MemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_transfers;
        break;
      }

      // required uint32 num_transfers = 3;
      case 3: {
        if (tag == 24) {
         parse_num_transfers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_transfers_)));
          set_has_num_transfers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transfers;
        break;
      }

      // repeated .nvdla_prototest_interface.BDMATransferDesc transfers = 4;
      case 4: {
        if (tag == 34) {
         parse_transfers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transfers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transfers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.BDMASurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.BDMASurfaceDesc)
  return false;
#undef DO_
}

void BDMASurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.BDMASurfaceDesc)
  // required .nvdla_prototest_interface.MemType source_type = 1;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source_type(), output);
  }

  // required .nvdla_prototest_interface.MemType destination_type = 2;
  if (has_destination_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->destination_type(), output);
  }

  // required uint32 num_transfers = 3;
  if (has_num_transfers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_transfers(), output);
  }

  // repeated .nvdla_prototest_interface.BDMATransferDesc transfers = 4;
  for (int i = 0; i < this->transfers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transfers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.BDMASurfaceDesc)
}

::google::protobuf::uint8* BDMASurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.BDMASurfaceDesc)
  // required .nvdla_prototest_interface.MemType source_type = 1;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source_type(), target);
  }

  // required .nvdla_prototest_interface.MemType destination_type = 2;
  if (has_destination_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->destination_type(), target);
  }

  // required uint32 num_transfers = 3;
  if (has_num_transfers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_transfers(), target);
  }

  // repeated .nvdla_prototest_interface.BDMATransferDesc transfers = 4;
  for (int i = 0; i < this->transfers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transfers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.BDMASurfaceDesc)
  return target;
}

int BDMASurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.MemType source_type = 1;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
    }

    // required .nvdla_prototest_interface.MemType destination_type = 2;
    if (has_destination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->destination_type());
    }

    // required uint32 num_transfers = 3;
    if (has_num_transfers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_transfers());
    }

  }
  // repeated .nvdla_prototest_interface.BDMATransferDesc transfers = 4;
  total_size += 1 * this->transfers_size();
  for (int i = 0; i < this->transfers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transfers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BDMASurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BDMASurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BDMASurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BDMASurfaceDesc::MergeFrom(const BDMASurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  transfers_.MergeFrom(from.transfers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_destination_type()) {
      set_destination_type(from.destination_type());
    }
    if (from.has_num_transfers()) {
      set_num_transfers(from.num_transfers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BDMASurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BDMASurfaceDesc::CopyFrom(const BDMASurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDMASurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->transfers())) return false;
  return true;
}

void BDMASurfaceDesc::Swap(BDMASurfaceDesc* other) {
  if (other != this) {
    std::swap(source_type_, other->source_type_);
    std::swap(destination_type_, other->destination_type_);
    std::swap(num_transfers_, other->num_transfers_);
    transfers_.Swap(&other->transfers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BDMASurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BDMASurfaceDesc_descriptor_;
  metadata.reflection = BDMASurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BDMAOpDesc::kNumTransfersFieldNumber;
const int BDMAOpDesc::kReserved0FieldNumber;
#endif  // !_MSC_VER

BDMAOpDesc::BDMAOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.BDMAOpDesc)
}

void BDMAOpDesc::InitAsDefaultInstance() {
}

BDMAOpDesc::BDMAOpDesc(const BDMAOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.BDMAOpDesc)
}

void BDMAOpDesc::SharedCtor() {
  _cached_size_ = 0;
  num_transfers_ = 0u;
  reserved0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BDMAOpDesc::~BDMAOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.BDMAOpDesc)
  SharedDtor();
}

void BDMAOpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BDMAOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BDMAOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BDMAOpDesc_descriptor_;
}

const BDMAOpDesc& BDMAOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

BDMAOpDesc* BDMAOpDesc::default_instance_ = NULL;

BDMAOpDesc* BDMAOpDesc::New() const {
  return new BDMAOpDesc;
}

void BDMAOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BDMAOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_transfers_, reserved0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BDMAOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.BDMAOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_transfers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_transfers_)));
          set_has_num_transfers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.BDMAOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.BDMAOpDesc)
  return false;
#undef DO_
}

void BDMAOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.BDMAOpDesc)
  // required uint32 num_transfers = 1;
  if (has_num_transfers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_transfers(), output);
  }

  // optional uint32 reserved0 = 2 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reserved0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.BDMAOpDesc)
}

::google::protobuf::uint8* BDMAOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.BDMAOpDesc)
  // required uint32 num_transfers = 1;
  if (has_num_transfers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_transfers(), target);
  }

  // optional uint32 reserved0 = 2 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reserved0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.BDMAOpDesc)
  return target;
}

int BDMAOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_transfers = 1;
    if (has_num_transfers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_transfers());
    }

    // optional uint32 reserved0 = 2 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BDMAOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BDMAOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BDMAOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BDMAOpDesc::MergeFrom(const BDMAOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_transfers()) {
      set_num_transfers(from.num_transfers());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BDMAOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BDMAOpDesc::CopyFrom(const BDMAOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDMAOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BDMAOpDesc::Swap(BDMAOpDesc* other) {
  if (other != this) {
    std::swap(num_transfers_, other->num_transfers_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BDMAOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BDMAOpDesc_descriptor_;
  metadata.reflection = BDMAOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CVTParam::kScaleFieldNumber;
const int CVTParam::kTruncateFieldNumber;
const int CVTParam::kEnableFieldNumber;
const int CVTParam::kOffsetFieldNumber;
#endif  // !_MSC_VER

CVTParam::CVTParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.CVTParam)
}

void CVTParam::InitAsDefaultInstance() {
}

CVTParam::CVTParam(const CVTParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.CVTParam)
}

void CVTParam::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  truncate_ = 0u;
  enable_ = 0u;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVTParam::~CVTParam() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.CVTParam)
  SharedDtor();
}

void CVTParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CVTParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVTParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVTParam_descriptor_;
}

const CVTParam& CVTParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

CVTParam* CVTParam::default_instance_ = NULL;

CVTParam* CVTParam::New() const {
  return new CVTParam;
}

void CVTParam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CVTParam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scale_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVTParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.CVTParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scale = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_truncate;
        break;
      }

      // required uint32 truncate = 2;
      case 2: {
        if (tag == 16) {
         parse_truncate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &truncate_)));
          set_has_truncate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable;
        break;
      }

      // required uint32 enable = 3;
      case 3: {
        if (tag == 24) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (tag == 32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.CVTParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.CVTParam)
  return false;
#undef DO_
}

void CVTParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.CVTParam)
  // required int32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // required uint32 truncate = 2;
  if (has_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->truncate(), output);
  }

  // required uint32 enable = 3;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enable(), output);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.CVTParam)
}

::google::protobuf::uint8* CVTParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.CVTParam)
  // required int32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  // required uint32 truncate = 2;
  if (has_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->truncate(), target);
  }

  // required uint32 enable = 3;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enable(), target);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.CVTParam)
  return target;
}

int CVTParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // required uint32 truncate = 2;
    if (has_truncate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->truncate());
    }

    // required uint32 enable = 3;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }

    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVTParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVTParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVTParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVTParam::MergeFrom(const CVTParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_truncate()) {
      set_truncate(from.truncate());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVTParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVTParam::CopyFrom(const CVTParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVTParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CVTParam::Swap(CVTParam* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(truncate_, other->truncate_);
    std::swap(enable_, other->enable_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVTParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVTParam_descriptor_;
  metadata.reflection = CVTParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemInfo::kMemIdFieldNumber;
const int MemInfo::kMemSizeFieldNumber;
const int MemInfo::kOffsetFieldNumber;
const int MemInfo::kFillTypeFieldNumber;
const int MemInfo::kFillerFieldNumber;
const int MemInfo::kFlagFieldNumber;
const int MemInfo::kPrecisionFieldNumber;
const int MemInfo::kSwDilationXFieldNumber;
const int MemInfo::kSwDilationYFieldNumber;
#endif  // !_MSC_VER

MemInfo::MemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.MemInfo)
}

void MemInfo::InitAsDefaultInstance() {
  filler_ = const_cast< ::nvdla_prototest_interface::DataFiller*>(&::nvdla_prototest_interface::DataFiller::default_instance());
}

MemInfo::MemInfo(const MemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.MemInfo)
}

void MemInfo::SharedCtor() {
  _cached_size_ = 0;
  mem_id_ = -1;
  mem_size_ = 0u;
  offset_ = 0u;
  fill_type_ = 0;
  filler_ = NULL;
  flag_ = 0;
  precision_ = 0;
  sw_dilation_x_ = 1u;
  sw_dilation_y_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.MemInfo)
  SharedDtor();
}

void MemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete filler_;
  }
}

void MemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemInfo_descriptor_;
}

const MemInfo& MemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

MemInfo* MemInfo::default_instance_ = NULL;

MemInfo* MemInfo::New() const {
  return new MemInfo;
}

void MemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mem_size_, fill_type_);
    ZR_(flag_, precision_);
    mem_id_ = -1;
    if (has_filler()) {
      if (filler_ != NULL) filler_->::nvdla_prototest_interface::DataFiller::Clear();
    }
    sw_dilation_x_ = 1u;
  }
  sw_dilation_y_ = 1u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.MemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mem_id = 1 [default = -1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_id_)));
          set_has_mem_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mem_size;
        break;
      }

      // required uint32 mem_size = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_size_)));
          set_has_mem_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // required uint32 offset = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fill_type;
        break;
      }

      // optional .nvdla_prototest_interface.FillerType fill_type = 4 [default = FILL_NONE];
      case 4: {
        if (tag == 32) {
         parse_fill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::FillerType_IsValid(value)) {
            set_fill_type(static_cast< ::nvdla_prototest_interface::FillerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filler;
        break;
      }

      // optional .nvdla_prototest_interface.DataFiller filler = 5;
      case 5: {
        if (tag == 42) {
         parse_filler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flag;
        break;
      }

      // optional .nvdla_prototest_interface.MemFlag flag = 6 [default = DLA_MEM_ALLOC];
      case 6: {
        if (tag == 48) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::MemFlag_IsValid(value)) {
            set_flag(static_cast< ::nvdla_prototest_interface::MemFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_precision;
        break;
      }

      // optional .nvdla_prototest_interface.DataPrecision precision = 7 [default = PRECISION_INT8];
      case 7: {
        if (tag == 56) {
         parse_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sw_dilation_x;
        break;
      }

      // optional uint32 sw_dilation_x = 8 [default = 1];
      case 8: {
        if (tag == 64) {
         parse_sw_dilation_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sw_dilation_x_)));
          set_has_sw_dilation_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sw_dilation_y;
        break;
      }

      // optional uint32 sw_dilation_y = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_sw_dilation_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sw_dilation_y_)));
          set_has_sw_dilation_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.MemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.MemInfo)
  return false;
#undef DO_
}

void MemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.MemInfo)
  // required int32 mem_id = 1 [default = -1];
  if (has_mem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mem_id(), output);
  }

  // required uint32 mem_size = 2 [default = 0];
  if (has_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mem_size(), output);
  }

  // required uint32 offset = 3 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // optional .nvdla_prototest_interface.FillerType fill_type = 4 [default = FILL_NONE];
  if (has_fill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->fill_type(), output);
  }

  // optional .nvdla_prototest_interface.DataFiller filler = 5;
  if (has_filler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filler(), output);
  }

  // optional .nvdla_prototest_interface.MemFlag flag = 6 [default = DLA_MEM_ALLOC];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->flag(), output);
  }

  // optional .nvdla_prototest_interface.DataPrecision precision = 7 [default = PRECISION_INT8];
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->precision(), output);
  }

  // optional uint32 sw_dilation_x = 8 [default = 1];
  if (has_sw_dilation_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sw_dilation_x(), output);
  }

  // optional uint32 sw_dilation_y = 9 [default = 1];
  if (has_sw_dilation_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sw_dilation_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.MemInfo)
}

::google::protobuf::uint8* MemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.MemInfo)
  // required int32 mem_id = 1 [default = -1];
  if (has_mem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mem_id(), target);
  }

  // required uint32 mem_size = 2 [default = 0];
  if (has_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mem_size(), target);
  }

  // required uint32 offset = 3 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // optional .nvdla_prototest_interface.FillerType fill_type = 4 [default = FILL_NONE];
  if (has_fill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->fill_type(), target);
  }

  // optional .nvdla_prototest_interface.DataFiller filler = 5;
  if (has_filler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filler(), target);
  }

  // optional .nvdla_prototest_interface.MemFlag flag = 6 [default = DLA_MEM_ALLOC];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->flag(), target);
  }

  // optional .nvdla_prototest_interface.DataPrecision precision = 7 [default = PRECISION_INT8];
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->precision(), target);
  }

  // optional uint32 sw_dilation_x = 8 [default = 1];
  if (has_sw_dilation_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sw_dilation_x(), target);
  }

  // optional uint32 sw_dilation_y = 9 [default = 1];
  if (has_sw_dilation_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sw_dilation_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.MemInfo)
  return target;
}

int MemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mem_id = 1 [default = -1];
    if (has_mem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_id());
    }

    // required uint32 mem_size = 2 [default = 0];
    if (has_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_size());
    }

    // required uint32 offset = 3 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional .nvdla_prototest_interface.FillerType fill_type = 4 [default = FILL_NONE];
    if (has_fill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fill_type());
    }

    // optional .nvdla_prototest_interface.DataFiller filler = 5;
    if (has_filler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filler());
    }

    // optional .nvdla_prototest_interface.MemFlag flag = 6 [default = DLA_MEM_ALLOC];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // optional .nvdla_prototest_interface.DataPrecision precision = 7 [default = PRECISION_INT8];
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision());
    }

    // optional uint32 sw_dilation_x = 8 [default = 1];
    if (has_sw_dilation_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sw_dilation_x());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 sw_dilation_y = 9 [default = 1];
    if (has_sw_dilation_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sw_dilation_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemInfo::MergeFrom(const MemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mem_id()) {
      set_mem_id(from.mem_id());
    }
    if (from.has_mem_size()) {
      set_mem_size(from.mem_size());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_fill_type()) {
      set_fill_type(from.fill_type());
    }
    if (from.has_filler()) {
      mutable_filler()->::nvdla_prototest_interface::DataFiller::MergeFrom(from.filler());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_sw_dilation_x()) {
      set_sw_dilation_x(from.sw_dilation_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sw_dilation_y()) {
      set_sw_dilation_y(from.sw_dilation_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfo::CopyFrom(const MemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_filler()) {
    if (!this->filler().IsInitialized()) return false;
  }
  return true;
}

void MemInfo::Swap(MemInfo* other) {
  if (other != this) {
    std::swap(mem_id_, other->mem_id_);
    std::swap(mem_size_, other->mem_size_);
    std::swap(offset_, other->offset_);
    std::swap(fill_type_, other->fill_type_);
    std::swap(filler_, other->filler_);
    std::swap(flag_, other->flag_);
    std::swap(precision_, other->precision_);
    std::swap(sw_dilation_x_, other->sw_dilation_x_);
    std::swap(sw_dilation_y_, other->sw_dilation_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemInfo_descriptor_;
  metadata.reflection = MemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCube::kReserved0FieldNumber;
const int DataCube::kTypeFieldNumber;
const int DataCube::kAddressFieldNumber;
const int DataCube::kSizeFieldNumber;
const int DataCube::kWidthFieldNumber;
const int DataCube::kHeightFieldNumber;
const int DataCube::kChannelFieldNumber;
const int DataCube::kReserved1FieldNumber;
const int DataCube::kLineStrideFieldNumber;
const int DataCube::kSurfStrideFieldNumber;
const int DataCube::kPlaneStrideFieldNumber;
const int DataCube::kMemInfoFieldNumber;
#endif  // !_MSC_VER

DataCube::DataCube()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.DataCube)
}

void DataCube::InitAsDefaultInstance() {
  mem_info_ = const_cast< ::nvdla_prototest_interface::MemInfo*>(&::nvdla_prototest_interface::MemInfo::default_instance());
}

DataCube::DataCube(const DataCube& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.DataCube)
}

void DataCube::SharedCtor() {
  _cached_size_ = 0;
  reserved0_ = 0u;
  type_ = 0;
  address_ = 0;
  size_ = 0u;
  width_ = 0u;
  height_ = 0u;
  channel_ = 0u;
  reserved1_ = 0u;
  line_stride_ = 0u;
  surf_stride_ = 0u;
  plane_stride_ = 0u;
  mem_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCube::~DataCube() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.DataCube)
  SharedDtor();
}

void DataCube::SharedDtor() {
  if (this != default_instance_) {
    delete mem_info_;
  }
}

void DataCube::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCube::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCube_descriptor_;
}

const DataCube& DataCube::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

DataCube* DataCube::default_instance_ = NULL;

DataCube* DataCube::New() const {
  return new DataCube;
}

void DataCube::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DataCube*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(reserved0_, reserved1_);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(line_stride_, surf_stride_);
    plane_stride_ = 0u;
    if (has_mem_info()) {
      if (mem_info_ != NULL) mem_info_->::nvdla_prototest_interface::MemInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataCube::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.DataCube)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reserved0 = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .nvdla_prototest_interface.MemType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::MemType_IsValid(value)) {
            set_type(static_cast< ::nvdla_prototest_interface::MemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_address;
        break;
      }

      // required int32 address = 3;
      case 3: {
        if (tag == 24) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_width;
        break;
      }

      // required uint32 width = 5;
      case 5: {
        if (tag == 40) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_height;
        break;
      }

      // required uint32 height = 6;
      case 6: {
        if (tag == 48) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_channel;
        break;
      }

      // required uint32 channel = 7;
      case 7: {
        if (tag == 56) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reserved1;
        break;
      }

      // optional uint32 reserved1 = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_reserved1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved1_)));
          set_has_reserved1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_line_stride;
        break;
      }

      // required uint32 line_stride = 9;
      case 9: {
        if (tag == 72) {
         parse_line_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_stride_)));
          set_has_line_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_surf_stride;
        break;
      }

      // required uint32 surf_stride = 10;
      case 10: {
        if (tag == 80) {
         parse_surf_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surf_stride_)));
          set_has_surf_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_plane_stride;
        break;
      }

      // required uint32 plane_stride = 11;
      case 11: {
        if (tag == 88) {
         parse_plane_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plane_stride_)));
          set_has_plane_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_mem_info;
        break;
      }

      // required .nvdla_prototest_interface.MemInfo mem_info = 12;
      case 12: {
        if (tag == 98) {
         parse_mem_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.DataCube)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.DataCube)
  return false;
#undef DO_
}

void DataCube::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.DataCube)
  // optional uint32 reserved0 = 1 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserved0(), output);
  }

  // required .nvdla_prototest_interface.MemType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->address(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // required uint32 width = 5;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // required uint32 height = 6;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->height(), output);
  }

  // required uint32 channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channel(), output);
  }

  // optional uint32 reserved1 = 8 [default = 0];
  if (has_reserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reserved1(), output);
  }

  // required uint32 line_stride = 9;
  if (has_line_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->line_stride(), output);
  }

  // required uint32 surf_stride = 10;
  if (has_surf_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->surf_stride(), output);
  }

  // required uint32 plane_stride = 11;
  if (has_plane_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->plane_stride(), output);
  }

  // required .nvdla_prototest_interface.MemInfo mem_info = 12;
  if (has_mem_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->mem_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.DataCube)
}

::google::protobuf::uint8* DataCube::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.DataCube)
  // optional uint32 reserved0 = 1 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reserved0(), target);
  }

  // required .nvdla_prototest_interface.MemType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 address = 3;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->address(), target);
  }

  // required uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // required uint32 width = 5;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // required uint32 height = 6;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->height(), target);
  }

  // required uint32 channel = 7;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channel(), target);
  }

  // optional uint32 reserved1 = 8 [default = 0];
  if (has_reserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reserved1(), target);
  }

  // required uint32 line_stride = 9;
  if (has_line_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->line_stride(), target);
  }

  // required uint32 surf_stride = 10;
  if (has_surf_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->surf_stride(), target);
  }

  // required uint32 plane_stride = 11;
  if (has_plane_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->plane_stride(), target);
  }

  // required .nvdla_prototest_interface.MemInfo mem_info = 12;
  if (has_mem_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->mem_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.DataCube)
  return target;
}

int DataCube::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reserved0 = 1 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

    // required .nvdla_prototest_interface.MemType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->address());
    }

    // required uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // required uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 6;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required uint32 channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 reserved1 = 8 [default = 0];
    if (has_reserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 line_stride = 9;
    if (has_line_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_stride());
    }

    // required uint32 surf_stride = 10;
    if (has_surf_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surf_stride());
    }

    // required uint32 plane_stride = 11;
    if (has_plane_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plane_stride());
    }

    // required .nvdla_prototest_interface.MemInfo mem_info = 12;
    if (has_mem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCube::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCube* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCube*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataCube::MergeFrom(const DataCube& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_reserved1()) {
      set_reserved1(from.reserved1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_line_stride()) {
      set_line_stride(from.line_stride());
    }
    if (from.has_surf_stride()) {
      set_surf_stride(from.surf_stride());
    }
    if (from.has_plane_stride()) {
      set_plane_stride(from.plane_stride());
    }
    if (from.has_mem_info()) {
      mutable_mem_info()->::nvdla_prototest_interface::MemInfo::MergeFrom(from.mem_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataCube::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCube::CopyFrom(const DataCube& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCube::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f7e) != 0x00000f7e) return false;

  if (has_mem_info()) {
    if (!this->mem_info().IsInitialized()) return false;
  }
  return true;
}

void DataCube::Swap(DataCube* other) {
  if (other != this) {
    std::swap(reserved0_, other->reserved0_);
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(size_, other->size_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(channel_, other->channel_);
    std::swap(reserved1_, other->reserved1_);
    std::swap(line_stride_, other->line_stride_);
    std::swap(surf_stride_, other->surf_stride_);
    std::swap(plane_stride_, other->plane_stride_);
    std::swap(mem_info_, other->mem_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataCube::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCube_descriptor_;
  metadata.reflection = DataCube_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CONVSurfaceDesc::kWeightDataFieldNumber;
const int CONVSurfaceDesc::kWmbDataFieldNumber;
const int CONVSurfaceDesc::kWgsDataFieldNumber;
const int CONVSurfaceDesc::kSrcDataFieldNumber;
const int CONVSurfaceDesc::kDstDataFieldNumber;
const int CONVSurfaceDesc::kOffsetUFieldNumber;
const int CONVSurfaceDesc::kInLineUvStrideFieldNumber;
#endif  // !_MSC_VER

CONVSurfaceDesc::CONVSurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.CONVSurfaceDesc)
}

void CONVSurfaceDesc::InitAsDefaultInstance() {
  weight_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  wmb_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  wgs_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  src_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  dst_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
}

CONVSurfaceDesc::CONVSurfaceDesc(const CONVSurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.CONVSurfaceDesc)
}

void CONVSurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  weight_data_ = NULL;
  wmb_data_ = NULL;
  wgs_data_ = NULL;
  src_data_ = NULL;
  dst_data_ = NULL;
  offset_u_ = GOOGLE_LONGLONG(0);
  in_line_uv_stride_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CONVSurfaceDesc::~CONVSurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.CONVSurfaceDesc)
  SharedDtor();
}

void CONVSurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
    delete weight_data_;
    delete wmb_data_;
    delete wgs_data_;
    delete src_data_;
    delete dst_data_;
  }
}

void CONVSurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CONVSurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONVSurfaceDesc_descriptor_;
}

const CONVSurfaceDesc& CONVSurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

CONVSurfaceDesc* CONVSurfaceDesc::default_instance_ = NULL;

CONVSurfaceDesc* CONVSurfaceDesc::New() const {
  return new CONVSurfaceDesc;
}

void CONVSurfaceDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CONVSurfaceDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(offset_u_, in_line_uv_stride_);
    if (has_weight_data()) {
      if (weight_data_ != NULL) weight_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_wmb_data()) {
      if (wmb_data_ != NULL) wmb_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_wgs_data()) {
      if (wgs_data_ != NULL) wgs_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_src_data()) {
      if (src_data_ != NULL) src_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_dst_data()) {
      if (dst_data_ != NULL) dst_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CONVSurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.CONVSurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataCube weight_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wmb_data;
        break;
      }

      // optional .nvdla_prototest_interface.DataCube wmb_data = 2;
      case 2: {
        if (tag == 18) {
         parse_wmb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wmb_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wgs_data;
        break;
      }

      // optional .nvdla_prototest_interface.DataCube wgs_data = 3;
      case 3: {
        if (tag == 26) {
         parse_wgs_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wgs_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_src_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube src_data = 4;
      case 4: {
        if (tag == 34) {
         parse_src_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dst_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube dst_data = 5;
      case 5: {
        if (tag == 42) {
         parse_dst_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_offset_u;
        break;
      }

      // required int64 offset_u = 6;
      case 6: {
        if (tag == 48) {
         parse_offset_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_u_)));
          set_has_offset_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_in_line_uv_stride;
        break;
      }

      // required uint32 in_line_uv_stride = 7;
      case 7: {
        if (tag == 56) {
         parse_in_line_uv_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_line_uv_stride_)));
          set_has_in_line_uv_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.CONVSurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.CONVSurfaceDesc)
  return false;
#undef DO_
}

void CONVSurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.CONVSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube weight_data = 1;
  if (has_weight_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weight_data(), output);
  }

  // optional .nvdla_prototest_interface.DataCube wmb_data = 2;
  if (has_wmb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wmb_data(), output);
  }

  // optional .nvdla_prototest_interface.DataCube wgs_data = 3;
  if (has_wgs_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wgs_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube src_data = 4;
  if (has_src_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->src_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 5;
  if (has_dst_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dst_data(), output);
  }

  // required int64 offset_u = 6;
  if (has_offset_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->offset_u(), output);
  }

  // required uint32 in_line_uv_stride = 7;
  if (has_in_line_uv_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->in_line_uv_stride(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.CONVSurfaceDesc)
}

::google::protobuf::uint8* CONVSurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.CONVSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube weight_data = 1;
  if (has_weight_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weight_data(), target);
  }

  // optional .nvdla_prototest_interface.DataCube wmb_data = 2;
  if (has_wmb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wmb_data(), target);
  }

  // optional .nvdla_prototest_interface.DataCube wgs_data = 3;
  if (has_wgs_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wgs_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube src_data = 4;
  if (has_src_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->src_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 5;
  if (has_dst_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dst_data(), target);
  }

  // required int64 offset_u = 6;
  if (has_offset_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->offset_u(), target);
  }

  // required uint32 in_line_uv_stride = 7;
  if (has_in_line_uv_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->in_line_uv_stride(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.CONVSurfaceDesc)
  return target;
}

int CONVSurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataCube weight_data = 1;
    if (has_weight_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight_data());
    }

    // optional .nvdla_prototest_interface.DataCube wmb_data = 2;
    if (has_wmb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wmb_data());
    }

    // optional .nvdla_prototest_interface.DataCube wgs_data = 3;
    if (has_wgs_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wgs_data());
    }

    // required .nvdla_prototest_interface.DataCube src_data = 4;
    if (has_src_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_data());
    }

    // required .nvdla_prototest_interface.DataCube dst_data = 5;
    if (has_dst_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_data());
    }

    // required int64 offset_u = 6;
    if (has_offset_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_u());
    }

    // required uint32 in_line_uv_stride = 7;
    if (has_in_line_uv_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_line_uv_stride());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CONVSurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CONVSurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CONVSurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CONVSurfaceDesc::MergeFrom(const CONVSurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight_data()) {
      mutable_weight_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.weight_data());
    }
    if (from.has_wmb_data()) {
      mutable_wmb_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.wmb_data());
    }
    if (from.has_wgs_data()) {
      mutable_wgs_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.wgs_data());
    }
    if (from.has_src_data()) {
      mutable_src_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.src_data());
    }
    if (from.has_dst_data()) {
      mutable_dst_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.dst_data());
    }
    if (from.has_offset_u()) {
      set_offset_u(from.offset_u());
    }
    if (from.has_in_line_uv_stride()) {
      set_in_line_uv_stride(from.in_line_uv_stride());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CONVSurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONVSurfaceDesc::CopyFrom(const CONVSurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONVSurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;

  if (has_weight_data()) {
    if (!this->weight_data().IsInitialized()) return false;
  }
  if (has_wmb_data()) {
    if (!this->wmb_data().IsInitialized()) return false;
  }
  if (has_wgs_data()) {
    if (!this->wgs_data().IsInitialized()) return false;
  }
  if (has_src_data()) {
    if (!this->src_data().IsInitialized()) return false;
  }
  if (has_dst_data()) {
    if (!this->dst_data().IsInitialized()) return false;
  }
  return true;
}

void CONVSurfaceDesc::Swap(CONVSurfaceDesc* other) {
  if (other != this) {
    std::swap(weight_data_, other->weight_data_);
    std::swap(wmb_data_, other->wmb_data_);
    std::swap(wgs_data_, other->wgs_data_);
    std::swap(src_data_, other->src_data_);
    std::swap(dst_data_, other->dst_data_);
    std::swap(offset_u_, other->offset_u_);
    std::swap(in_line_uv_stride_, other->in_line_uv_stride_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CONVSurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CONVSurfaceDesc_descriptor_;
  metadata.reflection = CONVSurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CONVOpDesc::kConvModeFieldNumber;
const int CONVOpDesc::kDataReuseFieldNumber;
const int CONVOpDesc::kWeightReuseFieldNumber;
const int CONVOpDesc::kSkipDataRlsFieldNumber;
const int CONVOpDesc::kSkipWeightRlsFieldNumber;
const int CONVOpDesc::kReserved0FieldNumber;
const int CONVOpDesc::kEntryPerSliceFieldNumber;
const int CONVOpDesc::kDataFormatFieldNumber;
const int CONVOpDesc::kPixelMappingFieldNumber;
const int CONVOpDesc::kFetchGrainFieldNumber;
const int CONVOpDesc::kPixelOffsetXFieldNumber;
const int CONVOpDesc::kPixelOffsetYFieldNumber;
const int CONVOpDesc::kGobPerLineFieldNumber;
const int CONVOpDesc::kGobHeightFieldNumber;
const int CONVOpDesc::kGobYIndexFieldNumber;
const int CONVOpDesc::kGobPerUvLineFieldNumber;
const int CONVOpDesc::kBatchFieldNumber;
const int CONVOpDesc::kWeightFormatFieldNumber;
const int CONVOpDesc::kDataBankFieldNumber;
const int CONVOpDesc::kWeightBankFieldNumber;
const int CONVOpDesc::kBatchStrideFieldNumber;
const int CONVOpDesc::kPostExtensionFieldNumber;
const int CONVOpDesc::kPixelOverrideFieldNumber;
const int CONVOpDesc::kReleaseFieldNumber;
const int CONVOpDesc::kInputWidthCscFieldNumber;
const int CONVOpDesc::kInputHeightCscFieldNumber;
const int CONVOpDesc::kInputChannelCscFieldNumber;
const int CONVOpDesc::kKernelWidthCscFieldNumber;
const int CONVOpDesc::kKernelHeightCscFieldNumber;
const int CONVOpDesc::kKernelChannelCscFieldNumber;
const int CONVOpDesc::kInputWidthCmacFieldNumber;
const int CONVOpDesc::kInputHeightCmacFieldNumber;
const int CONVOpDesc::kBytesPerKernelFieldNumber;
const int CONVOpDesc::kMeanRyFieldNumber;
const int CONVOpDesc::kMeanGuFieldNumber;
const int CONVOpDesc::kMeanBvFieldNumber;
const int CONVOpDesc::kMeanAxFieldNumber;
const int CONVOpDesc::kMeanFormatFieldNumber;
const int CONVOpDesc::kConvStrideXFieldNumber;
const int CONVOpDesc::kConvStrideYFieldNumber;
const int CONVOpDesc::kPadXLeftFieldNumber;
const int CONVOpDesc::kPadXRightFieldNumber;
const int CONVOpDesc::kPadYTopFieldNumber;
const int CONVOpDesc::kPadYBottomFieldNumber;
const int CONVOpDesc::kDilationXFieldNumber;
const int CONVOpDesc::kDilationYFieldNumber;
const int CONVOpDesc::kReserved2FieldNumber;
const int CONVOpDesc::kPraTruncateFieldNumber;
const int CONVOpDesc::kInPrecisionFieldNumber;
const int CONVOpDesc::kOutPrecisionFieldNumber;
const int CONVOpDesc::kPadValFieldNumber;
const int CONVOpDesc::kInCvtFieldNumber;
const int CONVOpDesc::kOutCvtFieldNumber;
#endif  // !_MSC_VER

CONVOpDesc::CONVOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.CONVOpDesc)
}

void CONVOpDesc::InitAsDefaultInstance() {
  in_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
  out_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
}

CONVOpDesc::CONVOpDesc(const CONVOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.CONVOpDesc)
}

void CONVOpDesc::SharedCtor() {
  _cached_size_ = 0;
  conv_mode_ = 0;
  data_reuse_ = 0u;
  weight_reuse_ = 0u;
  skip_data_rls_ = 0u;
  skip_weight_rls_ = 0u;
  reserved0_ = 0u;
  entry_per_slice_ = 0u;
  data_format_ = 0;
  pixel_mapping_ = 0u;
  fetch_grain_ = 0u;
  pixel_offset_x_ = 0u;
  pixel_offset_y_ = 0u;
  gob_per_line_ = 0u;
  gob_height_ = 0u;
  gob_y_index_ = 0u;
  gob_per_uv_line_ = 0u;
  batch_ = 0u;
  weight_format_ = 0;
  data_bank_ = 0u;
  weight_bank_ = 0u;
  batch_stride_ = 0u;
  post_extension_ = 0u;
  pixel_override_ = 0;
  release_ = 0u;
  input_width_csc_ = 0u;
  input_height_csc_ = 0u;
  input_channel_csc_ = 0u;
  kernel_width_csc_ = 0u;
  kernel_height_csc_ = 0u;
  kernel_channel_csc_ = 0u;
  input_width_cmac_ = 0u;
  input_height_cmac_ = 0u;
  bytes_per_kernel_ = 0u;
  mean_ry_ = 0;
  mean_gu_ = 0;
  mean_bv_ = 0;
  mean_ax_ = 0;
  mean_format_ = 0;
  conv_stride_x_ = 0u;
  conv_stride_y_ = 0u;
  pad_x_left_ = 0u;
  pad_x_right_ = 0u;
  pad_y_top_ = 0u;
  pad_y_bottom_ = 0u;
  dilation_x_ = 0u;
  dilation_y_ = 0u;
  pra_truncate_ = 0u;
  in_precision_ = 0;
  out_precision_ = 0;
  pad_val_ = 0;
  in_cvt_ = NULL;
  out_cvt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CONVOpDesc::~CONVOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.CONVOpDesc)
  SharedDtor();
}

void CONVOpDesc::SharedDtor() {
  if (this != default_instance_) {
    delete in_cvt_;
    delete out_cvt_;
  }
}

void CONVOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CONVOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONVOpDesc_descriptor_;
}

const CONVOpDesc& CONVOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

CONVOpDesc* CONVOpDesc::default_instance_ = NULL;

CONVOpDesc* CONVOpDesc::New() const {
  return new CONVOpDesc;
}

void CONVOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CONVOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(conv_mode_, data_format_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pixel_mapping_, gob_per_uv_line_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(batch_, release_);
  }
  if (_has_bits_[24 / 32] & /*4278190080*/ 0xFF000000) {
    ZR_(input_width_csc_, input_height_cmac_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(bytes_per_kernel_, conv_stride_y_);
  }
  if (_has_bits_[40 / 32] & 48896) {
    ZR_(pad_x_left_, dilation_y_);
    pra_truncate_ = 0u;
  }
  if (_has_bits_[48 / 32] & 2031616) {
    ZR_(in_precision_, pad_val_);
    if (has_in_cvt()) {
      if (in_cvt_ != NULL) in_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
    if (has_out_cvt()) {
      if (out_cvt_ != NULL) out_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reserved2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CONVOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.CONVOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.ConvMode conv_mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::ConvMode_IsValid(value)) {
            set_conv_mode(static_cast< ::nvdla_prototest_interface::ConvMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_reuse;
        break;
      }

      // required uint32 data_reuse = 2;
      case 2: {
        if (tag == 16) {
         parse_data_reuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_reuse_)));
          set_has_data_reuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weight_reuse;
        break;
      }

      // required uint32 weight_reuse = 3;
      case 3: {
        if (tag == 24) {
         parse_weight_reuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_reuse_)));
          set_has_weight_reuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skip_data_rls;
        break;
      }

      // required uint32 skip_data_rls = 4;
      case 4: {
        if (tag == 32) {
         parse_skip_data_rls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_data_rls_)));
          set_has_skip_data_rls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skip_weight_rls;
        break;
      }

      // required uint32 skip_weight_rls = 5;
      case 5: {
        if (tag == 40) {
         parse_skip_weight_rls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_weight_rls_)));
          set_has_skip_weight_rls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_entry_per_slice;
        break;
      }

      // required uint32 entry_per_slice = 7;
      case 7: {
        if (tag == 56) {
         parse_entry_per_slice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_per_slice_)));
          set_has_entry_per_slice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_data_format;
        break;
      }

      // required .nvdla_prototest_interface.DataFormat data_format = 8;
      case 8: {
        if (tag == 64) {
         parse_data_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataFormat_IsValid(value)) {
            set_data_format(static_cast< ::nvdla_prototest_interface::DataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pixel_mapping;
        break;
      }

      // required uint32 pixel_mapping = 9;
      case 9: {
        if (tag == 72) {
         parse_pixel_mapping:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_mapping_)));
          set_has_pixel_mapping();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fetch_grain;
        break;
      }

      // required uint32 fetch_grain = 10;
      case 10: {
        if (tag == 80) {
         parse_fetch_grain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetch_grain_)));
          set_has_fetch_grain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pixel_offset_x;
        break;
      }

      // required uint32 pixel_offset_x = 11;
      case 11: {
        if (tag == 88) {
         parse_pixel_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_offset_x_)));
          set_has_pixel_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_pixel_offset_y;
        break;
      }

      // required uint32 pixel_offset_y = 12;
      case 12: {
        if (tag == 96) {
         parse_pixel_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixel_offset_y_)));
          set_has_pixel_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gob_per_line;
        break;
      }

      // required uint32 gob_per_line = 13;
      case 13: {
        if (tag == 104) {
         parse_gob_per_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gob_per_line_)));
          set_has_gob_per_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gob_height;
        break;
      }

      // required uint32 gob_height = 14;
      case 14: {
        if (tag == 112) {
         parse_gob_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gob_height_)));
          set_has_gob_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_gob_y_index;
        break;
      }

      // required uint32 gob_y_index = 15;
      case 15: {
        if (tag == 120) {
         parse_gob_y_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gob_y_index_)));
          set_has_gob_y_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_gob_per_uv_line;
        break;
      }

      // required uint32 gob_per_uv_line = 16;
      case 16: {
        if (tag == 128) {
         parse_gob_per_uv_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gob_per_uv_line_)));
          set_has_gob_per_uv_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_batch;
        break;
      }

      // required uint32 batch = 17;
      case 17: {
        if (tag == 136) {
         parse_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_)));
          set_has_batch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_weight_format;
        break;
      }

      // required .nvdla_prototest_interface.WeightFormat weight_format = 18;
      case 18: {
        if (tag == 144) {
         parse_weight_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::WeightFormat_IsValid(value)) {
            set_weight_format(static_cast< ::nvdla_prototest_interface::WeightFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_data_bank;
        break;
      }

      // required uint32 data_bank = 19;
      case 19: {
        if (tag == 152) {
         parse_data_bank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_bank_)));
          set_has_data_bank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_weight_bank;
        break;
      }

      // required uint32 weight_bank = 20;
      case 20: {
        if (tag == 160) {
         parse_weight_bank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_bank_)));
          set_has_weight_bank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_batch_stride;
        break;
      }

      // required uint32 batch_stride = 21;
      case 21: {
        if (tag == 168) {
         parse_batch_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_stride_)));
          set_has_batch_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_post_extension;
        break;
      }

      // required uint32 post_extension = 22;
      case 22: {
        if (tag == 176) {
         parse_post_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_extension_)));
          set_has_post_extension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_pixel_override;
        break;
      }

      // optional .nvdla_prototest_interface.PixelOverride pixel_override = 23;
      case 23: {
        if (tag == 184) {
         parse_pixel_override:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::PixelOverride_IsValid(value)) {
            set_pixel_override(static_cast< ::nvdla_prototest_interface::PixelOverride >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_release;
        break;
      }

      // required uint32 release = 24;
      case 24: {
        if (tag == 192) {
         parse_release:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &release_)));
          set_has_release();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_input_width_csc;
        break;
      }

      // required uint32 input_width_csc = 25;
      case 25: {
        if (tag == 200) {
         parse_input_width_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_width_csc_)));
          set_has_input_width_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_input_height_csc;
        break;
      }

      // required uint32 input_height_csc = 26;
      case 26: {
        if (tag == 208) {
         parse_input_height_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_height_csc_)));
          set_has_input_height_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_input_channel_csc;
        break;
      }

      // required uint32 input_channel_csc = 27;
      case 27: {
        if (tag == 216) {
         parse_input_channel_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_channel_csc_)));
          set_has_input_channel_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_kernel_width_csc;
        break;
      }

      // required uint32 kernel_width_csc = 28;
      case 28: {
        if (tag == 224) {
         parse_kernel_width_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_width_csc_)));
          set_has_kernel_width_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_kernel_height_csc;
        break;
      }

      // required uint32 kernel_height_csc = 29;
      case 29: {
        if (tag == 232) {
         parse_kernel_height_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_height_csc_)));
          set_has_kernel_height_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_kernel_channel_csc;
        break;
      }

      // required uint32 kernel_channel_csc = 30;
      case 30: {
        if (tag == 240) {
         parse_kernel_channel_csc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kernel_channel_csc_)));
          set_has_kernel_channel_csc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_input_width_cmac;
        break;
      }

      // required uint32 input_width_cmac = 31;
      case 31: {
        if (tag == 248) {
         parse_input_width_cmac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_width_cmac_)));
          set_has_input_width_cmac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_input_height_cmac;
        break;
      }

      // required uint32 input_height_cmac = 32;
      case 32: {
        if (tag == 256) {
         parse_input_height_cmac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_height_cmac_)));
          set_has_input_height_cmac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_bytes_per_kernel;
        break;
      }

      // required uint32 bytes_per_kernel = 33;
      case 33: {
        if (tag == 264) {
         parse_bytes_per_kernel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_per_kernel_)));
          set_has_bytes_per_kernel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_mean_ry;
        break;
      }

      // required int32 mean_ry = 34;
      case 34: {
        if (tag == 272) {
         parse_mean_ry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_ry_)));
          set_has_mean_ry();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_mean_gu;
        break;
      }

      // required int32 mean_gu = 35;
      case 35: {
        if (tag == 280) {
         parse_mean_gu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_gu_)));
          set_has_mean_gu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_mean_bv;
        break;
      }

      // required int32 mean_bv = 36;
      case 36: {
        if (tag == 288) {
         parse_mean_bv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_bv_)));
          set_has_mean_bv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_mean_ax;
        break;
      }

      // required int32 mean_ax = 37;
      case 37: {
        if (tag == 296) {
         parse_mean_ax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_ax_)));
          set_has_mean_ax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_mean_format;
        break;
      }

      // required .nvdla_prototest_interface.MeanFormat mean_format = 38;
      case 38: {
        if (tag == 304) {
         parse_mean_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::MeanFormat_IsValid(value)) {
            set_mean_format(static_cast< ::nvdla_prototest_interface::MeanFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(38, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_conv_stride_x;
        break;
      }

      // required uint32 conv_stride_x = 39;
      case 39: {
        if (tag == 312) {
         parse_conv_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conv_stride_x_)));
          set_has_conv_stride_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_conv_stride_y;
        break;
      }

      // required uint32 conv_stride_y = 40;
      case 40: {
        if (tag == 320) {
         parse_conv_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conv_stride_y_)));
          set_has_conv_stride_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_pad_x_left;
        break;
      }

      // required uint32 pad_x_left = 41;
      case 41: {
        if (tag == 328) {
         parse_pad_x_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_x_left_)));
          set_has_pad_x_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_pad_x_right;
        break;
      }

      // required uint32 pad_x_right = 42;
      case 42: {
        if (tag == 336) {
         parse_pad_x_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_x_right_)));
          set_has_pad_x_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_pad_y_top;
        break;
      }

      // required uint32 pad_y_top = 43;
      case 43: {
        if (tag == 344) {
         parse_pad_y_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_y_top_)));
          set_has_pad_y_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_pad_y_bottom;
        break;
      }

      // required uint32 pad_y_bottom = 44;
      case 44: {
        if (tag == 352) {
         parse_pad_y_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_y_bottom_)));
          set_has_pad_y_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_dilation_x;
        break;
      }

      // required uint32 dilation_x = 45;
      case 45: {
        if (tag == 360) {
         parse_dilation_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dilation_x_)));
          set_has_dilation_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_dilation_y;
        break;
      }

      // required uint32 dilation_y = 46;
      case 46: {
        if (tag == 368) {
         parse_dilation_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dilation_y_)));
          set_has_dilation_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_reserved2;
        break;
      }

      // repeated uint32 reserved2 = 47 [packed = true];
      case 47: {
        if (tag == 378) {
         parse_reserved2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reserved2())));
        } else if (tag == 376) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 378, input, this->mutable_reserved2())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_pra_truncate;
        break;
      }

      // required uint32 pra_truncate = 48;
      case 48: {
        if (tag == 384) {
         parse_pra_truncate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pra_truncate_)));
          set_has_pra_truncate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_in_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision in_precision = 49;
      case 49: {
        if (tag == 392) {
         parse_in_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_in_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(49, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_out_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision out_precision = 50;
      case 50: {
        if (tag == 400) {
         parse_out_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_out_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_pad_val;
        break;
      }

      // required int32 pad_val = 51;
      case 51: {
        if (tag == 408) {
         parse_pad_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pad_val_)));
          set_has_pad_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_in_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam in_cvt = 52;
      case 52: {
        if (tag == 418) {
         parse_in_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_out_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam out_cvt = 53;
      case 53: {
        if (tag == 426) {
         parse_out_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.CONVOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.CONVOpDesc)
  return false;
#undef DO_
}

void CONVOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.CONVOpDesc)
  // required .nvdla_prototest_interface.ConvMode conv_mode = 1;
  if (has_conv_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->conv_mode(), output);
  }

  // required uint32 data_reuse = 2;
  if (has_data_reuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_reuse(), output);
  }

  // required uint32 weight_reuse = 3;
  if (has_weight_reuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weight_reuse(), output);
  }

  // required uint32 skip_data_rls = 4;
  if (has_skip_data_rls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skip_data_rls(), output);
  }

  // required uint32 skip_weight_rls = 5;
  if (has_skip_weight_rls()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skip_weight_rls(), output);
  }

  // optional uint32 reserved0 = 6 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reserved0(), output);
  }

  // required uint32 entry_per_slice = 7;
  if (has_entry_per_slice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->entry_per_slice(), output);
  }

  // required .nvdla_prototest_interface.DataFormat data_format = 8;
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->data_format(), output);
  }

  // required uint32 pixel_mapping = 9;
  if (has_pixel_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pixel_mapping(), output);
  }

  // required uint32 fetch_grain = 10;
  if (has_fetch_grain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->fetch_grain(), output);
  }

  // required uint32 pixel_offset_x = 11;
  if (has_pixel_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pixel_offset_x(), output);
  }

  // required uint32 pixel_offset_y = 12;
  if (has_pixel_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->pixel_offset_y(), output);
  }

  // required uint32 gob_per_line = 13;
  if (has_gob_per_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gob_per_line(), output);
  }

  // required uint32 gob_height = 14;
  if (has_gob_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gob_height(), output);
  }

  // required uint32 gob_y_index = 15;
  if (has_gob_y_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gob_y_index(), output);
  }

  // required uint32 gob_per_uv_line = 16;
  if (has_gob_per_uv_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->gob_per_uv_line(), output);
  }

  // required uint32 batch = 17;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->batch(), output);
  }

  // required .nvdla_prototest_interface.WeightFormat weight_format = 18;
  if (has_weight_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->weight_format(), output);
  }

  // required uint32 data_bank = 19;
  if (has_data_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->data_bank(), output);
  }

  // required uint32 weight_bank = 20;
  if (has_weight_bank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->weight_bank(), output);
  }

  // required uint32 batch_stride = 21;
  if (has_batch_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->batch_stride(), output);
  }

  // required uint32 post_extension = 22;
  if (has_post_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->post_extension(), output);
  }

  // optional .nvdla_prototest_interface.PixelOverride pixel_override = 23;
  if (has_pixel_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->pixel_override(), output);
  }

  // required uint32 release = 24;
  if (has_release()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->release(), output);
  }

  // required uint32 input_width_csc = 25;
  if (has_input_width_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->input_width_csc(), output);
  }

  // required uint32 input_height_csc = 26;
  if (has_input_height_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->input_height_csc(), output);
  }

  // required uint32 input_channel_csc = 27;
  if (has_input_channel_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->input_channel_csc(), output);
  }

  // required uint32 kernel_width_csc = 28;
  if (has_kernel_width_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->kernel_width_csc(), output);
  }

  // required uint32 kernel_height_csc = 29;
  if (has_kernel_height_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->kernel_height_csc(), output);
  }

  // required uint32 kernel_channel_csc = 30;
  if (has_kernel_channel_csc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->kernel_channel_csc(), output);
  }

  // required uint32 input_width_cmac = 31;
  if (has_input_width_cmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->input_width_cmac(), output);
  }

  // required uint32 input_height_cmac = 32;
  if (has_input_height_cmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->input_height_cmac(), output);
  }

  // required uint32 bytes_per_kernel = 33;
  if (has_bytes_per_kernel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->bytes_per_kernel(), output);
  }

  // required int32 mean_ry = 34;
  if (has_mean_ry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->mean_ry(), output);
  }

  // required int32 mean_gu = 35;
  if (has_mean_gu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->mean_gu(), output);
  }

  // required int32 mean_bv = 36;
  if (has_mean_bv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->mean_bv(), output);
  }

  // required int32 mean_ax = 37;
  if (has_mean_ax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->mean_ax(), output);
  }

  // required .nvdla_prototest_interface.MeanFormat mean_format = 38;
  if (has_mean_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->mean_format(), output);
  }

  // required uint32 conv_stride_x = 39;
  if (has_conv_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->conv_stride_x(), output);
  }

  // required uint32 conv_stride_y = 40;
  if (has_conv_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->conv_stride_y(), output);
  }

  // required uint32 pad_x_left = 41;
  if (has_pad_x_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->pad_x_left(), output);
  }

  // required uint32 pad_x_right = 42;
  if (has_pad_x_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->pad_x_right(), output);
  }

  // required uint32 pad_y_top = 43;
  if (has_pad_y_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->pad_y_top(), output);
  }

  // required uint32 pad_y_bottom = 44;
  if (has_pad_y_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->pad_y_bottom(), output);
  }

  // required uint32 dilation_x = 45;
  if (has_dilation_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->dilation_x(), output);
  }

  // required uint32 dilation_y = 46;
  if (has_dilation_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->dilation_y(), output);
  }

  // repeated uint32 reserved2 = 47 [packed = true];
  if (this->reserved2_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(47, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reserved2_cached_byte_size_);
  }
  for (int i = 0; i < this->reserved2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->reserved2(i), output);
  }

  // required uint32 pra_truncate = 48;
  if (has_pra_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->pra_truncate(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision in_precision = 49;
  if (has_in_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->in_precision(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision out_precision = 50;
  if (has_out_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->out_precision(), output);
  }

  // required int32 pad_val = 51;
  if (has_pad_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->pad_val(), output);
  }

  // required .nvdla_prototest_interface.CVTParam in_cvt = 52;
  if (has_in_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->in_cvt(), output);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 53;
  if (has_out_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->out_cvt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.CONVOpDesc)
}

::google::protobuf::uint8* CONVOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.CONVOpDesc)
  // required .nvdla_prototest_interface.ConvMode conv_mode = 1;
  if (has_conv_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->conv_mode(), target);
  }

  // required uint32 data_reuse = 2;
  if (has_data_reuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_reuse(), target);
  }

  // required uint32 weight_reuse = 3;
  if (has_weight_reuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->weight_reuse(), target);
  }

  // required uint32 skip_data_rls = 4;
  if (has_skip_data_rls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skip_data_rls(), target);
  }

  // required uint32 skip_weight_rls = 5;
  if (has_skip_weight_rls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skip_weight_rls(), target);
  }

  // optional uint32 reserved0 = 6 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reserved0(), target);
  }

  // required uint32 entry_per_slice = 7;
  if (has_entry_per_slice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->entry_per_slice(), target);
  }

  // required .nvdla_prototest_interface.DataFormat data_format = 8;
  if (has_data_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->data_format(), target);
  }

  // required uint32 pixel_mapping = 9;
  if (has_pixel_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pixel_mapping(), target);
  }

  // required uint32 fetch_grain = 10;
  if (has_fetch_grain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->fetch_grain(), target);
  }

  // required uint32 pixel_offset_x = 11;
  if (has_pixel_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pixel_offset_x(), target);
  }

  // required uint32 pixel_offset_y = 12;
  if (has_pixel_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->pixel_offset_y(), target);
  }

  // required uint32 gob_per_line = 13;
  if (has_gob_per_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gob_per_line(), target);
  }

  // required uint32 gob_height = 14;
  if (has_gob_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gob_height(), target);
  }

  // required uint32 gob_y_index = 15;
  if (has_gob_y_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gob_y_index(), target);
  }

  // required uint32 gob_per_uv_line = 16;
  if (has_gob_per_uv_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->gob_per_uv_line(), target);
  }

  // required uint32 batch = 17;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->batch(), target);
  }

  // required .nvdla_prototest_interface.WeightFormat weight_format = 18;
  if (has_weight_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->weight_format(), target);
  }

  // required uint32 data_bank = 19;
  if (has_data_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->data_bank(), target);
  }

  // required uint32 weight_bank = 20;
  if (has_weight_bank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->weight_bank(), target);
  }

  // required uint32 batch_stride = 21;
  if (has_batch_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->batch_stride(), target);
  }

  // required uint32 post_extension = 22;
  if (has_post_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->post_extension(), target);
  }

  // optional .nvdla_prototest_interface.PixelOverride pixel_override = 23;
  if (has_pixel_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->pixel_override(), target);
  }

  // required uint32 release = 24;
  if (has_release()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->release(), target);
  }

  // required uint32 input_width_csc = 25;
  if (has_input_width_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->input_width_csc(), target);
  }

  // required uint32 input_height_csc = 26;
  if (has_input_height_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->input_height_csc(), target);
  }

  // required uint32 input_channel_csc = 27;
  if (has_input_channel_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->input_channel_csc(), target);
  }

  // required uint32 kernel_width_csc = 28;
  if (has_kernel_width_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->kernel_width_csc(), target);
  }

  // required uint32 kernel_height_csc = 29;
  if (has_kernel_height_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->kernel_height_csc(), target);
  }

  // required uint32 kernel_channel_csc = 30;
  if (has_kernel_channel_csc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->kernel_channel_csc(), target);
  }

  // required uint32 input_width_cmac = 31;
  if (has_input_width_cmac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->input_width_cmac(), target);
  }

  // required uint32 input_height_cmac = 32;
  if (has_input_height_cmac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->input_height_cmac(), target);
  }

  // required uint32 bytes_per_kernel = 33;
  if (has_bytes_per_kernel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->bytes_per_kernel(), target);
  }

  // required int32 mean_ry = 34;
  if (has_mean_ry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->mean_ry(), target);
  }

  // required int32 mean_gu = 35;
  if (has_mean_gu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->mean_gu(), target);
  }

  // required int32 mean_bv = 36;
  if (has_mean_bv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->mean_bv(), target);
  }

  // required int32 mean_ax = 37;
  if (has_mean_ax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->mean_ax(), target);
  }

  // required .nvdla_prototest_interface.MeanFormat mean_format = 38;
  if (has_mean_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->mean_format(), target);
  }

  // required uint32 conv_stride_x = 39;
  if (has_conv_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->conv_stride_x(), target);
  }

  // required uint32 conv_stride_y = 40;
  if (has_conv_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->conv_stride_y(), target);
  }

  // required uint32 pad_x_left = 41;
  if (has_pad_x_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->pad_x_left(), target);
  }

  // required uint32 pad_x_right = 42;
  if (has_pad_x_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->pad_x_right(), target);
  }

  // required uint32 pad_y_top = 43;
  if (has_pad_y_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->pad_y_top(), target);
  }

  // required uint32 pad_y_bottom = 44;
  if (has_pad_y_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->pad_y_bottom(), target);
  }

  // required uint32 dilation_x = 45;
  if (has_dilation_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->dilation_x(), target);
  }

  // required uint32 dilation_y = 46;
  if (has_dilation_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->dilation_y(), target);
  }

  // repeated uint32 reserved2 = 47 [packed = true];
  if (this->reserved2_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      47,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reserved2_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reserved2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->reserved2(i), target);
  }

  // required uint32 pra_truncate = 48;
  if (has_pra_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->pra_truncate(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision in_precision = 49;
  if (has_in_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      49, this->in_precision(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision out_precision = 50;
  if (has_out_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->out_precision(), target);
  }

  // required int32 pad_val = 51;
  if (has_pad_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->pad_val(), target);
  }

  // required .nvdla_prototest_interface.CVTParam in_cvt = 52;
  if (has_in_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->in_cvt(), target);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 53;
  if (has_out_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->out_cvt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.CONVOpDesc)
  return target;
}

int CONVOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.ConvMode conv_mode = 1;
    if (has_conv_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conv_mode());
    }

    // required uint32 data_reuse = 2;
    if (has_data_reuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_reuse());
    }

    // required uint32 weight_reuse = 3;
    if (has_weight_reuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight_reuse());
    }

    // required uint32 skip_data_rls = 4;
    if (has_skip_data_rls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skip_data_rls());
    }

    // required uint32 skip_weight_rls = 5;
    if (has_skip_weight_rls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skip_weight_rls());
    }

    // optional uint32 reserved0 = 6 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

    // required uint32 entry_per_slice = 7;
    if (has_entry_per_slice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_per_slice());
    }

    // required .nvdla_prototest_interface.DataFormat data_format = 8;
    if (has_data_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_format());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 pixel_mapping = 9;
    if (has_pixel_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixel_mapping());
    }

    // required uint32 fetch_grain = 10;
    if (has_fetch_grain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fetch_grain());
    }

    // required uint32 pixel_offset_x = 11;
    if (has_pixel_offset_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixel_offset_x());
    }

    // required uint32 pixel_offset_y = 12;
    if (has_pixel_offset_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixel_offset_y());
    }

    // required uint32 gob_per_line = 13;
    if (has_gob_per_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gob_per_line());
    }

    // required uint32 gob_height = 14;
    if (has_gob_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gob_height());
    }

    // required uint32 gob_y_index = 15;
    if (has_gob_y_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gob_y_index());
    }

    // required uint32 gob_per_uv_line = 16;
    if (has_gob_per_uv_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gob_per_uv_line());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 batch = 17;
    if (has_batch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch());
    }

    // required .nvdla_prototest_interface.WeightFormat weight_format = 18;
    if (has_weight_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weight_format());
    }

    // required uint32 data_bank = 19;
    if (has_data_bank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_bank());
    }

    // required uint32 weight_bank = 20;
    if (has_weight_bank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight_bank());
    }

    // required uint32 batch_stride = 21;
    if (has_batch_stride()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_stride());
    }

    // required uint32 post_extension = 22;
    if (has_post_extension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->post_extension());
    }

    // optional .nvdla_prototest_interface.PixelOverride pixel_override = 23;
    if (has_pixel_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pixel_override());
    }

    // required uint32 release = 24;
    if (has_release()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->release());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 input_width_csc = 25;
    if (has_input_width_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_width_csc());
    }

    // required uint32 input_height_csc = 26;
    if (has_input_height_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_height_csc());
    }

    // required uint32 input_channel_csc = 27;
    if (has_input_channel_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_channel_csc());
    }

    // required uint32 kernel_width_csc = 28;
    if (has_kernel_width_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_width_csc());
    }

    // required uint32 kernel_height_csc = 29;
    if (has_kernel_height_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_height_csc());
    }

    // required uint32 kernel_channel_csc = 30;
    if (has_kernel_channel_csc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kernel_channel_csc());
    }

    // required uint32 input_width_cmac = 31;
    if (has_input_width_cmac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_width_cmac());
    }

    // required uint32 input_height_cmac = 32;
    if (has_input_height_cmac()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->input_height_cmac());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 bytes_per_kernel = 33;
    if (has_bytes_per_kernel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_per_kernel());
    }

    // required int32 mean_ry = 34;
    if (has_mean_ry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_ry());
    }

    // required int32 mean_gu = 35;
    if (has_mean_gu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_gu());
    }

    // required int32 mean_bv = 36;
    if (has_mean_bv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_bv());
    }

    // required int32 mean_ax = 37;
    if (has_mean_ax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_ax());
    }

    // required .nvdla_prototest_interface.MeanFormat mean_format = 38;
    if (has_mean_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mean_format());
    }

    // required uint32 conv_stride_x = 39;
    if (has_conv_stride_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conv_stride_x());
    }

    // required uint32 conv_stride_y = 40;
    if (has_conv_stride_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conv_stride_y());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 pad_x_left = 41;
    if (has_pad_x_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_x_left());
    }

    // required uint32 pad_x_right = 42;
    if (has_pad_x_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_x_right());
    }

    // required uint32 pad_y_top = 43;
    if (has_pad_y_top()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_y_top());
    }

    // required uint32 pad_y_bottom = 44;
    if (has_pad_y_bottom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_y_bottom());
    }

    // required uint32 dilation_x = 45;
    if (has_dilation_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dilation_x());
    }

    // required uint32 dilation_y = 46;
    if (has_dilation_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dilation_y());
    }

    // required uint32 pra_truncate = 48;
    if (has_pra_truncate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pra_truncate());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required .nvdla_prototest_interface.DataPrecision in_precision = 49;
    if (has_in_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_precision());
    }

    // required .nvdla_prototest_interface.DataPrecision out_precision = 50;
    if (has_out_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_precision());
    }

    // required int32 pad_val = 51;
    if (has_pad_val()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pad_val());
    }

    // required .nvdla_prototest_interface.CVTParam in_cvt = 52;
    if (has_in_cvt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->in_cvt());
    }

    // required .nvdla_prototest_interface.CVTParam out_cvt = 53;
    if (has_out_cvt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->out_cvt());
    }

  }
  // repeated uint32 reserved2 = 47 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->reserved2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reserved2(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reserved2_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CONVOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CONVOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CONVOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CONVOpDesc::MergeFrom(const CONVOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  reserved2_.MergeFrom(from.reserved2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conv_mode()) {
      set_conv_mode(from.conv_mode());
    }
    if (from.has_data_reuse()) {
      set_data_reuse(from.data_reuse());
    }
    if (from.has_weight_reuse()) {
      set_weight_reuse(from.weight_reuse());
    }
    if (from.has_skip_data_rls()) {
      set_skip_data_rls(from.skip_data_rls());
    }
    if (from.has_skip_weight_rls()) {
      set_skip_weight_rls(from.skip_weight_rls());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
    if (from.has_entry_per_slice()) {
      set_entry_per_slice(from.entry_per_slice());
    }
    if (from.has_data_format()) {
      set_data_format(from.data_format());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pixel_mapping()) {
      set_pixel_mapping(from.pixel_mapping());
    }
    if (from.has_fetch_grain()) {
      set_fetch_grain(from.fetch_grain());
    }
    if (from.has_pixel_offset_x()) {
      set_pixel_offset_x(from.pixel_offset_x());
    }
    if (from.has_pixel_offset_y()) {
      set_pixel_offset_y(from.pixel_offset_y());
    }
    if (from.has_gob_per_line()) {
      set_gob_per_line(from.gob_per_line());
    }
    if (from.has_gob_height()) {
      set_gob_height(from.gob_height());
    }
    if (from.has_gob_y_index()) {
      set_gob_y_index(from.gob_y_index());
    }
    if (from.has_gob_per_uv_line()) {
      set_gob_per_uv_line(from.gob_per_uv_line());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_batch()) {
      set_batch(from.batch());
    }
    if (from.has_weight_format()) {
      set_weight_format(from.weight_format());
    }
    if (from.has_data_bank()) {
      set_data_bank(from.data_bank());
    }
    if (from.has_weight_bank()) {
      set_weight_bank(from.weight_bank());
    }
    if (from.has_batch_stride()) {
      set_batch_stride(from.batch_stride());
    }
    if (from.has_post_extension()) {
      set_post_extension(from.post_extension());
    }
    if (from.has_pixel_override()) {
      set_pixel_override(from.pixel_override());
    }
    if (from.has_release()) {
      set_release(from.release());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_input_width_csc()) {
      set_input_width_csc(from.input_width_csc());
    }
    if (from.has_input_height_csc()) {
      set_input_height_csc(from.input_height_csc());
    }
    if (from.has_input_channel_csc()) {
      set_input_channel_csc(from.input_channel_csc());
    }
    if (from.has_kernel_width_csc()) {
      set_kernel_width_csc(from.kernel_width_csc());
    }
    if (from.has_kernel_height_csc()) {
      set_kernel_height_csc(from.kernel_height_csc());
    }
    if (from.has_kernel_channel_csc()) {
      set_kernel_channel_csc(from.kernel_channel_csc());
    }
    if (from.has_input_width_cmac()) {
      set_input_width_cmac(from.input_width_cmac());
    }
    if (from.has_input_height_cmac()) {
      set_input_height_cmac(from.input_height_cmac());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bytes_per_kernel()) {
      set_bytes_per_kernel(from.bytes_per_kernel());
    }
    if (from.has_mean_ry()) {
      set_mean_ry(from.mean_ry());
    }
    if (from.has_mean_gu()) {
      set_mean_gu(from.mean_gu());
    }
    if (from.has_mean_bv()) {
      set_mean_bv(from.mean_bv());
    }
    if (from.has_mean_ax()) {
      set_mean_ax(from.mean_ax());
    }
    if (from.has_mean_format()) {
      set_mean_format(from.mean_format());
    }
    if (from.has_conv_stride_x()) {
      set_conv_stride_x(from.conv_stride_x());
    }
    if (from.has_conv_stride_y()) {
      set_conv_stride_y(from.conv_stride_y());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_pad_x_left()) {
      set_pad_x_left(from.pad_x_left());
    }
    if (from.has_pad_x_right()) {
      set_pad_x_right(from.pad_x_right());
    }
    if (from.has_pad_y_top()) {
      set_pad_y_top(from.pad_y_top());
    }
    if (from.has_pad_y_bottom()) {
      set_pad_y_bottom(from.pad_y_bottom());
    }
    if (from.has_dilation_x()) {
      set_dilation_x(from.dilation_x());
    }
    if (from.has_dilation_y()) {
      set_dilation_y(from.dilation_y());
    }
    if (from.has_pra_truncate()) {
      set_pra_truncate(from.pra_truncate());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_in_precision()) {
      set_in_precision(from.in_precision());
    }
    if (from.has_out_precision()) {
      set_out_precision(from.out_precision());
    }
    if (from.has_pad_val()) {
      set_pad_val(from.pad_val());
    }
    if (from.has_in_cvt()) {
      mutable_in_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.in_cvt());
    }
    if (from.has_out_cvt()) {
      mutable_out_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.out_cvt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CONVOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CONVOpDesc::CopyFrom(const CONVOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CONVOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0xffbfffdf) != 0xffbfffdf) return false;
  if ((_has_bits_[1] & 0x001fbfff) != 0x001fbfff) return false;

  if (has_in_cvt()) {
    if (!this->in_cvt().IsInitialized()) return false;
  }
  if (has_out_cvt()) {
    if (!this->out_cvt().IsInitialized()) return false;
  }
  return true;
}

void CONVOpDesc::Swap(CONVOpDesc* other) {
  if (other != this) {
    std::swap(conv_mode_, other->conv_mode_);
    std::swap(data_reuse_, other->data_reuse_);
    std::swap(weight_reuse_, other->weight_reuse_);
    std::swap(skip_data_rls_, other->skip_data_rls_);
    std::swap(skip_weight_rls_, other->skip_weight_rls_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(entry_per_slice_, other->entry_per_slice_);
    std::swap(data_format_, other->data_format_);
    std::swap(pixel_mapping_, other->pixel_mapping_);
    std::swap(fetch_grain_, other->fetch_grain_);
    std::swap(pixel_offset_x_, other->pixel_offset_x_);
    std::swap(pixel_offset_y_, other->pixel_offset_y_);
    std::swap(gob_per_line_, other->gob_per_line_);
    std::swap(gob_height_, other->gob_height_);
    std::swap(gob_y_index_, other->gob_y_index_);
    std::swap(gob_per_uv_line_, other->gob_per_uv_line_);
    std::swap(batch_, other->batch_);
    std::swap(weight_format_, other->weight_format_);
    std::swap(data_bank_, other->data_bank_);
    std::swap(weight_bank_, other->weight_bank_);
    std::swap(batch_stride_, other->batch_stride_);
    std::swap(post_extension_, other->post_extension_);
    std::swap(pixel_override_, other->pixel_override_);
    std::swap(release_, other->release_);
    std::swap(input_width_csc_, other->input_width_csc_);
    std::swap(input_height_csc_, other->input_height_csc_);
    std::swap(input_channel_csc_, other->input_channel_csc_);
    std::swap(kernel_width_csc_, other->kernel_width_csc_);
    std::swap(kernel_height_csc_, other->kernel_height_csc_);
    std::swap(kernel_channel_csc_, other->kernel_channel_csc_);
    std::swap(input_width_cmac_, other->input_width_cmac_);
    std::swap(input_height_cmac_, other->input_height_cmac_);
    std::swap(bytes_per_kernel_, other->bytes_per_kernel_);
    std::swap(mean_ry_, other->mean_ry_);
    std::swap(mean_gu_, other->mean_gu_);
    std::swap(mean_bv_, other->mean_bv_);
    std::swap(mean_ax_, other->mean_ax_);
    std::swap(mean_format_, other->mean_format_);
    std::swap(conv_stride_x_, other->conv_stride_x_);
    std::swap(conv_stride_y_, other->conv_stride_y_);
    std::swap(pad_x_left_, other->pad_x_left_);
    std::swap(pad_x_right_, other->pad_x_right_);
    std::swap(pad_y_top_, other->pad_y_top_);
    std::swap(pad_y_bottom_, other->pad_y_bottom_);
    std::swap(dilation_x_, other->dilation_x_);
    std::swap(dilation_y_, other->dilation_y_);
    reserved2_.Swap(&other->reserved2_);
    std::swap(pra_truncate_, other->pra_truncate_);
    std::swap(in_precision_, other->in_precision_);
    std::swap(out_precision_, other->out_precision_);
    std::swap(pad_val_, other->pad_val_);
    std::swap(in_cvt_, other->in_cvt_);
    std::swap(out_cvt_, other->out_cvt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CONVOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CONVOpDesc_descriptor_;
  metadata.reflection = CONVOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SDPCvt::kAluCvtFieldNumber;
const int SDPCvt::kMulCvtFieldNumber;
#endif  // !_MSC_VER

SDPCvt::SDPCvt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SDPCvt)
}

void SDPCvt::InitAsDefaultInstance() {
  alu_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
  mul_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
}

SDPCvt::SDPCvt(const SDPCvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SDPCvt)
}

void SDPCvt::SharedCtor() {
  _cached_size_ = 0;
  alu_cvt_ = NULL;
  mul_cvt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDPCvt::~SDPCvt() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SDPCvt)
  SharedDtor();
}

void SDPCvt::SharedDtor() {
  if (this != default_instance_) {
    delete alu_cvt_;
    delete mul_cvt_;
  }
}

void SDPCvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDPCvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPCvt_descriptor_;
}

const SDPCvt& SDPCvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SDPCvt* SDPCvt::default_instance_ = NULL;

SDPCvt* SDPCvt::New() const {
  return new SDPCvt;
}

void SDPCvt::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_alu_cvt()) {
      if (alu_cvt_ != NULL) alu_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
    if (has_mul_cvt()) {
      if (mul_cvt_ != NULL) mul_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDPCvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SDPCvt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.CVTParam alu_cvt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alu_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mul_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam mul_cvt = 2;
      case 2: {
        if (tag == 18) {
         parse_mul_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mul_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SDPCvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SDPCvt)
  return false;
#undef DO_
}

void SDPCvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SDPCvt)
  // required .nvdla_prototest_interface.CVTParam alu_cvt = 1;
  if (has_alu_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alu_cvt(), output);
  }

  // required .nvdla_prototest_interface.CVTParam mul_cvt = 2;
  if (has_mul_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mul_cvt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SDPCvt)
}

::google::protobuf::uint8* SDPCvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SDPCvt)
  // required .nvdla_prototest_interface.CVTParam alu_cvt = 1;
  if (has_alu_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alu_cvt(), target);
  }

  // required .nvdla_prototest_interface.CVTParam mul_cvt = 2;
  if (has_mul_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mul_cvt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SDPCvt)
  return target;
}

int SDPCvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.CVTParam alu_cvt = 1;
    if (has_alu_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alu_cvt());
    }

    // required .nvdla_prototest_interface.CVTParam mul_cvt = 2;
    if (has_mul_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mul_cvt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDPCvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDPCvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDPCvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDPCvt::MergeFrom(const SDPCvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alu_cvt()) {
      mutable_alu_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.alu_cvt());
    }
    if (from.has_mul_cvt()) {
      mutable_mul_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.mul_cvt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDPCvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDPCvt::CopyFrom(const SDPCvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDPCvt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_alu_cvt()) {
    if (!this->alu_cvt().IsInitialized()) return false;
  }
  if (has_mul_cvt()) {
    if (!this->mul_cvt().IsInitialized()) return false;
  }
  return true;
}

void SDPCvt::Swap(SDPCvt* other) {
  if (other != this) {
    std::swap(alu_cvt_, other->alu_cvt_);
    std::swap(mul_cvt_, other->mul_cvt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDPCvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDPCvt_descriptor_;
  metadata.reflection = SDPCvt_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SDPOp_SDPOpMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPOp_SDPOpMode_descriptor_;
}
bool SDPOp_SDPOpMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SDPOp_SDPOpMode SDPOp::SDP_OP_PER_LAYER;
const SDPOp_SDPOpMode SDPOp::SDP_OP_PER_KERNEL;
const SDPOp_SDPOpMode SDPOp::SDP_OP_PER_POINT;
const SDPOp_SDPOpMode SDPOp::SDPOpMode_MIN;
const SDPOp_SDPOpMode SDPOp::SDPOpMode_MAX;
const int SDPOp::SDPOpMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SDPOp::kEnableFieldNumber;
const int SDPOp::kAluTypeFieldNumber;
const int SDPOp::kTypeFieldNumber;
const int SDPOp::kModeFieldNumber;
const int SDPOp::kActFieldNumber;
const int SDPOp::kShiftValueFieldNumber;
const int SDPOp::kTruncateFieldNumber;
const int SDPOp::kPrecisionFieldNumber;
const int SDPOp::kAluOperandFieldNumber;
const int SDPOp::kMulOperandFieldNumber;
const int SDPOp::kCvtFieldNumber;
#endif  // !_MSC_VER

SDPOp::SDPOp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SDPOp)
}

void SDPOp::InitAsDefaultInstance() {
  cvt_ = const_cast< ::nvdla_prototest_interface::SDPCvt*>(&::nvdla_prototest_interface::SDPCvt::default_instance());
}

SDPOp::SDPOp(const SDPOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SDPOp)
}

void SDPOp::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0u;
  alu_type_ = 0;
  type_ = 0;
  mode_ = 0;
  act_ = 0;
  shift_value_ = 0u;
  truncate_ = 0u;
  precision_ = 0;
  alu_operand_ = 0;
  mul_operand_ = 0;
  cvt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDPOp::~SDPOp() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SDPOp)
  SharedDtor();
}

void SDPOp::SharedDtor() {
  if (this != default_instance_) {
    delete cvt_;
  }
}

void SDPOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDPOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPOp_descriptor_;
}

const SDPOp& SDPOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SDPOp* SDPOp::default_instance_ = NULL;

SDPOp* SDPOp::New() const {
  return new SDPOp;
}

void SDPOp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SDPOp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(enable_, precision_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(alu_operand_, mul_operand_);
    if (has_cvt()) {
      if (cvt_ != NULL) cvt_->::nvdla_prototest_interface::SDPCvt::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDPOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SDPOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_alu_type;
        break;
      }

      // required .nvdla_prototest_interface.ALUType alu_type = 2;
      case 2: {
        if (tag == 16) {
         parse_alu_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::ALUType_IsValid(value)) {
            set_alu_type(static_cast< ::nvdla_prototest_interface::ALUType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .nvdla_prototest_interface.SDPOpType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::SDPOpType_IsValid(value)) {
            set_type(static_cast< ::nvdla_prototest_interface::SDPOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // required .nvdla_prototest_interface.SDPOp.SDPOpMode mode = 4;
      case 4: {
        if (tag == 32) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::SDPOp_SDPOpMode_IsValid(value)) {
            set_mode(static_cast< ::nvdla_prototest_interface::SDPOp_SDPOpMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_act;
        break;
      }

      // required .nvdla_prototest_interface.SDPActivation act = 5;
      case 5: {
        if (tag == 40) {
         parse_act:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::SDPActivation_IsValid(value)) {
            set_act(static_cast< ::nvdla_prototest_interface::SDPActivation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shift_value;
        break;
      }

      // required uint32 shift_value = 6;
      case 6: {
        if (tag == 48) {
         parse_shift_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shift_value_)));
          set_has_shift_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_truncate;
        break;
      }

      // required uint32 truncate = 7;
      case 7: {
        if (tag == 56) {
         parse_truncate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &truncate_)));
          set_has_truncate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision precision = 8;
      case 8: {
        if (tag == 64) {
         parse_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_alu_operand;
        break;
      }

      // required int32 alu_operand = 9;
      case 9: {
        if (tag == 72) {
         parse_alu_operand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alu_operand_)));
          set_has_alu_operand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mul_operand;
        break;
      }

      // required int32 mul_operand = 10;
      case 10: {
        if (tag == 80) {
         parse_mul_operand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mul_operand_)));
          set_has_mul_operand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cvt;
        break;
      }

      // required .nvdla_prototest_interface.SDPCvt cvt = 11;
      case 11: {
        if (tag == 90) {
         parse_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SDPOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SDPOp)
  return false;
#undef DO_
}

void SDPOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SDPOp)
  // required uint32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enable(), output);
  }

  // required .nvdla_prototest_interface.ALUType alu_type = 2;
  if (has_alu_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->alu_type(), output);
  }

  // required .nvdla_prototest_interface.SDPOpType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required .nvdla_prototest_interface.SDPOp.SDPOpMode mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // required .nvdla_prototest_interface.SDPActivation act = 5;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->act(), output);
  }

  // required uint32 shift_value = 6;
  if (has_shift_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shift_value(), output);
  }

  // required uint32 truncate = 7;
  if (has_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->truncate(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 8;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->precision(), output);
  }

  // required int32 alu_operand = 9;
  if (has_alu_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->alu_operand(), output);
  }

  // required int32 mul_operand = 10;
  if (has_mul_operand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mul_operand(), output);
  }

  // required .nvdla_prototest_interface.SDPCvt cvt = 11;
  if (has_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->cvt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SDPOp)
}

::google::protobuf::uint8* SDPOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SDPOp)
  // required uint32 enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enable(), target);
  }

  // required .nvdla_prototest_interface.ALUType alu_type = 2;
  if (has_alu_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->alu_type(), target);
  }

  // required .nvdla_prototest_interface.SDPOpType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required .nvdla_prototest_interface.SDPOp.SDPOpMode mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // required .nvdla_prototest_interface.SDPActivation act = 5;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->act(), target);
  }

  // required uint32 shift_value = 6;
  if (has_shift_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shift_value(), target);
  }

  // required uint32 truncate = 7;
  if (has_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->truncate(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 8;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->precision(), target);
  }

  // required int32 alu_operand = 9;
  if (has_alu_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->alu_operand(), target);
  }

  // required int32 mul_operand = 10;
  if (has_mul_operand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mul_operand(), target);
  }

  // required .nvdla_prototest_interface.SDPCvt cvt = 11;
  if (has_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->cvt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SDPOp)
  return target;
}

int SDPOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }

    // required .nvdla_prototest_interface.ALUType alu_type = 2;
    if (has_alu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alu_type());
    }

    // required .nvdla_prototest_interface.SDPOpType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .nvdla_prototest_interface.SDPOp.SDPOpMode mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required .nvdla_prototest_interface.SDPActivation act = 5;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->act());
    }

    // required uint32 shift_value = 6;
    if (has_shift_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shift_value());
    }

    // required uint32 truncate = 7;
    if (has_truncate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->truncate());
    }

    // required .nvdla_prototest_interface.DataPrecision precision = 8;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 alu_operand = 9;
    if (has_alu_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alu_operand());
    }

    // required int32 mul_operand = 10;
    if (has_mul_operand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mul_operand());
    }

    // required .nvdla_prototest_interface.SDPCvt cvt = 11;
    if (has_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDPOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDPOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDPOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDPOp::MergeFrom(const SDPOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_alu_type()) {
      set_alu_type(from.alu_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_shift_value()) {
      set_shift_value(from.shift_value());
    }
    if (from.has_truncate()) {
      set_truncate(from.truncate());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alu_operand()) {
      set_alu_operand(from.alu_operand());
    }
    if (from.has_mul_operand()) {
      set_mul_operand(from.mul_operand());
    }
    if (from.has_cvt()) {
      mutable_cvt()->::nvdla_prototest_interface::SDPCvt::MergeFrom(from.cvt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDPOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDPOp::CopyFrom(const SDPOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDPOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_cvt()) {
    if (!this->cvt().IsInitialized()) return false;
  }
  return true;
}

void SDPOp::Swap(SDPOp* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(alu_type_, other->alu_type_);
    std::swap(type_, other->type_);
    std::swap(mode_, other->mode_);
    std::swap(act_, other->act_);
    std::swap(shift_value_, other->shift_value_);
    std::swap(truncate_, other->truncate_);
    std::swap(precision_, other->precision_);
    std::swap(alu_operand_, other->alu_operand_);
    std::swap(mul_operand_, other->mul_operand_);
    std::swap(cvt_, other->cvt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDPOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDPOp_descriptor_;
  metadata.reflection = SDPOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SDPSurfaceDesc::kSrcDataFieldNumber;
const int SDPSurfaceDesc::kX1DataFieldNumber;
const int SDPSurfaceDesc::kX2DataFieldNumber;
const int SDPSurfaceDesc::kYDataFieldNumber;
const int SDPSurfaceDesc::kDstDataFieldNumber;
#endif  // !_MSC_VER

SDPSurfaceDesc::SDPSurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SDPSurfaceDesc)
}

void SDPSurfaceDesc::InitAsDefaultInstance() {
  src_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  x1_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  x2_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  y_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  dst_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
}

SDPSurfaceDesc::SDPSurfaceDesc(const SDPSurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SDPSurfaceDesc)
}

void SDPSurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  src_data_ = NULL;
  x1_data_ = NULL;
  x2_data_ = NULL;
  y_data_ = NULL;
  dst_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDPSurfaceDesc::~SDPSurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SDPSurfaceDesc)
  SharedDtor();
}

void SDPSurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
    delete src_data_;
    delete x1_data_;
    delete x2_data_;
    delete y_data_;
    delete dst_data_;
  }
}

void SDPSurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDPSurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPSurfaceDesc_descriptor_;
}

const SDPSurfaceDesc& SDPSurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SDPSurfaceDesc* SDPSurfaceDesc::default_instance_ = NULL;

SDPSurfaceDesc* SDPSurfaceDesc::New() const {
  return new SDPSurfaceDesc;
}

void SDPSurfaceDesc::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_src_data()) {
      if (src_data_ != NULL) src_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_x1_data()) {
      if (x1_data_ != NULL) x1_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_x2_data()) {
      if (x2_data_ != NULL) x2_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_y_data()) {
      if (y_data_ != NULL) y_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_dst_data()) {
      if (dst_data_ != NULL) dst_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDPSurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SDPSurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataCube src_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_x1_data;
        break;
      }

      // optional .nvdla_prototest_interface.DataCube x1_data = 2;
      case 2: {
        if (tag == 18) {
         parse_x1_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x1_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_x2_data;
        break;
      }

      // optional .nvdla_prototest_interface.DataCube x2_data = 3;
      case 3: {
        if (tag == 26) {
         parse_x2_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x2_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_y_data;
        break;
      }

      // optional .nvdla_prototest_interface.DataCube y_data = 4;
      case 4: {
        if (tag == 34) {
         parse_y_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dst_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube dst_data = 5;
      case 5: {
        if (tag == 42) {
         parse_dst_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SDPSurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SDPSurfaceDesc)
  return false;
#undef DO_
}

void SDPSurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_data(), output);
  }

  // optional .nvdla_prototest_interface.DataCube x1_data = 2;
  if (has_x1_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->x1_data(), output);
  }

  // optional .nvdla_prototest_interface.DataCube x2_data = 3;
  if (has_x2_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->x2_data(), output);
  }

  // optional .nvdla_prototest_interface.DataCube y_data = 4;
  if (has_y_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->y_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 5;
  if (has_dst_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dst_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SDPSurfaceDesc)
}

::google::protobuf::uint8* SDPSurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_data(), target);
  }

  // optional .nvdla_prototest_interface.DataCube x1_data = 2;
  if (has_x1_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->x1_data(), target);
  }

  // optional .nvdla_prototest_interface.DataCube x2_data = 3;
  if (has_x2_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->x2_data(), target);
  }

  // optional .nvdla_prototest_interface.DataCube y_data = 4;
  if (has_y_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->y_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 5;
  if (has_dst_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dst_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SDPSurfaceDesc)
  return target;
}

int SDPSurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataCube src_data = 1;
    if (has_src_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_data());
    }

    // optional .nvdla_prototest_interface.DataCube x1_data = 2;
    if (has_x1_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x1_data());
    }

    // optional .nvdla_prototest_interface.DataCube x2_data = 3;
    if (has_x2_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x2_data());
    }

    // optional .nvdla_prototest_interface.DataCube y_data = 4;
    if (has_y_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y_data());
    }

    // required .nvdla_prototest_interface.DataCube dst_data = 5;
    if (has_dst_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDPSurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDPSurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDPSurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDPSurfaceDesc::MergeFrom(const SDPSurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_data()) {
      mutable_src_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.src_data());
    }
    if (from.has_x1_data()) {
      mutable_x1_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.x1_data());
    }
    if (from.has_x2_data()) {
      mutable_x2_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.x2_data());
    }
    if (from.has_y_data()) {
      mutable_y_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.y_data());
    }
    if (from.has_dst_data()) {
      mutable_dst_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.dst_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDPSurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDPSurfaceDesc::CopyFrom(const SDPSurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDPSurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (has_src_data()) {
    if (!this->src_data().IsInitialized()) return false;
  }
  if (has_x1_data()) {
    if (!this->x1_data().IsInitialized()) return false;
  }
  if (has_x2_data()) {
    if (!this->x2_data().IsInitialized()) return false;
  }
  if (has_y_data()) {
    if (!this->y_data().IsInitialized()) return false;
  }
  if (has_dst_data()) {
    if (!this->dst_data().IsInitialized()) return false;
  }
  return true;
}

void SDPSurfaceDesc::Swap(SDPSurfaceDesc* other) {
  if (other != this) {
    std::swap(src_data_, other->src_data_);
    std::swap(x1_data_, other->x1_data_);
    std::swap(x2_data_, other->x2_data_);
    std::swap(y_data_, other->y_data_);
    std::swap(dst_data_, other->dst_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDPSurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDPSurfaceDesc_descriptor_;
  metadata.reflection = SDPSurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SDPOpDesc::kSrcPrecisionFieldNumber;
const int SDPOpDesc::kDstPrecisionFieldNumber;
const int SDPOpDesc::kLutIndexFieldNumber;
const int SDPOpDesc::kOutCvtFieldNumber;
const int SDPOpDesc::kConvModeFieldNumber;
const int SDPOpDesc::kBatchNumFieldNumber;
const int SDPOpDesc::kReserved0FieldNumber;
const int SDPOpDesc::kBatchStrideFieldNumber;
const int SDPOpDesc::kX1OpFieldNumber;
const int SDPOpDesc::kX2OpFieldNumber;
const int SDPOpDesc::kYOpFieldNumber;
#endif  // !_MSC_VER

SDPOpDesc::SDPOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SDPOpDesc)
}

void SDPOpDesc::InitAsDefaultInstance() {
  out_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
  x1_op_ = const_cast< ::nvdla_prototest_interface::SDPOp*>(&::nvdla_prototest_interface::SDPOp::default_instance());
  x2_op_ = const_cast< ::nvdla_prototest_interface::SDPOp*>(&::nvdla_prototest_interface::SDPOp::default_instance());
  y_op_ = const_cast< ::nvdla_prototest_interface::SDPOp*>(&::nvdla_prototest_interface::SDPOp::default_instance());
}

SDPOpDesc::SDPOpDesc(const SDPOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SDPOpDesc)
}

void SDPOpDesc::SharedCtor() {
  _cached_size_ = 0;
  src_precision_ = 0;
  dst_precision_ = 0;
  lut_index_ = 0;
  out_cvt_ = NULL;
  conv_mode_ = 0;
  batch_num_ = 0u;
  reserved0_ = 0u;
  batch_stride_ = 0u;
  x1_op_ = NULL;
  x2_op_ = NULL;
  y_op_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDPOpDesc::~SDPOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SDPOpDesc)
  SharedDtor();
}

void SDPOpDesc::SharedDtor() {
  if (this != default_instance_) {
    delete out_cvt_;
    delete x1_op_;
    delete x2_op_;
    delete y_op_;
  }
}

void SDPOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDPOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDPOpDesc_descriptor_;
}

const SDPOpDesc& SDPOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SDPOpDesc* SDPOpDesc::default_instance_ = NULL;

SDPOpDesc* SDPOpDesc::New() const {
  return new SDPOpDesc;
}

void SDPOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SDPOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(src_precision_, dst_precision_);
    ZR_(lut_index_, reserved0_);
    if (has_out_cvt()) {
      if (out_cvt_ != NULL) out_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
    batch_stride_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_x1_op()) {
      if (x1_op_ != NULL) x1_op_->::nvdla_prototest_interface::SDPOp::Clear();
    }
    if (has_x2_op()) {
      if (x2_op_ != NULL) x2_op_->::nvdla_prototest_interface::SDPOp::Clear();
    }
    if (has_y_op()) {
      if (y_op_ != NULL) y_op_->::nvdla_prototest_interface::SDPOp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SDPOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SDPOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataPrecision src_precision = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_src_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision dst_precision = 2;
      case 2: {
        if (tag == 16) {
         parse_dst_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_dst_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lut_index;
        break;
      }

      // required int32 lut_index = 3;
      case 3: {
        if (tag == 24) {
         parse_lut_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lut_index_)));
          set_has_lut_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam out_cvt = 4;
      case 4: {
        if (tag == 34) {
         parse_out_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conv_mode;
        break;
      }

      // required .nvdla_prototest_interface.ConvMode conv_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_conv_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::ConvMode_IsValid(value)) {
            set_conv_mode(static_cast< ::nvdla_prototest_interface::ConvMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_batch_num;
        break;
      }

      // required uint32 batch_num = 6;
      case 6: {
        if (tag == 48) {
         parse_batch_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_num_)));
          set_has_batch_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_batch_stride;
        break;
      }

      // required uint32 batch_stride = 8;
      case 8: {
        if (tag == 64) {
         parse_batch_stride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_stride_)));
          set_has_batch_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_x1_op;
        break;
      }

      // required .nvdla_prototest_interface.SDPOp x1_op = 9;
      case 9: {
        if (tag == 74) {
         parse_x1_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x1_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_x2_op;
        break;
      }

      // required .nvdla_prototest_interface.SDPOp x2_op = 10;
      case 10: {
        if (tag == 82) {
         parse_x2_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x2_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_y_op;
        break;
      }

      // required .nvdla_prototest_interface.SDPOp y_op = 11;
      case 11: {
        if (tag == 90) {
         parse_y_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SDPOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SDPOpDesc)
  return false;
#undef DO_
}

void SDPOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SDPOpDesc)
  // required .nvdla_prototest_interface.DataPrecision src_precision = 1;
  if (has_src_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_precision(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision dst_precision = 2;
  if (has_dst_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dst_precision(), output);
  }

  // required int32 lut_index = 3;
  if (has_lut_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lut_index(), output);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 4;
  if (has_out_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->out_cvt(), output);
  }

  // required .nvdla_prototest_interface.ConvMode conv_mode = 5;
  if (has_conv_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->conv_mode(), output);
  }

  // required uint32 batch_num = 6;
  if (has_batch_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->batch_num(), output);
  }

  // optional uint32 reserved0 = 7 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reserved0(), output);
  }

  // required uint32 batch_stride = 8;
  if (has_batch_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->batch_stride(), output);
  }

  // required .nvdla_prototest_interface.SDPOp x1_op = 9;
  if (has_x1_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->x1_op(), output);
  }

  // required .nvdla_prototest_interface.SDPOp x2_op = 10;
  if (has_x2_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->x2_op(), output);
  }

  // required .nvdla_prototest_interface.SDPOp y_op = 11;
  if (has_y_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->y_op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SDPOpDesc)
}

::google::protobuf::uint8* SDPOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SDPOpDesc)
  // required .nvdla_prototest_interface.DataPrecision src_precision = 1;
  if (has_src_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_precision(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision dst_precision = 2;
  if (has_dst_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dst_precision(), target);
  }

  // required int32 lut_index = 3;
  if (has_lut_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lut_index(), target);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 4;
  if (has_out_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->out_cvt(), target);
  }

  // required .nvdla_prototest_interface.ConvMode conv_mode = 5;
  if (has_conv_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->conv_mode(), target);
  }

  // required uint32 batch_num = 6;
  if (has_batch_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->batch_num(), target);
  }

  // optional uint32 reserved0 = 7 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reserved0(), target);
  }

  // required uint32 batch_stride = 8;
  if (has_batch_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->batch_stride(), target);
  }

  // required .nvdla_prototest_interface.SDPOp x1_op = 9;
  if (has_x1_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->x1_op(), target);
  }

  // required .nvdla_prototest_interface.SDPOp x2_op = 10;
  if (has_x2_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->x2_op(), target);
  }

  // required .nvdla_prototest_interface.SDPOp y_op = 11;
  if (has_y_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->y_op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SDPOpDesc)
  return target;
}

int SDPOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataPrecision src_precision = 1;
    if (has_src_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_precision());
    }

    // required .nvdla_prototest_interface.DataPrecision dst_precision = 2;
    if (has_dst_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_precision());
    }

    // required int32 lut_index = 3;
    if (has_lut_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lut_index());
    }

    // required .nvdla_prototest_interface.CVTParam out_cvt = 4;
    if (has_out_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->out_cvt());
    }

    // required .nvdla_prototest_interface.ConvMode conv_mode = 5;
    if (has_conv_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->conv_mode());
    }

    // required uint32 batch_num = 6;
    if (has_batch_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_num());
    }

    // optional uint32 reserved0 = 7 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

    // required uint32 batch_stride = 8;
    if (has_batch_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_stride());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .nvdla_prototest_interface.SDPOp x1_op = 9;
    if (has_x1_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x1_op());
    }

    // required .nvdla_prototest_interface.SDPOp x2_op = 10;
    if (has_x2_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x2_op());
    }

    // required .nvdla_prototest_interface.SDPOp y_op = 11;
    if (has_y_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y_op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDPOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SDPOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SDPOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SDPOpDesc::MergeFrom(const SDPOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_precision()) {
      set_src_precision(from.src_precision());
    }
    if (from.has_dst_precision()) {
      set_dst_precision(from.dst_precision());
    }
    if (from.has_lut_index()) {
      set_lut_index(from.lut_index());
    }
    if (from.has_out_cvt()) {
      mutable_out_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.out_cvt());
    }
    if (from.has_conv_mode()) {
      set_conv_mode(from.conv_mode());
    }
    if (from.has_batch_num()) {
      set_batch_num(from.batch_num());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
    if (from.has_batch_stride()) {
      set_batch_stride(from.batch_stride());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x1_op()) {
      mutable_x1_op()->::nvdla_prototest_interface::SDPOp::MergeFrom(from.x1_op());
    }
    if (from.has_x2_op()) {
      mutable_x2_op()->::nvdla_prototest_interface::SDPOp::MergeFrom(from.x2_op());
    }
    if (from.has_y_op()) {
      mutable_y_op()->::nvdla_prototest_interface::SDPOp::MergeFrom(from.y_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SDPOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDPOpDesc::CopyFrom(const SDPOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDPOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007bf) != 0x000007bf) return false;

  if (has_out_cvt()) {
    if (!this->out_cvt().IsInitialized()) return false;
  }
  if (has_x1_op()) {
    if (!this->x1_op().IsInitialized()) return false;
  }
  if (has_x2_op()) {
    if (!this->x2_op().IsInitialized()) return false;
  }
  if (has_y_op()) {
    if (!this->y_op().IsInitialized()) return false;
  }
  return true;
}

void SDPOpDesc::Swap(SDPOpDesc* other) {
  if (other != this) {
    std::swap(src_precision_, other->src_precision_);
    std::swap(dst_precision_, other->dst_precision_);
    std::swap(lut_index_, other->lut_index_);
    std::swap(out_cvt_, other->out_cvt_);
    std::swap(conv_mode_, other->conv_mode_);
    std::swap(batch_num_, other->batch_num_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(batch_stride_, other->batch_stride_);
    std::swap(x1_op_, other->x1_op_);
    std::swap(x2_op_, other->x2_op_);
    std::swap(y_op_, other->y_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SDPOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDPOpDesc_descriptor_;
  metadata.reflection = SDPOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PDPSurfaceDesc::kSrcDataFieldNumber;
const int PDPSurfaceDesc::kDstDataFieldNumber;
#endif  // !_MSC_VER

PDPSurfaceDesc::PDPSurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.PDPSurfaceDesc)
}

void PDPSurfaceDesc::InitAsDefaultInstance() {
  src_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  dst_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
}

PDPSurfaceDesc::PDPSurfaceDesc(const PDPSurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.PDPSurfaceDesc)
}

void PDPSurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  src_data_ = NULL;
  dst_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDPSurfaceDesc::~PDPSurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.PDPSurfaceDesc)
  SharedDtor();
}

void PDPSurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
    delete src_data_;
    delete dst_data_;
  }
}

void PDPSurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDPSurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDPSurfaceDesc_descriptor_;
}

const PDPSurfaceDesc& PDPSurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

PDPSurfaceDesc* PDPSurfaceDesc::default_instance_ = NULL;

PDPSurfaceDesc* PDPSurfaceDesc::New() const {
  return new PDPSurfaceDesc;
}

void PDPSurfaceDesc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_src_data()) {
      if (src_data_ != NULL) src_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_dst_data()) {
      if (dst_data_ != NULL) dst_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDPSurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.PDPSurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataCube src_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube dst_data = 2;
      case 2: {
        if (tag == 18) {
         parse_dst_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.PDPSurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.PDPSurfaceDesc)
  return false;
#undef DO_
}

void PDPSurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.PDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.PDPSurfaceDesc)
}

::google::protobuf::uint8* PDPSurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.PDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.PDPSurfaceDesc)
  return target;
}

int PDPSurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataCube src_data = 1;
    if (has_src_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_data());
    }

    // required .nvdla_prototest_interface.DataCube dst_data = 2;
    if (has_dst_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDPSurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDPSurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDPSurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDPSurfaceDesc::MergeFrom(const PDPSurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_data()) {
      mutable_src_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.src_data());
    }
    if (from.has_dst_data()) {
      mutable_dst_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.dst_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDPSurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDPSurfaceDesc::CopyFrom(const PDPSurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDPSurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src_data()) {
    if (!this->src_data().IsInitialized()) return false;
  }
  if (has_dst_data()) {
    if (!this->dst_data().IsInitialized()) return false;
  }
  return true;
}

void PDPSurfaceDesc::Swap(PDPSurfaceDesc* other) {
  if (other != this) {
    std::swap(src_data_, other->src_data_);
    std::swap(dst_data_, other->dst_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDPSurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDPSurfaceDesc_descriptor_;
  metadata.reflection = PDPSurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PDPOpDesc_PoolingMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDPOpDesc_PoolingMode_descriptor_;
}
bool PDPOpDesc_PoolingMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PDPOpDesc_PoolingMode PDPOpDesc::MODE_AVG;
const PDPOpDesc_PoolingMode PDPOpDesc::MODE_MAX;
const PDPOpDesc_PoolingMode PDPOpDesc::MODE_MIN;
const PDPOpDesc_PoolingMode PDPOpDesc::PoolingMode_MIN;
const PDPOpDesc_PoolingMode PDPOpDesc::PoolingMode_MAX;
const int PDPOpDesc::PoolingMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PDPOpDesc::kPartialInWidthFirstFieldNumber;
const int PDPOpDesc::kPartialInWidthMidFieldNumber;
const int PDPOpDesc::kPartialInWidthLastFieldNumber;
const int PDPOpDesc::kPartialWidthFirstFieldNumber;
const int PDPOpDesc::kPartialWidthMidFieldNumber;
const int PDPOpDesc::kPartialWidthLastFieldNumber;
const int PDPOpDesc::kSplitNumFieldNumber;
const int PDPOpDesc::kPoolModeFieldNumber;
const int PDPOpDesc::kPoolWidthFieldNumber;
const int PDPOpDesc::kPoolHeightFieldNumber;
const int PDPOpDesc::kStrideXFieldNumber;
const int PDPOpDesc::kStrideYFieldNumber;
const int PDPOpDesc::kPadLeftFieldNumber;
const int PDPOpDesc::kPadRightFieldNumber;
const int PDPOpDesc::kPadTopFieldNumber;
const int PDPOpDesc::kPadBottomFieldNumber;
const int PDPOpDesc::kPrecisionFieldNumber;
const int PDPOpDesc::kReserved0FieldNumber;
const int PDPOpDesc::kPaddingValueFieldNumber;
#endif  // !_MSC_VER

PDPOpDesc::PDPOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.PDPOpDesc)
}

void PDPOpDesc::InitAsDefaultInstance() {
}

PDPOpDesc::PDPOpDesc(const PDPOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.PDPOpDesc)
}

void PDPOpDesc::SharedCtor() {
  _cached_size_ = 0;
  partial_in_width_first_ = 0u;
  partial_in_width_mid_ = 0u;
  partial_in_width_last_ = 0u;
  partial_width_first_ = 0u;
  partial_width_mid_ = 0u;
  partial_width_last_ = 0u;
  split_num_ = 0u;
  pool_mode_ = 0;
  pool_width_ = 0;
  pool_height_ = 0;
  stride_x_ = 0u;
  stride_y_ = 0u;
  pad_left_ = 0u;
  pad_right_ = 0u;
  pad_top_ = 0u;
  pad_bottom_ = 0u;
  precision_ = 0;
  reserved0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDPOpDesc::~PDPOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.PDPOpDesc)
  SharedDtor();
}

void PDPOpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PDPOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDPOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PDPOpDesc_descriptor_;
}

const PDPOpDesc& PDPOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

PDPOpDesc* PDPOpDesc::default_instance_ = NULL;

PDPOpDesc* PDPOpDesc::New() const {
  return new PDPOpDesc;
}

void PDPOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PDPOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(partial_in_width_first_, pool_mode_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pool_width_, pad_bottom_);
  }
  ZR_(precision_, reserved0_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  padding_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PDPOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.PDPOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 partial_in_width_first = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_in_width_first_)));
          set_has_partial_in_width_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partial_in_width_mid;
        break;
      }

      // required uint32 partial_in_width_mid = 2;
      case 2: {
        if (tag == 16) {
         parse_partial_in_width_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_in_width_mid_)));
          set_has_partial_in_width_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partial_in_width_last;
        break;
      }

      // required uint32 partial_in_width_last = 3;
      case 3: {
        if (tag == 24) {
         parse_partial_in_width_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_in_width_last_)));
          set_has_partial_in_width_last();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_partial_width_first;
        break;
      }

      // required uint32 partial_width_first = 4;
      case 4: {
        if (tag == 32) {
         parse_partial_width_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_width_first_)));
          set_has_partial_width_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_partial_width_mid;
        break;
      }

      // required uint32 partial_width_mid = 5;
      case 5: {
        if (tag == 40) {
         parse_partial_width_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_width_mid_)));
          set_has_partial_width_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_partial_width_last;
        break;
      }

      // required uint32 partial_width_last = 6;
      case 6: {
        if (tag == 48) {
         parse_partial_width_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_width_last_)));
          set_has_partial_width_last();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_split_num;
        break;
      }

      // required uint32 split_num = 7;
      case 7: {
        if (tag == 56) {
         parse_split_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_num_)));
          set_has_split_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pool_mode;
        break;
      }

      // required .nvdla_prototest_interface.PDPOpDesc.PoolingMode pool_mode = 8;
      case 8: {
        if (tag == 64) {
         parse_pool_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::PDPOpDesc_PoolingMode_IsValid(value)) {
            set_pool_mode(static_cast< ::nvdla_prototest_interface::PDPOpDesc_PoolingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pool_width;
        break;
      }

      // required .nvdla_prototest_interface.PoolSize pool_width = 9;
      case 9: {
        if (tag == 72) {
         parse_pool_width:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::PoolSize_IsValid(value)) {
            set_pool_width(static_cast< ::nvdla_prototest_interface::PoolSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pool_height;
        break;
      }

      // required .nvdla_prototest_interface.PoolSize pool_height = 10;
      case 10: {
        if (tag == 80) {
         parse_pool_height:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::PoolSize_IsValid(value)) {
            set_pool_height(static_cast< ::nvdla_prototest_interface::PoolSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_stride_x;
        break;
      }

      // required uint32 stride_x = 11;
      case 11: {
        if (tag == 88) {
         parse_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_x_)));
          set_has_stride_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_stride_y;
        break;
      }

      // required uint32 stride_y = 12;
      case 12: {
        if (tag == 96) {
         parse_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_y_)));
          set_has_stride_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_pad_left;
        break;
      }

      // required uint32 pad_left = 13;
      case 13: {
        if (tag == 104) {
         parse_pad_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_left_)));
          set_has_pad_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pad_right;
        break;
      }

      // required uint32 pad_right = 14;
      case 14: {
        if (tag == 112) {
         parse_pad_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_right_)));
          set_has_pad_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_pad_top;
        break;
      }

      // required uint32 pad_top = 15;
      case 15: {
        if (tag == 120) {
         parse_pad_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_top_)));
          set_has_pad_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_pad_bottom;
        break;
      }

      // required uint32 pad_bottom = 16;
      case 16: {
        if (tag == 128) {
         parse_pad_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pad_bottom_)));
          set_has_pad_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision precision = 17;
      case 17: {
        if (tag == 136) {
         parse_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 18 [default = 0];
      case 18: {
        if (tag == 144) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_padding_value;
        break;
      }

      // repeated int32 padding_value = 19 [packed = true];
      case 19: {
        if (tag == 154) {
         parse_padding_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_padding_value())));
        } else if (tag == 152) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 154, input, this->mutable_padding_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.PDPOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.PDPOpDesc)
  return false;
#undef DO_
}

void PDPOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.PDPOpDesc)
  // required uint32 partial_in_width_first = 1;
  if (has_partial_in_width_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partial_in_width_first(), output);
  }

  // required uint32 partial_in_width_mid = 2;
  if (has_partial_in_width_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->partial_in_width_mid(), output);
  }

  // required uint32 partial_in_width_last = 3;
  if (has_partial_in_width_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->partial_in_width_last(), output);
  }

  // required uint32 partial_width_first = 4;
  if (has_partial_width_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->partial_width_first(), output);
  }

  // required uint32 partial_width_mid = 5;
  if (has_partial_width_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partial_width_mid(), output);
  }

  // required uint32 partial_width_last = 6;
  if (has_partial_width_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->partial_width_last(), output);
  }

  // required uint32 split_num = 7;
  if (has_split_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->split_num(), output);
  }

  // required .nvdla_prototest_interface.PDPOpDesc.PoolingMode pool_mode = 8;
  if (has_pool_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pool_mode(), output);
  }

  // required .nvdla_prototest_interface.PoolSize pool_width = 9;
  if (has_pool_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pool_width(), output);
  }

  // required .nvdla_prototest_interface.PoolSize pool_height = 10;
  if (has_pool_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->pool_height(), output);
  }

  // required uint32 stride_x = 11;
  if (has_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->stride_x(), output);
  }

  // required uint32 stride_y = 12;
  if (has_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stride_y(), output);
  }

  // required uint32 pad_left = 13;
  if (has_pad_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pad_left(), output);
  }

  // required uint32 pad_right = 14;
  if (has_pad_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pad_right(), output);
  }

  // required uint32 pad_top = 15;
  if (has_pad_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pad_top(), output);
  }

  // required uint32 pad_bottom = 16;
  if (has_pad_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pad_bottom(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 17;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->precision(), output);
  }

  // optional uint32 reserved0 = 18 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->reserved0(), output);
  }

  // repeated int32 padding_value = 19 [packed = true];
  if (this->padding_value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_padding_value_cached_byte_size_);
  }
  for (int i = 0; i < this->padding_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->padding_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.PDPOpDesc)
}

::google::protobuf::uint8* PDPOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.PDPOpDesc)
  // required uint32 partial_in_width_first = 1;
  if (has_partial_in_width_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partial_in_width_first(), target);
  }

  // required uint32 partial_in_width_mid = 2;
  if (has_partial_in_width_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->partial_in_width_mid(), target);
  }

  // required uint32 partial_in_width_last = 3;
  if (has_partial_in_width_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->partial_in_width_last(), target);
  }

  // required uint32 partial_width_first = 4;
  if (has_partial_width_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->partial_width_first(), target);
  }

  // required uint32 partial_width_mid = 5;
  if (has_partial_width_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partial_width_mid(), target);
  }

  // required uint32 partial_width_last = 6;
  if (has_partial_width_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->partial_width_last(), target);
  }

  // required uint32 split_num = 7;
  if (has_split_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->split_num(), target);
  }

  // required .nvdla_prototest_interface.PDPOpDesc.PoolingMode pool_mode = 8;
  if (has_pool_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pool_mode(), target);
  }

  // required .nvdla_prototest_interface.PoolSize pool_width = 9;
  if (has_pool_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pool_width(), target);
  }

  // required .nvdla_prototest_interface.PoolSize pool_height = 10;
  if (has_pool_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->pool_height(), target);
  }

  // required uint32 stride_x = 11;
  if (has_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->stride_x(), target);
  }

  // required uint32 stride_y = 12;
  if (has_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stride_y(), target);
  }

  // required uint32 pad_left = 13;
  if (has_pad_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pad_left(), target);
  }

  // required uint32 pad_right = 14;
  if (has_pad_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pad_right(), target);
  }

  // required uint32 pad_top = 15;
  if (has_pad_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pad_top(), target);
  }

  // required uint32 pad_bottom = 16;
  if (has_pad_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pad_bottom(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 17;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->precision(), target);
  }

  // optional uint32 reserved0 = 18 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->reserved0(), target);
  }

  // repeated int32 padding_value = 19 [packed = true];
  if (this->padding_value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _padding_value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->padding_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->padding_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.PDPOpDesc)
  return target;
}

int PDPOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 partial_in_width_first = 1;
    if (has_partial_in_width_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_in_width_first());
    }

    // required uint32 partial_in_width_mid = 2;
    if (has_partial_in_width_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_in_width_mid());
    }

    // required uint32 partial_in_width_last = 3;
    if (has_partial_in_width_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_in_width_last());
    }

    // required uint32 partial_width_first = 4;
    if (has_partial_width_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_width_first());
    }

    // required uint32 partial_width_mid = 5;
    if (has_partial_width_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_width_mid());
    }

    // required uint32 partial_width_last = 6;
    if (has_partial_width_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_width_last());
    }

    // required uint32 split_num = 7;
    if (has_split_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->split_num());
    }

    // required .nvdla_prototest_interface.PDPOpDesc.PoolingMode pool_mode = 8;
    if (has_pool_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool_mode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .nvdla_prototest_interface.PoolSize pool_width = 9;
    if (has_pool_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool_width());
    }

    // required .nvdla_prototest_interface.PoolSize pool_height = 10;
    if (has_pool_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pool_height());
    }

    // required uint32 stride_x = 11;
    if (has_stride_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_x());
    }

    // required uint32 stride_y = 12;
    if (has_stride_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_y());
    }

    // required uint32 pad_left = 13;
    if (has_pad_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_left());
    }

    // required uint32 pad_right = 14;
    if (has_pad_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_right());
    }

    // required uint32 pad_top = 15;
    if (has_pad_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_top());
    }

    // required uint32 pad_bottom = 16;
    if (has_pad_bottom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pad_bottom());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .nvdla_prototest_interface.DataPrecision precision = 17;
    if (has_precision()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision());
    }

    // optional uint32 reserved0 = 18 [default = 0];
    if (has_reserved0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

  }
  // repeated int32 padding_value = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->padding_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->padding_value(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _padding_value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDPOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PDPOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PDPOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PDPOpDesc::MergeFrom(const PDPOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  padding_value_.MergeFrom(from.padding_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partial_in_width_first()) {
      set_partial_in_width_first(from.partial_in_width_first());
    }
    if (from.has_partial_in_width_mid()) {
      set_partial_in_width_mid(from.partial_in_width_mid());
    }
    if (from.has_partial_in_width_last()) {
      set_partial_in_width_last(from.partial_in_width_last());
    }
    if (from.has_partial_width_first()) {
      set_partial_width_first(from.partial_width_first());
    }
    if (from.has_partial_width_mid()) {
      set_partial_width_mid(from.partial_width_mid());
    }
    if (from.has_partial_width_last()) {
      set_partial_width_last(from.partial_width_last());
    }
    if (from.has_split_num()) {
      set_split_num(from.split_num());
    }
    if (from.has_pool_mode()) {
      set_pool_mode(from.pool_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pool_width()) {
      set_pool_width(from.pool_width());
    }
    if (from.has_pool_height()) {
      set_pool_height(from.pool_height());
    }
    if (from.has_stride_x()) {
      set_stride_x(from.stride_x());
    }
    if (from.has_stride_y()) {
      set_stride_y(from.stride_y());
    }
    if (from.has_pad_left()) {
      set_pad_left(from.pad_left());
    }
    if (from.has_pad_right()) {
      set_pad_right(from.pad_right());
    }
    if (from.has_pad_top()) {
      set_pad_top(from.pad_top());
    }
    if (from.has_pad_bottom()) {
      set_pad_bottom(from.pad_bottom());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PDPOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDPOpDesc::CopyFrom(const PDPOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDPOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void PDPOpDesc::Swap(PDPOpDesc* other) {
  if (other != this) {
    std::swap(partial_in_width_first_, other->partial_in_width_first_);
    std::swap(partial_in_width_mid_, other->partial_in_width_mid_);
    std::swap(partial_in_width_last_, other->partial_in_width_last_);
    std::swap(partial_width_first_, other->partial_width_first_);
    std::swap(partial_width_mid_, other->partial_width_mid_);
    std::swap(partial_width_last_, other->partial_width_last_);
    std::swap(split_num_, other->split_num_);
    std::swap(pool_mode_, other->pool_mode_);
    std::swap(pool_width_, other->pool_width_);
    std::swap(pool_height_, other->pool_height_);
    std::swap(stride_x_, other->stride_x_);
    std::swap(stride_y_, other->stride_y_);
    std::swap(pad_left_, other->pad_left_);
    std::swap(pad_right_, other->pad_right_);
    std::swap(pad_top_, other->pad_top_);
    std::swap(pad_bottom_, other->pad_bottom_);
    std::swap(precision_, other->precision_);
    std::swap(reserved0_, other->reserved0_);
    padding_value_.Swap(&other->padding_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PDPOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PDPOpDesc_descriptor_;
  metadata.reflection = PDPOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDPSurfaceDesc::kSrcDataFieldNumber;
const int CDPSurfaceDesc::kDstDataFieldNumber;
#endif  // !_MSC_VER

CDPSurfaceDesc::CDPSurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.CDPSurfaceDesc)
}

void CDPSurfaceDesc::InitAsDefaultInstance() {
  src_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  dst_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
}

CDPSurfaceDesc::CDPSurfaceDesc(const CDPSurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.CDPSurfaceDesc)
}

void CDPSurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  src_data_ = NULL;
  dst_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDPSurfaceDesc::~CDPSurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.CDPSurfaceDesc)
  SharedDtor();
}

void CDPSurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
    delete src_data_;
    delete dst_data_;
  }
}

void CDPSurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDPSurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDPSurfaceDesc_descriptor_;
}

const CDPSurfaceDesc& CDPSurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

CDPSurfaceDesc* CDPSurfaceDesc::default_instance_ = NULL;

CDPSurfaceDesc* CDPSurfaceDesc::New() const {
  return new CDPSurfaceDesc;
}

void CDPSurfaceDesc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_src_data()) {
      if (src_data_ != NULL) src_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_dst_data()) {
      if (dst_data_ != NULL) dst_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDPSurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.CDPSurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataCube src_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube dst_data = 2;
      case 2: {
        if (tag == 18) {
         parse_dst_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.CDPSurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.CDPSurfaceDesc)
  return false;
#undef DO_
}

void CDPSurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.CDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.CDPSurfaceDesc)
}

::google::protobuf::uint8* CDPSurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.CDPSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.CDPSurfaceDesc)
  return target;
}

int CDPSurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataCube src_data = 1;
    if (has_src_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_data());
    }

    // required .nvdla_prototest_interface.DataCube dst_data = 2;
    if (has_dst_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDPSurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDPSurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDPSurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDPSurfaceDesc::MergeFrom(const CDPSurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_data()) {
      mutable_src_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.src_data());
    }
    if (from.has_dst_data()) {
      mutable_dst_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.dst_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDPSurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDPSurfaceDesc::CopyFrom(const CDPSurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDPSurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src_data()) {
    if (!this->src_data().IsInitialized()) return false;
  }
  if (has_dst_data()) {
    if (!this->dst_data().IsInitialized()) return false;
  }
  return true;
}

void CDPSurfaceDesc::Swap(CDPSurfaceDesc* other) {
  if (other != this) {
    std::swap(src_data_, other->src_data_);
    std::swap(dst_data_, other->dst_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDPSurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDPSurfaceDesc_descriptor_;
  metadata.reflection = CDPSurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDPOpDesc::kInPrecisionFieldNumber;
const int CDPOpDesc::kOutPrecisionFieldNumber;
const int CDPOpDesc::kLutIndexFieldNumber;
const int CDPOpDesc::kInCvtFieldNumber;
const int CDPOpDesc::kOutCvtFieldNumber;
const int CDPOpDesc::kLocalSizeFieldNumber;
const int CDPOpDesc::kBypassSqsumFieldNumber;
const int CDPOpDesc::kBypassOutMulFieldNumber;
const int CDPOpDesc::kReserved0FieldNumber;
#endif  // !_MSC_VER

CDPOpDesc::CDPOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.CDPOpDesc)
}

void CDPOpDesc::InitAsDefaultInstance() {
  in_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
  out_cvt_ = const_cast< ::nvdla_prototest_interface::CVTParam*>(&::nvdla_prototest_interface::CVTParam::default_instance());
}

CDPOpDesc::CDPOpDesc(const CDPOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.CDPOpDesc)
}

void CDPOpDesc::SharedCtor() {
  _cached_size_ = 0;
  in_precision_ = 0;
  out_precision_ = 0;
  lut_index_ = 0;
  in_cvt_ = NULL;
  out_cvt_ = NULL;
  local_size_ = 0u;
  bypass_sqsum_ = 0u;
  bypass_out_mul_ = 0u;
  reserved0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDPOpDesc::~CDPOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.CDPOpDesc)
  SharedDtor();
}

void CDPOpDesc::SharedDtor() {
  if (this != default_instance_) {
    delete in_cvt_;
    delete out_cvt_;
  }
}

void CDPOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDPOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDPOpDesc_descriptor_;
}

const CDPOpDesc& CDPOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

CDPOpDesc* CDPOpDesc::default_instance_ = NULL;

CDPOpDesc* CDPOpDesc::New() const {
  return new CDPOpDesc;
}

void CDPOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDPOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(in_precision_, out_precision_);
    ZR_(lut_index_, local_size_);
    ZR_(bypass_sqsum_, bypass_out_mul_);
    if (has_in_cvt()) {
      if (in_cvt_ != NULL) in_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
    if (has_out_cvt()) {
      if (out_cvt_ != NULL) out_cvt_->::nvdla_prototest_interface::CVTParam::Clear();
    }
  }
  reserved0_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDPOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.CDPOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataPrecision in_precision = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_in_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_out_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision out_precision = 2;
      case 2: {
        if (tag == 16) {
         parse_out_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_out_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lut_index;
        break;
      }

      // required int32 lut_index = 3;
      case 3: {
        if (tag == 24) {
         parse_lut_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lut_index_)));
          set_has_lut_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_in_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam in_cvt = 4;
      case 4: {
        if (tag == 34) {
         parse_in_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_in_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_out_cvt;
        break;
      }

      // required .nvdla_prototest_interface.CVTParam out_cvt = 5;
      case 5: {
        if (tag == 42) {
         parse_out_cvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_out_cvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_local_size;
        break;
      }

      // required uint32 local_size = 6;
      case 6: {
        if (tag == 48) {
         parse_local_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_size_)));
          set_has_local_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bypass_sqsum;
        break;
      }

      // required uint32 bypass_sqsum = 7;
      case 7: {
        if (tag == 56) {
         parse_bypass_sqsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bypass_sqsum_)));
          set_has_bypass_sqsum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bypass_out_mul;
        break;
      }

      // required uint32 bypass_out_mul = 8;
      case 8: {
        if (tag == 64) {
         parse_bypass_out_mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bypass_out_mul_)));
          set_has_bypass_out_mul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.CDPOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.CDPOpDesc)
  return false;
#undef DO_
}

void CDPOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.CDPOpDesc)
  // required .nvdla_prototest_interface.DataPrecision in_precision = 1;
  if (has_in_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->in_precision(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision out_precision = 2;
  if (has_out_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->out_precision(), output);
  }

  // required int32 lut_index = 3;
  if (has_lut_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lut_index(), output);
  }

  // required .nvdla_prototest_interface.CVTParam in_cvt = 4;
  if (has_in_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->in_cvt(), output);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 5;
  if (has_out_cvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->out_cvt(), output);
  }

  // required uint32 local_size = 6;
  if (has_local_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->local_size(), output);
  }

  // required uint32 bypass_sqsum = 7;
  if (has_bypass_sqsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bypass_sqsum(), output);
  }

  // required uint32 bypass_out_mul = 8;
  if (has_bypass_out_mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bypass_out_mul(), output);
  }

  // optional uint32 reserved0 = 9 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reserved0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.CDPOpDesc)
}

::google::protobuf::uint8* CDPOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.CDPOpDesc)
  // required .nvdla_prototest_interface.DataPrecision in_precision = 1;
  if (has_in_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->in_precision(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision out_precision = 2;
  if (has_out_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->out_precision(), target);
  }

  // required int32 lut_index = 3;
  if (has_lut_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lut_index(), target);
  }

  // required .nvdla_prototest_interface.CVTParam in_cvt = 4;
  if (has_in_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->in_cvt(), target);
  }

  // required .nvdla_prototest_interface.CVTParam out_cvt = 5;
  if (has_out_cvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->out_cvt(), target);
  }

  // required uint32 local_size = 6;
  if (has_local_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->local_size(), target);
  }

  // required uint32 bypass_sqsum = 7;
  if (has_bypass_sqsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bypass_sqsum(), target);
  }

  // required uint32 bypass_out_mul = 8;
  if (has_bypass_out_mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bypass_out_mul(), target);
  }

  // optional uint32 reserved0 = 9 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reserved0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.CDPOpDesc)
  return target;
}

int CDPOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataPrecision in_precision = 1;
    if (has_in_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_precision());
    }

    // required .nvdla_prototest_interface.DataPrecision out_precision = 2;
    if (has_out_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->out_precision());
    }

    // required int32 lut_index = 3;
    if (has_lut_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lut_index());
    }

    // required .nvdla_prototest_interface.CVTParam in_cvt = 4;
    if (has_in_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->in_cvt());
    }

    // required .nvdla_prototest_interface.CVTParam out_cvt = 5;
    if (has_out_cvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->out_cvt());
    }

    // required uint32 local_size = 6;
    if (has_local_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_size());
    }

    // required uint32 bypass_sqsum = 7;
    if (has_bypass_sqsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bypass_sqsum());
    }

    // required uint32 bypass_out_mul = 8;
    if (has_bypass_out_mul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bypass_out_mul());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reserved0 = 9 [default = 0];
    if (has_reserved0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDPOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDPOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDPOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDPOpDesc::MergeFrom(const CDPOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_in_precision()) {
      set_in_precision(from.in_precision());
    }
    if (from.has_out_precision()) {
      set_out_precision(from.out_precision());
    }
    if (from.has_lut_index()) {
      set_lut_index(from.lut_index());
    }
    if (from.has_in_cvt()) {
      mutable_in_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.in_cvt());
    }
    if (from.has_out_cvt()) {
      mutable_out_cvt()->::nvdla_prototest_interface::CVTParam::MergeFrom(from.out_cvt());
    }
    if (from.has_local_size()) {
      set_local_size(from.local_size());
    }
    if (from.has_bypass_sqsum()) {
      set_bypass_sqsum(from.bypass_sqsum());
    }
    if (from.has_bypass_out_mul()) {
      set_bypass_out_mul(from.bypass_out_mul());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDPOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDPOpDesc::CopyFrom(const CDPOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDPOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_in_cvt()) {
    if (!this->in_cvt().IsInitialized()) return false;
  }
  if (has_out_cvt()) {
    if (!this->out_cvt().IsInitialized()) return false;
  }
  return true;
}

void CDPOpDesc::Swap(CDPOpDesc* other) {
  if (other != this) {
    std::swap(in_precision_, other->in_precision_);
    std::swap(out_precision_, other->out_precision_);
    std::swap(lut_index_, other->lut_index_);
    std::swap(in_cvt_, other->in_cvt_);
    std::swap(out_cvt_, other->out_cvt_);
    std::swap(local_size_, other->local_size_);
    std::swap(bypass_sqsum_, other->bypass_sqsum_);
    std::swap(bypass_out_mul_, other->bypass_out_mul_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDPOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDPOpDesc_descriptor_;
  metadata.reflection = CDPOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RUBIKSurfaceDesc::kSrcDataFieldNumber;
const int RUBIKSurfaceDesc::kDstDataFieldNumber;
#endif  // !_MSC_VER

RUBIKSurfaceDesc::RUBIKSurfaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.RUBIKSurfaceDesc)
}

void RUBIKSurfaceDesc::InitAsDefaultInstance() {
  src_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
  dst_data_ = const_cast< ::nvdla_prototest_interface::DataCube*>(&::nvdla_prototest_interface::DataCube::default_instance());
}

RUBIKSurfaceDesc::RUBIKSurfaceDesc(const RUBIKSurfaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.RUBIKSurfaceDesc)
}

void RUBIKSurfaceDesc::SharedCtor() {
  _cached_size_ = 0;
  src_data_ = NULL;
  dst_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RUBIKSurfaceDesc::~RUBIKSurfaceDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.RUBIKSurfaceDesc)
  SharedDtor();
}

void RUBIKSurfaceDesc::SharedDtor() {
  if (this != default_instance_) {
    delete src_data_;
    delete dst_data_;
  }
}

void RUBIKSurfaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RUBIKSurfaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RUBIKSurfaceDesc_descriptor_;
}

const RUBIKSurfaceDesc& RUBIKSurfaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

RUBIKSurfaceDesc* RUBIKSurfaceDesc::default_instance_ = NULL;

RUBIKSurfaceDesc* RUBIKSurfaceDesc::New() const {
  return new RUBIKSurfaceDesc;
}

void RUBIKSurfaceDesc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_src_data()) {
      if (src_data_ != NULL) src_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
    if (has_dst_data()) {
      if (dst_data_ != NULL) dst_data_->::nvdla_prototest_interface::DataCube::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RUBIKSurfaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.RUBIKSurfaceDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.DataCube src_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst_data;
        break;
      }

      // required .nvdla_prototest_interface.DataCube dst_data = 2;
      case 2: {
        if (tag == 18) {
         parse_dst_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.RUBIKSurfaceDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.RUBIKSurfaceDesc)
  return false;
#undef DO_
}

void RUBIKSurfaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.RUBIKSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_data(), output);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.RUBIKSurfaceDesc)
}

::google::protobuf::uint8* RUBIKSurfaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.RUBIKSurfaceDesc)
  // required .nvdla_prototest_interface.DataCube src_data = 1;
  if (has_src_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_data(), target);
  }

  // required .nvdla_prototest_interface.DataCube dst_data = 2;
  if (has_dst_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.RUBIKSurfaceDesc)
  return target;
}

int RUBIKSurfaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.DataCube src_data = 1;
    if (has_src_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_data());
    }

    // required .nvdla_prototest_interface.DataCube dst_data = 2;
    if (has_dst_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RUBIKSurfaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RUBIKSurfaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RUBIKSurfaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RUBIKSurfaceDesc::MergeFrom(const RUBIKSurfaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_data()) {
      mutable_src_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.src_data());
    }
    if (from.has_dst_data()) {
      mutable_dst_data()->::nvdla_prototest_interface::DataCube::MergeFrom(from.dst_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RUBIKSurfaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RUBIKSurfaceDesc::CopyFrom(const RUBIKSurfaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RUBIKSurfaceDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src_data()) {
    if (!this->src_data().IsInitialized()) return false;
  }
  if (has_dst_data()) {
    if (!this->dst_data().IsInitialized()) return false;
  }
  return true;
}

void RUBIKSurfaceDesc::Swap(RUBIKSurfaceDesc* other) {
  if (other != this) {
    std::swap(src_data_, other->src_data_);
    std::swap(dst_data_, other->dst_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RUBIKSurfaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RUBIKSurfaceDesc_descriptor_;
  metadata.reflection = RUBIKSurfaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RUBIKOpDesc::kModeFieldNumber;
const int RUBIKOpDesc::kPrecisionFieldNumber;
const int RUBIKOpDesc::kStrideXFieldNumber;
const int RUBIKOpDesc::kStrideYFieldNumber;
#endif  // !_MSC_VER

RUBIKOpDesc::RUBIKOpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.RUBIKOpDesc)
}

void RUBIKOpDesc::InitAsDefaultInstance() {
}

RUBIKOpDesc::RUBIKOpDesc(const RUBIKOpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.RUBIKOpDesc)
}

void RUBIKOpDesc::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  precision_ = 0;
  stride_x_ = 0u;
  stride_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RUBIKOpDesc::~RUBIKOpDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.RUBIKOpDesc)
  SharedDtor();
}

void RUBIKOpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RUBIKOpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RUBIKOpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RUBIKOpDesc_descriptor_;
}

const RUBIKOpDesc& RUBIKOpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

RUBIKOpDesc* RUBIKOpDesc::default_instance_ = NULL;

RUBIKOpDesc* RUBIKOpDesc::New() const {
  return new RUBIKOpDesc;
}

void RUBIKOpDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RUBIKOpDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mode_, stride_y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RUBIKOpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.RUBIKOpDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.RUBIKMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::RUBIKMode_IsValid(value)) {
            set_mode(static_cast< ::nvdla_prototest_interface::RUBIKMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // required .nvdla_prototest_interface.DataPrecision precision = 2;
      case 2: {
        if (tag == 16) {
         parse_precision:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::DataPrecision_IsValid(value)) {
            set_precision(static_cast< ::nvdla_prototest_interface::DataPrecision >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stride_x;
        break;
      }

      // required uint32 stride_x = 3;
      case 3: {
        if (tag == 24) {
         parse_stride_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_x_)));
          set_has_stride_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stride_y;
        break;
      }

      // required uint32 stride_y = 4;
      case 4: {
        if (tag == 32) {
         parse_stride_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stride_y_)));
          set_has_stride_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.RUBIKOpDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.RUBIKOpDesc)
  return false;
#undef DO_
}

void RUBIKOpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.RUBIKOpDesc)
  // required .nvdla_prototest_interface.RUBIKMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->precision(), output);
  }

  // required uint32 stride_x = 3;
  if (has_stride_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stride_x(), output);
  }

  // required uint32 stride_y = 4;
  if (has_stride_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stride_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.RUBIKOpDesc)
}

::google::protobuf::uint8* RUBIKOpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.RUBIKOpDesc)
  // required .nvdla_prototest_interface.RUBIKMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required .nvdla_prototest_interface.DataPrecision precision = 2;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->precision(), target);
  }

  // required uint32 stride_x = 3;
  if (has_stride_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stride_x(), target);
  }

  // required uint32 stride_y = 4;
  if (has_stride_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stride_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.RUBIKOpDesc)
  return target;
}

int RUBIKOpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.RUBIKMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required .nvdla_prototest_interface.DataPrecision precision = 2;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precision());
    }

    // required uint32 stride_x = 3;
    if (has_stride_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_x());
    }

    // required uint32 stride_y = 4;
    if (has_stride_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stride_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RUBIKOpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RUBIKOpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RUBIKOpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RUBIKOpDesc::MergeFrom(const RUBIKOpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_stride_x()) {
      set_stride_x(from.stride_x());
    }
    if (from.has_stride_y()) {
      set_stride_y(from.stride_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RUBIKOpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RUBIKOpDesc::CopyFrom(const RUBIKOpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RUBIKOpDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RUBIKOpDesc::Swap(RUBIKOpDesc* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(precision_, other->precision_);
    std::swap(stride_x_, other->stride_x_);
    std::swap(stride_y_, other->stride_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RUBIKOpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RUBIKOpDesc_descriptor_;
  metadata.reflection = RUBIKOpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceContainer::kBdmaSurfaceFieldNumber;
const int SurfaceContainer::kConvSurfaceFieldNumber;
const int SurfaceContainer::kSdpSurfaceFieldNumber;
const int SurfaceContainer::kPdpSurfaceFieldNumber;
const int SurfaceContainer::kCdpSurfaceFieldNumber;
const int SurfaceContainer::kRubikSurfaceFieldNumber;
#endif  // !_MSC_VER

SurfaceContainer::SurfaceContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SurfaceContainer)
}

void SurfaceContainer::InitAsDefaultInstance() {
  SurfaceContainer_default_oneof_instance_->bdma_surface_ = const_cast< ::nvdla_prototest_interface::BDMASurfaceDesc*>(&::nvdla_prototest_interface::BDMASurfaceDesc::default_instance());
  SurfaceContainer_default_oneof_instance_->conv_surface_ = const_cast< ::nvdla_prototest_interface::CONVSurfaceDesc*>(&::nvdla_prototest_interface::CONVSurfaceDesc::default_instance());
  SurfaceContainer_default_oneof_instance_->sdp_surface_ = const_cast< ::nvdla_prototest_interface::SDPSurfaceDesc*>(&::nvdla_prototest_interface::SDPSurfaceDesc::default_instance());
  SurfaceContainer_default_oneof_instance_->pdp_surface_ = const_cast< ::nvdla_prototest_interface::PDPSurfaceDesc*>(&::nvdla_prototest_interface::PDPSurfaceDesc::default_instance());
  SurfaceContainer_default_oneof_instance_->cdp_surface_ = const_cast< ::nvdla_prototest_interface::CDPSurfaceDesc*>(&::nvdla_prototest_interface::CDPSurfaceDesc::default_instance());
  SurfaceContainer_default_oneof_instance_->rubik_surface_ = const_cast< ::nvdla_prototest_interface::RUBIKSurfaceDesc*>(&::nvdla_prototest_interface::RUBIKSurfaceDesc::default_instance());
}

SurfaceContainer::SurfaceContainer(const SurfaceContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SurfaceContainer)
}

void SurfaceContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_surface_container_oneof();
}

SurfaceContainer::~SurfaceContainer() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SurfaceContainer)
  SharedDtor();
}

void SurfaceContainer::SharedDtor() {
  if (has_surface_container_oneof()) {
    clear_surface_container_oneof();
  }
  if (this != default_instance_) {
  }
}

void SurfaceContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceContainer_descriptor_;
}

const SurfaceContainer& SurfaceContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SurfaceContainer* SurfaceContainer::default_instance_ = NULL;

SurfaceContainer* SurfaceContainer::New() const {
  return new SurfaceContainer;
}

void SurfaceContainer::clear_surface_container_oneof() {
  switch(surface_container_oneof_case()) {
    case kBdmaSurface: {
      delete surface_container_oneof_.bdma_surface_;
      break;
    }
    case kConvSurface: {
      delete surface_container_oneof_.conv_surface_;
      break;
    }
    case kSdpSurface: {
      delete surface_container_oneof_.sdp_surface_;
      break;
    }
    case kPdpSurface: {
      delete surface_container_oneof_.pdp_surface_;
      break;
    }
    case kCdpSurface: {
      delete surface_container_oneof_.cdp_surface_;
      break;
    }
    case kRubikSurface: {
      delete surface_container_oneof_.rubik_surface_;
      break;
    }
    case SURFACE_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SURFACE_CONTAINER_ONEOF_NOT_SET;
}


void SurfaceContainer::Clear() {
  clear_surface_container_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SurfaceContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nvdla_prototest_interface.BDMASurfaceDesc bdma_surface = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bdma_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conv_surface;
        break;
      }

      // optional .nvdla_prototest_interface.CONVSurfaceDesc conv_surface = 2;
      case 2: {
        if (tag == 18) {
         parse_conv_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sdp_surface;
        break;
      }

      // optional .nvdla_prototest_interface.SDPSurfaceDesc sdp_surface = 3;
      case 3: {
        if (tag == 26) {
         parse_sdp_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sdp_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pdp_surface;
        break;
      }

      // optional .nvdla_prototest_interface.PDPSurfaceDesc pdp_surface = 4;
      case 4: {
        if (tag == 34) {
         parse_pdp_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pdp_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cdp_surface;
        break;
      }

      // optional .nvdla_prototest_interface.CDPSurfaceDesc cdp_surface = 5;
      case 5: {
        if (tag == 42) {
         parse_cdp_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdp_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rubik_surface;
        break;
      }

      // optional .nvdla_prototest_interface.RUBIKSurfaceDesc rubik_surface = 6;
      case 6: {
        if (tag == 50) {
         parse_rubik_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rubik_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SurfaceContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SurfaceContainer)
  return false;
#undef DO_
}

void SurfaceContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SurfaceContainer)
  // optional .nvdla_prototest_interface.BDMASurfaceDesc bdma_surface = 1;
  if (has_bdma_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bdma_surface(), output);
  }

  // optional .nvdla_prototest_interface.CONVSurfaceDesc conv_surface = 2;
  if (has_conv_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conv_surface(), output);
  }

  // optional .nvdla_prototest_interface.SDPSurfaceDesc sdp_surface = 3;
  if (has_sdp_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sdp_surface(), output);
  }

  // optional .nvdla_prototest_interface.PDPSurfaceDesc pdp_surface = 4;
  if (has_pdp_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pdp_surface(), output);
  }

  // optional .nvdla_prototest_interface.CDPSurfaceDesc cdp_surface = 5;
  if (has_cdp_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cdp_surface(), output);
  }

  // optional .nvdla_prototest_interface.RUBIKSurfaceDesc rubik_surface = 6;
  if (has_rubik_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rubik_surface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SurfaceContainer)
}

::google::protobuf::uint8* SurfaceContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SurfaceContainer)
  // optional .nvdla_prototest_interface.BDMASurfaceDesc bdma_surface = 1;
  if (has_bdma_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bdma_surface(), target);
  }

  // optional .nvdla_prototest_interface.CONVSurfaceDesc conv_surface = 2;
  if (has_conv_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conv_surface(), target);
  }

  // optional .nvdla_prototest_interface.SDPSurfaceDesc sdp_surface = 3;
  if (has_sdp_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sdp_surface(), target);
  }

  // optional .nvdla_prototest_interface.PDPSurfaceDesc pdp_surface = 4;
  if (has_pdp_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pdp_surface(), target);
  }

  // optional .nvdla_prototest_interface.CDPSurfaceDesc cdp_surface = 5;
  if (has_cdp_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cdp_surface(), target);
  }

  // optional .nvdla_prototest_interface.RUBIKSurfaceDesc rubik_surface = 6;
  if (has_rubik_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rubik_surface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SurfaceContainer)
  return target;
}

int SurfaceContainer::ByteSize() const {
  int total_size = 0;

  switch (surface_container_oneof_case()) {
    // optional .nvdla_prototest_interface.BDMASurfaceDesc bdma_surface = 1;
    case kBdmaSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bdma_surface());
      break;
    }
    // optional .nvdla_prototest_interface.CONVSurfaceDesc conv_surface = 2;
    case kConvSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv_surface());
      break;
    }
    // optional .nvdla_prototest_interface.SDPSurfaceDesc sdp_surface = 3;
    case kSdpSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sdp_surface());
      break;
    }
    // optional .nvdla_prototest_interface.PDPSurfaceDesc pdp_surface = 4;
    case kPdpSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pdp_surface());
      break;
    }
    // optional .nvdla_prototest_interface.CDPSurfaceDesc cdp_surface = 5;
    case kCdpSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdp_surface());
      break;
    }
    // optional .nvdla_prototest_interface.RUBIKSurfaceDesc rubik_surface = 6;
    case kRubikSurface: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rubik_surface());
      break;
    }
    case SURFACE_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceContainer::MergeFrom(const SurfaceContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.surface_container_oneof_case()) {
    case kBdmaSurface: {
      mutable_bdma_surface()->::nvdla_prototest_interface::BDMASurfaceDesc::MergeFrom(from.bdma_surface());
      break;
    }
    case kConvSurface: {
      mutable_conv_surface()->::nvdla_prototest_interface::CONVSurfaceDesc::MergeFrom(from.conv_surface());
      break;
    }
    case kSdpSurface: {
      mutable_sdp_surface()->::nvdla_prototest_interface::SDPSurfaceDesc::MergeFrom(from.sdp_surface());
      break;
    }
    case kPdpSurface: {
      mutable_pdp_surface()->::nvdla_prototest_interface::PDPSurfaceDesc::MergeFrom(from.pdp_surface());
      break;
    }
    case kCdpSurface: {
      mutable_cdp_surface()->::nvdla_prototest_interface::CDPSurfaceDesc::MergeFrom(from.cdp_surface());
      break;
    }
    case kRubikSurface: {
      mutable_rubik_surface()->::nvdla_prototest_interface::RUBIKSurfaceDesc::MergeFrom(from.rubik_surface());
      break;
    }
    case SURFACE_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceContainer::CopyFrom(const SurfaceContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceContainer::IsInitialized() const {

  if (has_bdma_surface()) {
    if (!this->bdma_surface().IsInitialized()) return false;
  }
  if (has_conv_surface()) {
    if (!this->conv_surface().IsInitialized()) return false;
  }
  if (has_sdp_surface()) {
    if (!this->sdp_surface().IsInitialized()) return false;
  }
  if (has_pdp_surface()) {
    if (!this->pdp_surface().IsInitialized()) return false;
  }
  if (has_cdp_surface()) {
    if (!this->cdp_surface().IsInitialized()) return false;
  }
  if (has_rubik_surface()) {
    if (!this->rubik_surface().IsInitialized()) return false;
  }
  return true;
}

void SurfaceContainer::Swap(SurfaceContainer* other) {
  if (other != this) {
    std::swap(surface_container_oneof_, other->surface_container_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceContainer_descriptor_;
  metadata.reflection = SurfaceContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperationContainer::kBdmaOpFieldNumber;
const int OperationContainer::kConvOpFieldNumber;
const int OperationContainer::kSdpOpFieldNumber;
const int OperationContainer::kPdpOpFieldNumber;
const int OperationContainer::kCdpOpFieldNumber;
const int OperationContainer::kRubikOpFieldNumber;
#endif  // !_MSC_VER

OperationContainer::OperationContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.OperationContainer)
}

void OperationContainer::InitAsDefaultInstance() {
  OperationContainer_default_oneof_instance_->bdma_op_ = const_cast< ::nvdla_prototest_interface::BDMAOpDesc*>(&::nvdla_prototest_interface::BDMAOpDesc::default_instance());
  OperationContainer_default_oneof_instance_->conv_op_ = const_cast< ::nvdla_prototest_interface::CONVOpDesc*>(&::nvdla_prototest_interface::CONVOpDesc::default_instance());
  OperationContainer_default_oneof_instance_->sdp_op_ = const_cast< ::nvdla_prototest_interface::SDPOpDesc*>(&::nvdla_prototest_interface::SDPOpDesc::default_instance());
  OperationContainer_default_oneof_instance_->pdp_op_ = const_cast< ::nvdla_prototest_interface::PDPOpDesc*>(&::nvdla_prototest_interface::PDPOpDesc::default_instance());
  OperationContainer_default_oneof_instance_->cdp_op_ = const_cast< ::nvdla_prototest_interface::CDPOpDesc*>(&::nvdla_prototest_interface::CDPOpDesc::default_instance());
  OperationContainer_default_oneof_instance_->rubik_op_ = const_cast< ::nvdla_prototest_interface::RUBIKOpDesc*>(&::nvdla_prototest_interface::RUBIKOpDesc::default_instance());
}

OperationContainer::OperationContainer(const OperationContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.OperationContainer)
}

void OperationContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_op_container_oneof();
}

OperationContainer::~OperationContainer() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.OperationContainer)
  SharedDtor();
}

void OperationContainer::SharedDtor() {
  if (has_op_container_oneof()) {
    clear_op_container_oneof();
  }
  if (this != default_instance_) {
  }
}

void OperationContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperationContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperationContainer_descriptor_;
}

const OperationContainer& OperationContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

OperationContainer* OperationContainer::default_instance_ = NULL;

OperationContainer* OperationContainer::New() const {
  return new OperationContainer;
}

void OperationContainer::clear_op_container_oneof() {
  switch(op_container_oneof_case()) {
    case kBdmaOp: {
      delete op_container_oneof_.bdma_op_;
      break;
    }
    case kConvOp: {
      delete op_container_oneof_.conv_op_;
      break;
    }
    case kSdpOp: {
      delete op_container_oneof_.sdp_op_;
      break;
    }
    case kPdpOp: {
      delete op_container_oneof_.pdp_op_;
      break;
    }
    case kCdpOp: {
      delete op_container_oneof_.cdp_op_;
      break;
    }
    case kRubikOp: {
      delete op_container_oneof_.rubik_op_;
      break;
    }
    case OP_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_CONTAINER_ONEOF_NOT_SET;
}


void OperationContainer::Clear() {
  clear_op_container_oneof();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperationContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.OperationContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nvdla_prototest_interface.BDMAOpDesc bdma_op = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bdma_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conv_op;
        break;
      }

      // optional .nvdla_prototest_interface.CONVOpDesc conv_op = 2;
      case 2: {
        if (tag == 18) {
         parse_conv_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conv_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sdp_op;
        break;
      }

      // optional .nvdla_prototest_interface.SDPOpDesc sdp_op = 3;
      case 3: {
        if (tag == 26) {
         parse_sdp_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sdp_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pdp_op;
        break;
      }

      // optional .nvdla_prototest_interface.PDPOpDesc pdp_op = 4;
      case 4: {
        if (tag == 34) {
         parse_pdp_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pdp_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cdp_op;
        break;
      }

      // optional .nvdla_prototest_interface.CDPOpDesc cdp_op = 5;
      case 5: {
        if (tag == 42) {
         parse_cdp_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdp_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rubik_op;
        break;
      }

      // optional .nvdla_prototest_interface.RUBIKOpDesc rubik_op = 6;
      case 6: {
        if (tag == 50) {
         parse_rubik_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rubik_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.OperationContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.OperationContainer)
  return false;
#undef DO_
}

void OperationContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.OperationContainer)
  // optional .nvdla_prototest_interface.BDMAOpDesc bdma_op = 1;
  if (has_bdma_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bdma_op(), output);
  }

  // optional .nvdla_prototest_interface.CONVOpDesc conv_op = 2;
  if (has_conv_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conv_op(), output);
  }

  // optional .nvdla_prototest_interface.SDPOpDesc sdp_op = 3;
  if (has_sdp_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sdp_op(), output);
  }

  // optional .nvdla_prototest_interface.PDPOpDesc pdp_op = 4;
  if (has_pdp_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pdp_op(), output);
  }

  // optional .nvdla_prototest_interface.CDPOpDesc cdp_op = 5;
  if (has_cdp_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cdp_op(), output);
  }

  // optional .nvdla_prototest_interface.RUBIKOpDesc rubik_op = 6;
  if (has_rubik_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rubik_op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.OperationContainer)
}

::google::protobuf::uint8* OperationContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.OperationContainer)
  // optional .nvdla_prototest_interface.BDMAOpDesc bdma_op = 1;
  if (has_bdma_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bdma_op(), target);
  }

  // optional .nvdla_prototest_interface.CONVOpDesc conv_op = 2;
  if (has_conv_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conv_op(), target);
  }

  // optional .nvdla_prototest_interface.SDPOpDesc sdp_op = 3;
  if (has_sdp_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sdp_op(), target);
  }

  // optional .nvdla_prototest_interface.PDPOpDesc pdp_op = 4;
  if (has_pdp_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pdp_op(), target);
  }

  // optional .nvdla_prototest_interface.CDPOpDesc cdp_op = 5;
  if (has_cdp_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cdp_op(), target);
  }

  // optional .nvdla_prototest_interface.RUBIKOpDesc rubik_op = 6;
  if (has_rubik_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rubik_op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.OperationContainer)
  return target;
}

int OperationContainer::ByteSize() const {
  int total_size = 0;

  switch (op_container_oneof_case()) {
    // optional .nvdla_prototest_interface.BDMAOpDesc bdma_op = 1;
    case kBdmaOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bdma_op());
      break;
    }
    // optional .nvdla_prototest_interface.CONVOpDesc conv_op = 2;
    case kConvOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conv_op());
      break;
    }
    // optional .nvdla_prototest_interface.SDPOpDesc sdp_op = 3;
    case kSdpOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sdp_op());
      break;
    }
    // optional .nvdla_prototest_interface.PDPOpDesc pdp_op = 4;
    case kPdpOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pdp_op());
      break;
    }
    // optional .nvdla_prototest_interface.CDPOpDesc cdp_op = 5;
    case kCdpOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdp_op());
      break;
    }
    // optional .nvdla_prototest_interface.RUBIKOpDesc rubik_op = 6;
    case kRubikOp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rubik_op());
      break;
    }
    case OP_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperationContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperationContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperationContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperationContainer::MergeFrom(const OperationContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.op_container_oneof_case()) {
    case kBdmaOp: {
      mutable_bdma_op()->::nvdla_prototest_interface::BDMAOpDesc::MergeFrom(from.bdma_op());
      break;
    }
    case kConvOp: {
      mutable_conv_op()->::nvdla_prototest_interface::CONVOpDesc::MergeFrom(from.conv_op());
      break;
    }
    case kSdpOp: {
      mutable_sdp_op()->::nvdla_prototest_interface::SDPOpDesc::MergeFrom(from.sdp_op());
      break;
    }
    case kPdpOp: {
      mutable_pdp_op()->::nvdla_prototest_interface::PDPOpDesc::MergeFrom(from.pdp_op());
      break;
    }
    case kCdpOp: {
      mutable_cdp_op()->::nvdla_prototest_interface::CDPOpDesc::MergeFrom(from.cdp_op());
      break;
    }
    case kRubikOp: {
      mutable_rubik_op()->::nvdla_prototest_interface::RUBIKOpDesc::MergeFrom(from.rubik_op());
      break;
    }
    case OP_CONTAINER_ONEOF_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperationContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationContainer::CopyFrom(const OperationContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationContainer::IsInitialized() const {

  if (has_bdma_op()) {
    if (!this->bdma_op().IsInitialized()) return false;
  }
  if (has_conv_op()) {
    if (!this->conv_op().IsInitialized()) return false;
  }
  if (has_sdp_op()) {
    if (!this->sdp_op().IsInitialized()) return false;
  }
  if (has_pdp_op()) {
    if (!this->pdp_op().IsInitialized()) return false;
  }
  if (has_cdp_op()) {
    if (!this->cdp_op().IsInitialized()) return false;
  }
  if (has_rubik_op()) {
    if (!this->rubik_op().IsInitialized()) return false;
  }
  return true;
}

void OperationContainer::Swap(OperationContainer* other) {
  if (other != this) {
    std::swap(op_container_oneof_, other->op_container_oneof_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperationContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperationContainer_descriptor_;
  metadata.reflection = OperationContainer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Consumer_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Consumer_EventType_descriptor_;
}
bool Consumer_EventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Consumer_EventType Consumer::OP_COMPLETED;
const Consumer_EventType Consumer::OP_PROGRAMMED;
const Consumer_EventType Consumer::OP_ENABLED;
const Consumer_EventType Consumer::CDMA_WT_DONE;
const Consumer_EventType Consumer::CDMA_DT_DONE;
const Consumer_EventType Consumer::EventType_MIN;
const Consumer_EventType Consumer::EventType_MAX;
const int Consumer::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Consumer::kIndexFieldNumber;
const int Consumer::kTypeFieldNumber;
const int Consumer::kEventFieldNumber;
#endif  // !_MSC_VER

Consumer::Consumer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Consumer)
}

void Consumer::InitAsDefaultInstance() {
}

Consumer::Consumer(const Consumer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Consumer)
}

void Consumer::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  type_ = 0;
  event_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Consumer::~Consumer() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Consumer)
  SharedDtor();
}

void Consumer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Consumer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Consumer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Consumer_descriptor_;
}

const Consumer& Consumer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Consumer* Consumer::default_instance_ = NULL;

Consumer* Consumer::New() const {
  return new Consumer;
}

void Consumer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Consumer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, type_);
    event_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Consumer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Consumer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .nvdla_prototest_interface.LayerType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::LayerType_IsValid(value)) {
            set_type(static_cast< ::nvdla_prototest_interface::LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event;
        break;
      }

      // required .nvdla_prototest_interface.Consumer.EventType event = 3;
      case 3: {
        if (tag == 24) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::Consumer_EventType_IsValid(value)) {
            set_event(static_cast< ::nvdla_prototest_interface::Consumer_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Consumer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Consumer)
  return false;
#undef DO_
}

void Consumer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Consumer)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .nvdla_prototest_interface.LayerType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .nvdla_prototest_interface.Consumer.EventType event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Consumer)
}

::google::protobuf::uint8* Consumer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Consumer)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .nvdla_prototest_interface.LayerType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .nvdla_prototest_interface.Consumer.EventType event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Consumer)
  return target;
}

int Consumer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .nvdla_prototest_interface.LayerType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .nvdla_prototest_interface.Consumer.EventType event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Consumer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Consumer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Consumer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Consumer::MergeFrom(const Consumer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Consumer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Consumer::CopyFrom(const Consumer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Consumer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Consumer::Swap(Consumer* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Consumer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Consumer_descriptor_;
  metadata.reflection = Consumer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Layer::kIndexFieldNumber;
const int Layer::kRoiIndexFieldNumber;
const int Layer::kTypeFieldNumber;
const int Layer::kDependencyCountFieldNumber;
const int Layer::kReservedFieldNumber;
const int Layer::kBottomFieldNumber;
const int Layer::kFusedFieldNumber;
const int Layer::kOpConfigFieldNumber;
const int Layer::kSurfaceFieldNumber;
#endif  // !_MSC_VER

Layer::Layer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Layer)
}

void Layer::InitAsDefaultInstance() {
  fused_ = const_cast< ::nvdla_prototest_interface::Consumer*>(&::nvdla_prototest_interface::Consumer::default_instance());
  op_config_ = const_cast< ::nvdla_prototest_interface::OperationContainer*>(&::nvdla_prototest_interface::OperationContainer::default_instance());
  surface_ = const_cast< ::nvdla_prototest_interface::SurfaceContainer*>(&::nvdla_prototest_interface::SurfaceContainer::default_instance());
}

Layer::Layer(const Layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Layer)
}

void Layer::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  roi_index_ = 0;
  type_ = 0;
  dependency_count_ = 0u;
  fused_ = NULL;
  op_config_ = NULL;
  surface_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  if (this != default_instance_) {
    delete fused_;
    delete op_config_;
    delete surface_;
  }
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Layer_descriptor_;
}

const Layer& Layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Layer* Layer::default_instance_ = NULL;

Layer* Layer::New() const {
  return new Layer;
}

void Layer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Layer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(index_, dependency_count_);
    if (has_fused()) {
      if (fused_ != NULL) fused_->::nvdla_prototest_interface::Consumer::Clear();
    }
    if (has_op_config()) {
      if (op_config_ != NULL) op_config_->::nvdla_prototest_interface::OperationContainer::Clear();
    }
  }
  if (has_surface()) {
    if (surface_ != NULL) surface_->::nvdla_prototest_interface::SurfaceContainer::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reserved_.Clear();
  bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roi_index;
        break;
      }

      // required int32 roi_index = 2;
      case 2: {
        if (tag == 16) {
         parse_roi_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_index_)));
          set_has_roi_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .nvdla_prototest_interface.LayerType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::LayerType_IsValid(value)) {
            set_type(static_cast< ::nvdla_prototest_interface::LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dependency_count;
        break;
      }

      // required uint32 dependency_count = 4;
      case 4: {
        if (tag == 32) {
         parse_dependency_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dependency_count_)));
          set_has_dependency_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reserved;
        break;
      }

      // repeated uint32 reserved = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reserved())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_reserved())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bottom;
        break;
      }

      // repeated .nvdla_prototest_interface.Consumer bottom = 6;
      case 6: {
        if (tag == 50) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bottom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bottom;
        if (input->ExpectTag(58)) goto parse_fused;
        break;
      }

      // optional .nvdla_prototest_interface.Consumer fused = 7;
      case 7: {
        if (tag == 58) {
         parse_fused:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fused()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_op_config;
        break;
      }

      // required .nvdla_prototest_interface.OperationContainer op_config = 8;
      case 8: {
        if (tag == 66) {
         parse_op_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_surface;
        break;
      }

      // required .nvdla_prototest_interface.SurfaceContainer surface = 9;
      case 9: {
        if (tag == 74) {
         parse_surface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Layer)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 roi_index = 2;
  if (has_roi_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roi_index(), output);
  }

  // required .nvdla_prototest_interface.LayerType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 dependency_count = 4;
  if (has_dependency_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dependency_count(), output);
  }

  // repeated uint32 reserved = 5 [packed = true];
  if (this->reserved_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reserved_cached_byte_size_);
  }
  for (int i = 0; i < this->reserved_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->reserved(i), output);
  }

  // repeated .nvdla_prototest_interface.Consumer bottom = 6;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bottom(i), output);
  }

  // optional .nvdla_prototest_interface.Consumer fused = 7;
  if (has_fused()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fused(), output);
  }

  // required .nvdla_prototest_interface.OperationContainer op_config = 8;
  if (has_op_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->op_config(), output);
  }

  // required .nvdla_prototest_interface.SurfaceContainer surface = 9;
  if (has_surface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->surface(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Layer)
}

::google::protobuf::uint8* Layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Layer)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 roi_index = 2;
  if (has_roi_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roi_index(), target);
  }

  // required .nvdla_prototest_interface.LayerType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 dependency_count = 4;
  if (has_dependency_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dependency_count(), target);
  }

  // repeated uint32 reserved = 5 [packed = true];
  if (this->reserved_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reserved_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reserved_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->reserved(i), target);
  }

  // repeated .nvdla_prototest_interface.Consumer bottom = 6;
  for (int i = 0; i < this->bottom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bottom(i), target);
  }

  // optional .nvdla_prototest_interface.Consumer fused = 7;
  if (has_fused()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fused(), target);
  }

  // required .nvdla_prototest_interface.OperationContainer op_config = 8;
  if (has_op_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->op_config(), target);
  }

  // required .nvdla_prototest_interface.SurfaceContainer surface = 9;
  if (has_surface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->surface(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Layer)
  return target;
}

int Layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 roi_index = 2;
    if (has_roi_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roi_index());
    }

    // required .nvdla_prototest_interface.LayerType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 dependency_count = 4;
    if (has_dependency_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dependency_count());
    }

    // optional .nvdla_prototest_interface.Consumer fused = 7;
    if (has_fused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fused());
    }

    // required .nvdla_prototest_interface.OperationContainer op_config = 8;
    if (has_op_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_config());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .nvdla_prototest_interface.SurfaceContainer surface = 9;
    if (has_surface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface());
    }

  }
  // repeated uint32 reserved = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->reserved_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reserved(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reserved_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .nvdla_prototest_interface.Consumer bottom = 6;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  reserved_.MergeFrom(from.reserved_);
  bottom_.MergeFrom(from.bottom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_roi_index()) {
      set_roi_index(from.roi_index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dependency_count()) {
      set_dependency_count(from.dependency_count());
    }
    if (from.has_fused()) {
      mutable_fused()->::nvdla_prototest_interface::Consumer::MergeFrom(from.fused());
    }
    if (from.has_op_config()) {
      mutable_op_config()->::nvdla_prototest_interface::OperationContainer::MergeFrom(from.op_config());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_surface()) {
      mutable_surface()->::nvdla_prototest_interface::SurfaceContainer::MergeFrom(from.surface());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000018f) != 0x0000018f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bottom())) return false;
  if (has_fused()) {
    if (!this->fused().IsInitialized()) return false;
  }
  if (has_op_config()) {
    if (!this->op_config().IsInitialized()) return false;
  }
  if (has_surface()) {
    if (!this->surface().IsInitialized()) return false;
  }
  return true;
}

void Layer::Swap(Layer* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(roi_index_, other->roi_index_);
    std::swap(type_, other->type_);
    std::swap(dependency_count_, other->dependency_count_);
    reserved_.Swap(&other->reserved_);
    bottom_.Swap(&other->bottom_);
    std::swap(fused_, other->fused_);
    std::swap(op_config_, other->op_config_);
    std::swap(surface_, other->surface_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Layer_descriptor_;
  metadata.reflection = Layer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkLayer::kLayerFieldNumber;
#endif  // !_MSC_VER

NetworkLayer::NetworkLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.NetworkLayer)
}

void NetworkLayer::InitAsDefaultInstance() {
}

NetworkLayer::NetworkLayer(const NetworkLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.NetworkLayer)
}

void NetworkLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkLayer::~NetworkLayer() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.NetworkLayer)
  SharedDtor();
}

void NetworkLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkLayer_descriptor_;
}

const NetworkLayer& NetworkLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

NetworkLayer* NetworkLayer::default_instance_ = NULL;

NetworkLayer* NetworkLayer::New() const {
  return new NetworkLayer;
}

void NetworkLayer::Clear() {
  layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.NetworkLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nvdla_prototest_interface.Layer layer = 1;
      case 1: {
        if (tag == 10) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_layer;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.NetworkLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.NetworkLayer)
  return false;
#undef DO_
}

void NetworkLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.NetworkLayer)
  // repeated .nvdla_prototest_interface.Layer layer = 1;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->layer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.NetworkLayer)
}

::google::protobuf::uint8* NetworkLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.NetworkLayer)
  // repeated .nvdla_prototest_interface.Layer layer = 1;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->layer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.NetworkLayer)
  return target;
}

int NetworkLayer::ByteSize() const {
  int total_size = 0;

  // repeated .nvdla_prototest_interface.Layer layer = 1;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkLayer::MergeFrom(const NetworkLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkLayer::CopyFrom(const NetworkLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkLayer::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  return true;
}

void NetworkLayer::Swap(NetworkLayer* other) {
  if (other != this) {
    layer_.Swap(&other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkLayer_descriptor_;
  metadata.reflection = NetworkLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkDesc::kOperationDescIndexFieldNumber;
const int NetworkDesc::kSurfaceDescIndexFieldNumber;
const int NetworkDesc::kDependencyGraphIndexFieldNumber;
const int NetworkDesc::kLutDataIndexFieldNumber;
const int NetworkDesc::kRoiArrayIndexFieldNumber;
const int NetworkDesc::kSurfaceIndexFieldNumber;
const int NetworkDesc::kStatListIndexFieldNumber;
const int NetworkDesc::kReserved1FieldNumber;
const int NetworkDesc::kOpHeadFieldNumber;
const int NetworkDesc::kNumRoisFieldNumber;
const int NetworkDesc::kNumOperationsFieldNumber;
const int NetworkDesc::kNumLutsFieldNumber;
const int NetworkDesc::kNumAddressesFieldNumber;
const int NetworkDesc::kInputLayerFieldNumber;
const int NetworkDesc::kDynamicRoiFieldNumber;
const int NetworkDesc::kReserved0FieldNumber;
#endif  // !_MSC_VER

NetworkDesc::NetworkDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.NetworkDesc)
}

void NetworkDesc::InitAsDefaultInstance() {
}

NetworkDesc::NetworkDesc(const NetworkDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.NetworkDesc)
}

void NetworkDesc::SharedCtor() {
  _cached_size_ = 0;
  operation_desc_index_ = 0;
  surface_desc_index_ = 0;
  dependency_graph_index_ = 0;
  lut_data_index_ = 0;
  roi_array_index_ = 0;
  surface_index_ = 0;
  stat_list_index_ = -1;
  reserved1_ = -1;
  num_rois_ = 0u;
  num_operations_ = 0u;
  num_luts_ = 0u;
  num_addresses_ = 0u;
  input_layer_ = 0;
  dynamic_roi_ = 0u;
  reserved0_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkDesc::~NetworkDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.NetworkDesc)
  SharedDtor();
}

void NetworkDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkDesc_descriptor_;
}

const NetworkDesc& NetworkDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

NetworkDesc* NetworkDesc::default_instance_ = NULL;

NetworkDesc* NetworkDesc::New() const {
  return new NetworkDesc;
}

void NetworkDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetworkDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(operation_desc_index_, surface_index_);
    stat_list_index_ = -1;
    reserved1_ = -1;
  }
  if (_has_bits_[8 / 32] & 65024) {
    ZR_(num_rois_, reserved0_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  op_head_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.NetworkDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operation_desc_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operation_desc_index_)));
          set_has_operation_desc_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_surface_desc_index;
        break;
      }

      // required int32 surface_desc_index = 2;
      case 2: {
        if (tag == 16) {
         parse_surface_desc_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surface_desc_index_)));
          set_has_surface_desc_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dependency_graph_index;
        break;
      }

      // required int32 dependency_graph_index = 3;
      case 3: {
        if (tag == 24) {
         parse_dependency_graph_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dependency_graph_index_)));
          set_has_dependency_graph_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lut_data_index;
        break;
      }

      // required int32 lut_data_index = 4;
      case 4: {
        if (tag == 32) {
         parse_lut_data_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lut_data_index_)));
          set_has_lut_data_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roi_array_index;
        break;
      }

      // required int32 roi_array_index = 5;
      case 5: {
        if (tag == 40) {
         parse_roi_array_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roi_array_index_)));
          set_has_roi_array_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_surface_index;
        break;
      }

      // required int32 surface_index = 6;
      case 6: {
        if (tag == 48) {
         parse_surface_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surface_index_)));
          set_has_surface_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_stat_list_index;
        break;
      }

      // optional int32 stat_list_index = 7 [default = -1];
      case 7: {
        if (tag == 56) {
         parse_stat_list_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_list_index_)));
          set_has_stat_list_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reserved1;
        break;
      }

      // optional int32 reserved1 = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_reserved1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved1_)));
          set_has_reserved1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_op_head;
        break;
      }

      // repeated int32 op_head = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_op_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_op_head())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74, input, this->mutable_op_head())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_rois;
        break;
      }

      // required uint32 num_rois = 10;
      case 10: {
        if (tag == 80) {
         parse_num_rois:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rois_)));
          set_has_num_rois();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_operations;
        break;
      }

      // required uint32 num_operations = 11;
      case 11: {
        if (tag == 88) {
         parse_num_operations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_operations_)));
          set_has_num_operations();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_num_luts;
        break;
      }

      // required uint32 num_luts = 12;
      case 12: {
        if (tag == 96) {
         parse_num_luts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_luts_)));
          set_has_num_luts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_num_addresses;
        break;
      }

      // required uint32 num_addresses = 13;
      case 13: {
        if (tag == 104) {
         parse_num_addresses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_addresses_)));
          set_has_num_addresses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_input_layer;
        break;
      }

      // required int32 input_layer = 14;
      case 14: {
        if (tag == 112) {
         parse_input_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_layer_)));
          set_has_input_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dynamic_roi;
        break;
      }

      // required uint32 dynamic_roi = 15;
      case 15: {
        if (tag == 120) {
         parse_dynamic_roi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dynamic_roi_)));
          set_has_dynamic_roi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_reserved0;
        break;
      }

      // optional uint32 reserved0 = 16 [default = 0];
      case 16: {
        if (tag == 128) {
         parse_reserved0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved0_)));
          set_has_reserved0();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.NetworkDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.NetworkDesc)
  return false;
#undef DO_
}

void NetworkDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.NetworkDesc)
  // required int32 operation_desc_index = 1;
  if (has_operation_desc_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operation_desc_index(), output);
  }

  // required int32 surface_desc_index = 2;
  if (has_surface_desc_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->surface_desc_index(), output);
  }

  // required int32 dependency_graph_index = 3;
  if (has_dependency_graph_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dependency_graph_index(), output);
  }

  // required int32 lut_data_index = 4;
  if (has_lut_data_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lut_data_index(), output);
  }

  // required int32 roi_array_index = 5;
  if (has_roi_array_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roi_array_index(), output);
  }

  // required int32 surface_index = 6;
  if (has_surface_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->surface_index(), output);
  }

  // optional int32 stat_list_index = 7 [default = -1];
  if (has_stat_list_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stat_list_index(), output);
  }

  // optional int32 reserved1 = 8 [default = -1];
  if (has_reserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reserved1(), output);
  }

  // repeated int32 op_head = 9 [packed = true];
  if (this->op_head_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_op_head_cached_byte_size_);
  }
  for (int i = 0; i < this->op_head_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->op_head(i), output);
  }

  // required uint32 num_rois = 10;
  if (has_num_rois()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num_rois(), output);
  }

  // required uint32 num_operations = 11;
  if (has_num_operations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_operations(), output);
  }

  // required uint32 num_luts = 12;
  if (has_num_luts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num_luts(), output);
  }

  // required uint32 num_addresses = 13;
  if (has_num_addresses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->num_addresses(), output);
  }

  // required int32 input_layer = 14;
  if (has_input_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->input_layer(), output);
  }

  // required uint32 dynamic_roi = 15;
  if (has_dynamic_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dynamic_roi(), output);
  }

  // optional uint32 reserved0 = 16 [default = 0];
  if (has_reserved0()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->reserved0(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.NetworkDesc)
}

::google::protobuf::uint8* NetworkDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.NetworkDesc)
  // required int32 operation_desc_index = 1;
  if (has_operation_desc_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operation_desc_index(), target);
  }

  // required int32 surface_desc_index = 2;
  if (has_surface_desc_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->surface_desc_index(), target);
  }

  // required int32 dependency_graph_index = 3;
  if (has_dependency_graph_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dependency_graph_index(), target);
  }

  // required int32 lut_data_index = 4;
  if (has_lut_data_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lut_data_index(), target);
  }

  // required int32 roi_array_index = 5;
  if (has_roi_array_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roi_array_index(), target);
  }

  // required int32 surface_index = 6;
  if (has_surface_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->surface_index(), target);
  }

  // optional int32 stat_list_index = 7 [default = -1];
  if (has_stat_list_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stat_list_index(), target);
  }

  // optional int32 reserved1 = 8 [default = -1];
  if (has_reserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reserved1(), target);
  }

  // repeated int32 op_head = 9 [packed = true];
  if (this->op_head_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _op_head_cached_byte_size_, target);
  }
  for (int i = 0; i < this->op_head_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->op_head(i), target);
  }

  // required uint32 num_rois = 10;
  if (has_num_rois()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_rois(), target);
  }

  // required uint32 num_operations = 11;
  if (has_num_operations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_operations(), target);
  }

  // required uint32 num_luts = 12;
  if (has_num_luts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->num_luts(), target);
  }

  // required uint32 num_addresses = 13;
  if (has_num_addresses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->num_addresses(), target);
  }

  // required int32 input_layer = 14;
  if (has_input_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->input_layer(), target);
  }

  // required uint32 dynamic_roi = 15;
  if (has_dynamic_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dynamic_roi(), target);
  }

  // optional uint32 reserved0 = 16 [default = 0];
  if (has_reserved0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->reserved0(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.NetworkDesc)
  return target;
}

int NetworkDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operation_desc_index = 1;
    if (has_operation_desc_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operation_desc_index());
    }

    // required int32 surface_desc_index = 2;
    if (has_surface_desc_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surface_desc_index());
    }

    // required int32 dependency_graph_index = 3;
    if (has_dependency_graph_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dependency_graph_index());
    }

    // required int32 lut_data_index = 4;
    if (has_lut_data_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lut_data_index());
    }

    // required int32 roi_array_index = 5;
    if (has_roi_array_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roi_array_index());
    }

    // required int32 surface_index = 6;
    if (has_surface_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surface_index());
    }

    // optional int32 stat_list_index = 7 [default = -1];
    if (has_stat_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stat_list_index());
    }

    // optional int32 reserved1 = 8 [default = -1];
    if (has_reserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved1());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 num_rois = 10;
    if (has_num_rois()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rois());
    }

    // required uint32 num_operations = 11;
    if (has_num_operations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_operations());
    }

    // required uint32 num_luts = 12;
    if (has_num_luts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_luts());
    }

    // required uint32 num_addresses = 13;
    if (has_num_addresses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_addresses());
    }

    // required int32 input_layer = 14;
    if (has_input_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_layer());
    }

    // required uint32 dynamic_roi = 15;
    if (has_dynamic_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dynamic_roi());
    }

    // optional uint32 reserved0 = 16 [default = 0];
    if (has_reserved0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved0());
    }

  }
  // repeated int32 op_head = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->op_head_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->op_head(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _op_head_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkDesc::MergeFrom(const NetworkDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  op_head_.MergeFrom(from.op_head_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operation_desc_index()) {
      set_operation_desc_index(from.operation_desc_index());
    }
    if (from.has_surface_desc_index()) {
      set_surface_desc_index(from.surface_desc_index());
    }
    if (from.has_dependency_graph_index()) {
      set_dependency_graph_index(from.dependency_graph_index());
    }
    if (from.has_lut_data_index()) {
      set_lut_data_index(from.lut_data_index());
    }
    if (from.has_roi_array_index()) {
      set_roi_array_index(from.roi_array_index());
    }
    if (from.has_surface_index()) {
      set_surface_index(from.surface_index());
    }
    if (from.has_stat_list_index()) {
      set_stat_list_index(from.stat_list_index());
    }
    if (from.has_reserved1()) {
      set_reserved1(from.reserved1());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_num_rois()) {
      set_num_rois(from.num_rois());
    }
    if (from.has_num_operations()) {
      set_num_operations(from.num_operations());
    }
    if (from.has_num_luts()) {
      set_num_luts(from.num_luts());
    }
    if (from.has_num_addresses()) {
      set_num_addresses(from.num_addresses());
    }
    if (from.has_input_layer()) {
      set_input_layer(from.input_layer());
    }
    if (from.has_dynamic_roi()) {
      set_dynamic_roi(from.dynamic_roi());
    }
    if (from.has_reserved0()) {
      set_reserved0(from.reserved0());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkDesc::CopyFrom(const NetworkDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007e3f) != 0x00007e3f) return false;

  return true;
}

void NetworkDesc::Swap(NetworkDesc* other) {
  if (other != this) {
    std::swap(operation_desc_index_, other->operation_desc_index_);
    std::swap(surface_desc_index_, other->surface_desc_index_);
    std::swap(dependency_graph_index_, other->dependency_graph_index_);
    std::swap(lut_data_index_, other->lut_data_index_);
    std::swap(roi_array_index_, other->roi_array_index_);
    std::swap(surface_index_, other->surface_index_);
    std::swap(stat_list_index_, other->stat_list_index_);
    std::swap(reserved1_, other->reserved1_);
    op_head_.Swap(&other->op_head_);
    std::swap(num_rois_, other->num_rois_);
    std::swap(num_operations_, other->num_operations_);
    std::swap(num_luts_, other->num_luts_);
    std::swap(num_addresses_, other->num_addresses_);
    std::swap(input_layer_, other->input_layer_);
    std::swap(dynamic_roi_, other->dynamic_roi_);
    std::swap(reserved0_, other->reserved0_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkDesc_descriptor_;
  metadata.reflection = NetworkDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LUTParamList::kLutParamFieldNumber;
#endif  // !_MSC_VER

LUTParamList::LUTParamList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.LUTParamList)
}

void LUTParamList::InitAsDefaultInstance() {
}

LUTParamList::LUTParamList(const LUTParamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.LUTParamList)
}

void LUTParamList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LUTParamList::~LUTParamList() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.LUTParamList)
  SharedDtor();
}

void LUTParamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LUTParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LUTParamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LUTParamList_descriptor_;
}

const LUTParamList& LUTParamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

LUTParamList* LUTParamList::default_instance_ = NULL;

LUTParamList* LUTParamList::New() const {
  return new LUTParamList;
}

void LUTParamList::Clear() {
  lut_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LUTParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.LUTParamList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nvdla_prototest_interface.LUTParam lut_param = 1;
      case 1: {
        if (tag == 10) {
         parse_lut_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lut_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_lut_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.LUTParamList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.LUTParamList)
  return false;
#undef DO_
}

void LUTParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.LUTParamList)
  // repeated .nvdla_prototest_interface.LUTParam lut_param = 1;
  for (int i = 0; i < this->lut_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lut_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.LUTParamList)
}

::google::protobuf::uint8* LUTParamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.LUTParamList)
  // repeated .nvdla_prototest_interface.LUTParam lut_param = 1;
  for (int i = 0; i < this->lut_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lut_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.LUTParamList)
  return target;
}

int LUTParamList::ByteSize() const {
  int total_size = 0;

  // repeated .nvdla_prototest_interface.LUTParam lut_param = 1;
  total_size += 1 * this->lut_param_size();
  for (int i = 0; i < this->lut_param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lut_param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LUTParamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LUTParamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LUTParamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LUTParamList::MergeFrom(const LUTParamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  lut_param_.MergeFrom(from.lut_param_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LUTParamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LUTParamList::CopyFrom(const LUTParamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LUTParamList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->lut_param())) return false;
  return true;
}

void LUTParamList::Swap(LUTParamList* other) {
  if (other != this) {
    lut_param_.Swap(&other->lut_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LUTParamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LUTParamList_descriptor_;
  metadata.reflection = LUTParamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROIArrayDesc::kArrayLengthFieldNumber;
const int ROIArrayDesc::kArrayReservedFieldNumber;
#endif  // !_MSC_VER

ROIArrayDesc::ROIArrayDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.ROIArrayDesc)
}

void ROIArrayDesc::InitAsDefaultInstance() {
}

ROIArrayDesc::ROIArrayDesc(const ROIArrayDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.ROIArrayDesc)
}

void ROIArrayDesc::SharedCtor() {
  _cached_size_ = 0;
  array_length_ = 0u;
  array_reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIArrayDesc::~ROIArrayDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.ROIArrayDesc)
  SharedDtor();
}

void ROIArrayDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROIArrayDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIArrayDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIArrayDesc_descriptor_;
}

const ROIArrayDesc& ROIArrayDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

ROIArrayDesc* ROIArrayDesc::default_instance_ = NULL;

ROIArrayDesc* ROIArrayDesc::New() const {
  return new ROIArrayDesc;
}

void ROIArrayDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ROIArrayDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(array_length_, array_reserved_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROIArrayDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.ROIArrayDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 array_length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &array_length_)));
          set_has_array_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_array_reserved;
        break;
      }

      // required uint32 array_reserved = 2;
      case 2: {
        if (tag == 16) {
         parse_array_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &array_reserved_)));
          set_has_array_reserved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.ROIArrayDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.ROIArrayDesc)
  return false;
#undef DO_
}

void ROIArrayDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.ROIArrayDesc)
  // required uint32 array_length = 1;
  if (has_array_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->array_length(), output);
  }

  // required uint32 array_reserved = 2;
  if (has_array_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->array_reserved(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.ROIArrayDesc)
}

::google::protobuf::uint8* ROIArrayDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.ROIArrayDesc)
  // required uint32 array_length = 1;
  if (has_array_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->array_length(), target);
  }

  // required uint32 array_reserved = 2;
  if (has_array_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->array_reserved(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.ROIArrayDesc)
  return target;
}

int ROIArrayDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 array_length = 1;
    if (has_array_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->array_length());
    }

    // required uint32 array_reserved = 2;
    if (has_array_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->array_reserved());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIArrayDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROIArrayDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROIArrayDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROIArrayDesc::MergeFrom(const ROIArrayDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_array_length()) {
      set_array_length(from.array_length());
    }
    if (from.has_array_reserved()) {
      set_array_reserved(from.array_reserved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROIArrayDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIArrayDesc::CopyFrom(const ROIArrayDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIArrayDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ROIArrayDesc::Swap(ROIArrayDesc* other) {
  if (other != this) {
    std::swap(array_length_, other->array_length_);
    std::swap(array_reserved_, other->array_reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROIArrayDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIArrayDesc_descriptor_;
  metadata.reflection = ROIArrayDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROIDesc::kLeftFieldNumber;
const int ROIDesc::kTopFieldNumber;
const int ROIDesc::kRightFieldNumber;
const int ROIDesc::kBottomFieldNumber;
#endif  // !_MSC_VER

ROIDesc::ROIDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.ROIDesc)
}

void ROIDesc::InitAsDefaultInstance() {
}

ROIDesc::ROIDesc(const ROIDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.ROIDesc)
}

void ROIDesc::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0u;
  top_ = 0u;
  right_ = 0u;
  bottom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIDesc::~ROIDesc() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.ROIDesc)
  SharedDtor();
}

void ROIDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROIDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIDesc_descriptor_;
}

const ROIDesc& ROIDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

ROIDesc* ROIDesc::default_instance_ = NULL;

ROIDesc* ROIDesc::New() const {
  return new ROIDesc;
}

void ROIDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ROIDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROIDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.ROIDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // required uint32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // required uint32 right = 3;
      case 3: {
        if (tag == 24) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // required uint32 bottom = 4;
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.ROIDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.ROIDesc)
  return false;
#undef DO_
}

void ROIDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.ROIDesc)
  // required uint32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }

  // required uint32 top = 2;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top(), output);
  }

  // required uint32 right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->right(), output);
  }

  // required uint32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bottom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.ROIDesc)
}

::google::protobuf::uint8* ROIDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.ROIDesc)
  // required uint32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }

  // required uint32 top = 2;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top(), target);
  }

  // required uint32 right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->right(), target);
  }

  // required uint32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.ROIDesc)
  return target;
}

int ROIDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left());
    }

    // required uint32 top = 2;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top());
    }

    // required uint32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->right());
    }

    // required uint32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bottom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROIDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROIDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROIDesc::MergeFrom(const ROIDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROIDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIDesc::CopyFrom(const ROIDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ROIDesc::Swap(ROIDesc* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(top_, other->top_);
    std::swap(right_, other->right_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROIDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIDesc_descriptor_;
  metadata.reflection = ROIDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROIDescription::kRoiArrFieldNumber;
const int ROIDescription::kRoiDescFieldNumber;
#endif  // !_MSC_VER

ROIDescription::ROIDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.ROIDescription)
}

void ROIDescription::InitAsDefaultInstance() {
  roi_arr_ = const_cast< ::nvdla_prototest_interface::ROIArrayDesc*>(&::nvdla_prototest_interface::ROIArrayDesc::default_instance());
}

ROIDescription::ROIDescription(const ROIDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.ROIDescription)
}

void ROIDescription::SharedCtor() {
  _cached_size_ = 0;
  roi_arr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIDescription::~ROIDescription() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.ROIDescription)
  SharedDtor();
}

void ROIDescription::SharedDtor() {
  if (this != default_instance_) {
    delete roi_arr_;
  }
}

void ROIDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIDescription_descriptor_;
}

const ROIDescription& ROIDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

ROIDescription* ROIDescription::default_instance_ = NULL;

ROIDescription* ROIDescription::New() const {
  return new ROIDescription;
}

void ROIDescription::Clear() {
  if (has_roi_arr()) {
    if (roi_arr_ != NULL) roi_arr_->::nvdla_prototest_interface::ROIArrayDesc::Clear();
  }
  roi_desc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROIDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.ROIDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.ROIArrayDesc roi_arr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roi_desc;
        break;
      }

      // repeated .nvdla_prototest_interface.ROIDesc roi_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_roi_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roi_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roi_desc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.ROIDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.ROIDescription)
  return false;
#undef DO_
}

void ROIDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.ROIDescription)
  // required .nvdla_prototest_interface.ROIArrayDesc roi_arr = 1;
  if (has_roi_arr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roi_arr(), output);
  }

  // repeated .nvdla_prototest_interface.ROIDesc roi_desc = 2;
  for (int i = 0; i < this->roi_desc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roi_desc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.ROIDescription)
}

::google::protobuf::uint8* ROIDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.ROIDescription)
  // required .nvdla_prototest_interface.ROIArrayDesc roi_arr = 1;
  if (has_roi_arr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roi_arr(), target);
  }

  // repeated .nvdla_prototest_interface.ROIDesc roi_desc = 2;
  for (int i = 0; i < this->roi_desc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roi_desc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.ROIDescription)
  return target;
}

int ROIDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.ROIArrayDesc roi_arr = 1;
    if (has_roi_arr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi_arr());
    }

  }
  // repeated .nvdla_prototest_interface.ROIDesc roi_desc = 2;
  total_size += 1 * this->roi_desc_size();
  for (int i = 0; i < this->roi_desc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roi_desc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROIDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROIDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROIDescription::MergeFrom(const ROIDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  roi_desc_.MergeFrom(from.roi_desc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roi_arr()) {
      mutable_roi_arr()->::nvdla_prototest_interface::ROIArrayDesc::MergeFrom(from.roi_arr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROIDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIDescription::CopyFrom(const ROIDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roi_arr()) {
    if (!this->roi_arr().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->roi_desc())) return false;
  return true;
}

void ROIDescription::Swap(ROIDescription* other) {
  if (other != this) {
    std::swap(roi_arr_, other->roi_arr_);
    roi_desc_.Swap(&other->roi_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROIDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIDescription_descriptor_;
  metadata.reflection = ROIDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Network::kParamFieldNumber;
const int Network::kLayersFieldNumber;
const int Network::kLutListFieldNumber;
const int Network::kRoiListFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Network)
}

void Network::InitAsDefaultInstance() {
  param_ = const_cast< ::nvdla_prototest_interface::NetworkDesc*>(&::nvdla_prototest_interface::NetworkDesc::default_instance());
  layers_ = const_cast< ::nvdla_prototest_interface::NetworkLayer*>(&::nvdla_prototest_interface::NetworkLayer::default_instance());
  lut_list_ = const_cast< ::nvdla_prototest_interface::LUTParamList*>(&::nvdla_prototest_interface::LUTParamList::default_instance());
  roi_list_ = const_cast< ::nvdla_prototest_interface::ROIDescription*>(&::nvdla_prototest_interface::ROIDescription::default_instance());
}

Network::Network(const Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Network)
}

void Network::SharedCtor() {
  _cached_size_ = 0;
  param_ = NULL;
  layers_ = NULL;
  lut_list_ = NULL;
  roi_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Network)
  SharedDtor();
}

void Network::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
    delete layers_;
    delete lut_list_;
    delete roi_list_;
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_param()) {
      if (param_ != NULL) param_->::nvdla_prototest_interface::NetworkDesc::Clear();
    }
    if (has_layers()) {
      if (layers_ != NULL) layers_->::nvdla_prototest_interface::NetworkLayer::Clear();
    }
    if (has_lut_list()) {
      if (lut_list_ != NULL) lut_list_->::nvdla_prototest_interface::LUTParamList::Clear();
    }
    if (has_roi_list()) {
      if (roi_list_ != NULL) roi_list_->::nvdla_prototest_interface::ROIDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.NetworkDesc param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // required .nvdla_prototest_interface.NetworkLayer layers = 2;
      case 2: {
        if (tag == 18) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lut_list;
        break;
      }

      // required .nvdla_prototest_interface.LUTParamList lut_list = 3;
      case 3: {
        if (tag == 26) {
         parse_lut_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lut_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roi_list;
        break;
      }

      // required .nvdla_prototest_interface.ROIDescription roi_list = 4;
      case 4: {
        if (tag == 34) {
         parse_roi_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Network)
  // required .nvdla_prototest_interface.NetworkDesc param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(), output);
  }

  // required .nvdla_prototest_interface.NetworkLayer layers = 2;
  if (has_layers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(), output);
  }

  // required .nvdla_prototest_interface.LUTParamList lut_list = 3;
  if (has_lut_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lut_list(), output);
  }

  // required .nvdla_prototest_interface.ROIDescription roi_list = 4;
  if (has_roi_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roi_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Network)
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Network)
  // required .nvdla_prototest_interface.NetworkDesc param = 1;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->param(), target);
  }

  // required .nvdla_prototest_interface.NetworkLayer layers = 2;
  if (has_layers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(), target);
  }

  // required .nvdla_prototest_interface.LUTParamList lut_list = 3;
  if (has_lut_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lut_list(), target);
  }

  // required .nvdla_prototest_interface.ROIDescription roi_list = 4;
  if (has_roi_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roi_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Network)
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.NetworkDesc param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // required .nvdla_prototest_interface.NetworkLayer layers = 2;
    if (has_layers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layers());
    }

    // required .nvdla_prototest_interface.LUTParamList lut_list = 3;
    if (has_lut_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lut_list());
    }

    // required .nvdla_prototest_interface.ROIDescription roi_list = 4;
    if (has_roi_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      mutable_param()->::nvdla_prototest_interface::NetworkDesc::MergeFrom(from.param());
    }
    if (from.has_layers()) {
      mutable_layers()->::nvdla_prototest_interface::NetworkLayer::MergeFrom(from.layers());
    }
    if (from.has_lut_list()) {
      mutable_lut_list()->::nvdla_prototest_interface::LUTParamList::MergeFrom(from.lut_list());
    }
    if (from.has_roi_list()) {
      mutable_roi_list()->::nvdla_prototest_interface::ROIDescription::MergeFrom(from.roi_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  if (has_layers()) {
    if (!this->layers().IsInitialized()) return false;
  }
  if (has_lut_list()) {
    if (!this->lut_list().IsInitialized()) return false;
  }
  if (has_roi_list()) {
    if (!this->roi_list().IsInitialized()) return false;
  }
  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    std::swap(layers_, other->layers_);
    std::swap(lut_list_, other->lut_list_);
    std::swap(roi_list_, other->roi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskStatus::kTimestampFieldNumber;
const int TaskStatus::kStatusEngineFieldNumber;
const int TaskStatus::kSubframeFieldNumber;
const int TaskStatus::kStatusTaskFieldNumber;
#endif  // !_MSC_VER

TaskStatus::TaskStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.TaskStatus)
}

void TaskStatus::InitAsDefaultInstance() {
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.TaskStatus)
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  status_engine_ = 0u;
  subframe_ = 0u;
  status_task_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.TaskStatus)
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New() const {
  return new TaskStatus;
}

void TaskStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_, status_task_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.TaskStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status_engine;
        break;
      }

      // required uint32 status_engine = 2;
      case 2: {
        if (tag == 16) {
         parse_status_engine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_engine_)));
          set_has_status_engine();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subframe;
        break;
      }

      // required uint32 subframe = 3;
      case 3: {
        if (tag == 24) {
         parse_subframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subframe_)));
          set_has_subframe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status_task;
        break;
      }

      // required uint32 status_task = 4;
      case 4: {
        if (tag == 32) {
         parse_status_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_task_)));
          set_has_status_task();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.TaskStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.TaskStatus)
  return false;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.TaskStatus)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 status_engine = 2;
  if (has_status_engine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_engine(), output);
  }

  // required uint32 subframe = 3;
  if (has_subframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subframe(), output);
  }

  // required uint32 status_task = 4;
  if (has_status_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.TaskStatus)
}

::google::protobuf::uint8* TaskStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.TaskStatus)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 status_engine = 2;
  if (has_status_engine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_engine(), target);
  }

  // required uint32 subframe = 3;
  if (has_subframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subframe(), target);
  }

  // required uint32 status_task = 4;
  if (has_status_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.TaskStatus)
  return target;
}

int TaskStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required uint32 status_engine = 2;
    if (has_status_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_engine());
    }

    // required uint32 subframe = 3;
    if (has_subframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subframe());
    }

    // required uint32 status_task = 4;
    if (has_status_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_status_engine()) {
      set_status_engine(from.status_engine());
    }
    if (from.has_subframe()) {
      set_subframe(from.subframe());
    }
    if (from.has_status_task()) {
      set_status_task(from.status_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(status_engine_, other->status_engine_);
    std::swap(subframe_, other->subframe_);
    std::swap(status_task_, other->status_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Action::kEventIdFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Action)
}

void Action::InitAsDefaultInstance() {
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  event_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 event_id = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_event_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_event_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Action)
  // repeated uint32 event_id = 1 [packed = true];
  if (this->event_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_event_id_cached_byte_size_);
  }
  for (int i = 0; i < this->event_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->event_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Action)
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Action)
  // repeated uint32 event_id = 1 [packed = true];
  if (this->event_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _event_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->event_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->event_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Action)
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  // repeated uint32 event_id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->event_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->event_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _event_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_id_.MergeFrom(from.event_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    event_id_.Swap(&other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskSchedule::kPreActionsFieldNumber;
const int TaskSchedule::kPostActionsFieldNumber;
#endif  // !_MSC_VER

TaskSchedule::TaskSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.TaskSchedule)
}

void TaskSchedule::InitAsDefaultInstance() {
  pre_actions_ = const_cast< ::nvdla_prototest_interface::Action*>(&::nvdla_prototest_interface::Action::default_instance());
  post_actions_ = const_cast< ::nvdla_prototest_interface::Action*>(&::nvdla_prototest_interface::Action::default_instance());
}

TaskSchedule::TaskSchedule(const TaskSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.TaskSchedule)
}

void TaskSchedule::SharedCtor() {
  _cached_size_ = 0;
  pre_actions_ = NULL;
  post_actions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskSchedule::~TaskSchedule() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.TaskSchedule)
  SharedDtor();
}

void TaskSchedule::SharedDtor() {
  if (this != default_instance_) {
    delete pre_actions_;
    delete post_actions_;
  }
}

void TaskSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskSchedule_descriptor_;
}

const TaskSchedule& TaskSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

TaskSchedule* TaskSchedule::default_instance_ = NULL;

TaskSchedule* TaskSchedule::New() const {
  return new TaskSchedule;
}

void TaskSchedule::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pre_actions()) {
      if (pre_actions_ != NULL) pre_actions_->::nvdla_prototest_interface::Action::Clear();
    }
    if (has_post_actions()) {
      if (post_actions_ != NULL) post_actions_->::nvdla_prototest_interface::Action::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.TaskSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nvdla_prototest_interface.Action pre_actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_post_actions;
        break;
      }

      // optional .nvdla_prototest_interface.Action post_actions = 2;
      case 2: {
        if (tag == 18) {
         parse_post_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.TaskSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.TaskSchedule)
  return false;
#undef DO_
}

void TaskSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.TaskSchedule)
  // optional .nvdla_prototest_interface.Action pre_actions = 1;
  if (has_pre_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pre_actions(), output);
  }

  // optional .nvdla_prototest_interface.Action post_actions = 2;
  if (has_post_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->post_actions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.TaskSchedule)
}

::google::protobuf::uint8* TaskSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.TaskSchedule)
  // optional .nvdla_prototest_interface.Action pre_actions = 1;
  if (has_pre_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pre_actions(), target);
  }

  // optional .nvdla_prototest_interface.Action post_actions = 2;
  if (has_post_actions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->post_actions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.TaskSchedule)
  return target;
}

int TaskSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .nvdla_prototest_interface.Action pre_actions = 1;
    if (has_pre_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pre_actions());
    }

    // optional .nvdla_prototest_interface.Action post_actions = 2;
    if (has_post_actions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post_actions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskSchedule::MergeFrom(const TaskSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pre_actions()) {
      mutable_pre_actions()->::nvdla_prototest_interface::Action::MergeFrom(from.pre_actions());
    }
    if (from.has_post_actions()) {
      mutable_post_actions()->::nvdla_prototest_interface::Action::MergeFrom(from.post_actions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSchedule::CopyFrom(const TaskSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSchedule::IsInitialized() const {

  return true;
}

void TaskSchedule::Swap(TaskSchedule* other) {
  if (other != this) {
    std::swap(pre_actions_, other->pre_actions_);
    std::swap(post_actions_, other->post_actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskSchedule_descriptor_;
  metadata.reflection = TaskSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TasksData::kTaskIdFieldNumber;
const int TasksData::kEngineIdFieldNumber;
const int TasksData::kNetworkFieldNumber;
const int TasksData::kScheduleFieldNumber;
const int TasksData::kTaskStatusFieldNumber;
const int TasksData::kTaskTimeoutFieldNumber;
const int TasksData::kTaskResultFieldNumber;
#endif  // !_MSC_VER

TasksData::TasksData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.TasksData)
}

void TasksData::InitAsDefaultInstance() {
  network_ = const_cast< ::nvdla_prototest_interface::Network*>(&::nvdla_prototest_interface::Network::default_instance());
  schedule_ = const_cast< ::nvdla_prototest_interface::TaskSchedule*>(&::nvdla_prototest_interface::TaskSchedule::default_instance());
  task_status_ = const_cast< ::nvdla_prototest_interface::TaskStatus*>(&::nvdla_prototest_interface::TaskStatus::default_instance());
}

TasksData::TasksData(const TasksData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.TasksData)
}

void TasksData::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  engine_id_ = 0;
  network_ = NULL;
  schedule_ = NULL;
  task_status_ = NULL;
  task_timeout_ = 4294967295u;
  task_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TasksData::~TasksData() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.TasksData)
  SharedDtor();
}

void TasksData::SharedDtor() {
  if (this != default_instance_) {
    delete network_;
    delete schedule_;
    delete task_status_;
  }
}

void TasksData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TasksData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TasksData_descriptor_;
}

const TasksData& TasksData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

TasksData* TasksData::default_instance_ = NULL;

TasksData* TasksData::New() const {
  return new TasksData;
}

void TasksData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TasksData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(task_id_, engine_id_);
    if (has_network()) {
      if (network_ != NULL) network_->::nvdla_prototest_interface::Network::Clear();
    }
    if (has_schedule()) {
      if (schedule_ != NULL) schedule_->::nvdla_prototest_interface::TaskSchedule::Clear();
    }
    if (has_task_status()) {
      if (task_status_ != NULL) task_status_->::nvdla_prototest_interface::TaskStatus::Clear();
    }
    task_timeout_ = 4294967295u;
    task_result_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TasksData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.TasksData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_engine_id;
        break;
      }

      // required .nvdla_prototest_interface.EngineID engine_id = 2;
      case 2: {
        if (tag == 16) {
         parse_engine_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::EngineID_IsValid(value)) {
            set_engine_id(static_cast< ::nvdla_prototest_interface::EngineID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_network;
        break;
      }

      // required .nvdla_prototest_interface.Network network = 3;
      case 3: {
        if (tag == 26) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_schedule;
        break;
      }

      // optional .nvdla_prototest_interface.TaskSchedule schedule = 4;
      case 4: {
        if (tag == 34) {
         parse_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_status;
        break;
      }

      // optional .nvdla_prototest_interface.TaskStatus task_status = 5;
      case 5: {
        if (tag == 42) {
         parse_task_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_task_timeout;
        break;
      }

      // optional uint32 task_timeout = 6 [default = 4294967295];
      case 6: {
        if (tag == 48) {
         parse_task_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_timeout_)));
          set_has_task_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_task_result;
        break;
      }

      // optional int32 task_result = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_task_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_result_)));
          set_has_task_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.TasksData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.TasksData)
  return false;
#undef DO_
}

void TasksData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.TasksData)
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // required .nvdla_prototest_interface.EngineID engine_id = 2;
  if (has_engine_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->engine_id(), output);
  }

  // required .nvdla_prototest_interface.Network network = 3;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->network(), output);
  }

  // optional .nvdla_prototest_interface.TaskSchedule schedule = 4;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->schedule(), output);
  }

  // optional .nvdla_prototest_interface.TaskStatus task_status = 5;
  if (has_task_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->task_status(), output);
  }

  // optional uint32 task_timeout = 6 [default = 4294967295];
  if (has_task_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->task_timeout(), output);
  }

  // optional int32 task_result = 7 [default = 0];
  if (has_task_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->task_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.TasksData)
}

::google::protobuf::uint8* TasksData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.TasksData)
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // required .nvdla_prototest_interface.EngineID engine_id = 2;
  if (has_engine_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->engine_id(), target);
  }

  // required .nvdla_prototest_interface.Network network = 3;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->network(), target);
  }

  // optional .nvdla_prototest_interface.TaskSchedule schedule = 4;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->schedule(), target);
  }

  // optional .nvdla_prototest_interface.TaskStatus task_status = 5;
  if (has_task_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->task_status(), target);
  }

  // optional uint32 task_timeout = 6 [default = 4294967295];
  if (has_task_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->task_timeout(), target);
  }

  // optional int32 task_result = 7 [default = 0];
  if (has_task_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->task_result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.TasksData)
  return target;
}

int TasksData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // required .nvdla_prototest_interface.EngineID engine_id = 2;
    if (has_engine_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine_id());
    }

    // required .nvdla_prototest_interface.Network network = 3;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network());
    }

    // optional .nvdla_prototest_interface.TaskSchedule schedule = 4;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule());
    }

    // optional .nvdla_prototest_interface.TaskStatus task_status = 5;
    if (has_task_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_status());
    }

    // optional uint32 task_timeout = 6 [default = 4294967295];
    if (has_task_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_timeout());
    }

    // optional int32 task_result = 7 [default = 0];
    if (has_task_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TasksData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TasksData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TasksData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TasksData::MergeFrom(const TasksData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_engine_id()) {
      set_engine_id(from.engine_id());
    }
    if (from.has_network()) {
      mutable_network()->::nvdla_prototest_interface::Network::MergeFrom(from.network());
    }
    if (from.has_schedule()) {
      mutable_schedule()->::nvdla_prototest_interface::TaskSchedule::MergeFrom(from.schedule());
    }
    if (from.has_task_status()) {
      mutable_task_status()->::nvdla_prototest_interface::TaskStatus::MergeFrom(from.task_status());
    }
    if (from.has_task_timeout()) {
      set_task_timeout(from.task_timeout());
    }
    if (from.has_task_result()) {
      set_task_result(from.task_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TasksData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TasksData::CopyFrom(const TasksData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TasksData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_network()) {
    if (!this->network().IsInitialized()) return false;
  }
  if (has_task_status()) {
    if (!this->task_status().IsInitialized()) return false;
  }
  return true;
}

void TasksData::Swap(TasksData* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(engine_id_, other->engine_id_);
    std::swap(network_, other->network_);
    std::swap(schedule_, other->schedule_);
    std::swap(task_status_, other->task_status_);
    std::swap(task_timeout_, other->task_timeout_);
    std::swap(task_result_, other->task_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TasksData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TasksData_descriptor_;
  metadata.reflection = TasksData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_EventType_descriptor_;
}
bool Event_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_EventType Event::SYNCPOINT;
const Event_EventType Event::SYNCFD;
const Event_EventType Event::SEMAPHORE;
const Event_EventType Event::TS_SEMAPHORE;
const Event_EventType Event::EventType_MIN;
const Event_EventType Event::EventType_MAX;
const int Event::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event::kEventIdFieldNumber;
const int Event::kEventTypeFieldNumber;
const int Event::kEventFlagsFieldNumber;
const int Event::kEventTimeoutFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Event)
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  event_type_ = 0;
  event_flags_ = 0u;
  event_timeout_ = 4294967295u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Event*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(event_id_, event_flags_);
    event_timeout_ = 4294967295u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // required .nvdla_prototest_interface.Event.EventType event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::nvdla_prototest_interface::Event_EventType_IsValid(value)) {
            set_event_type(static_cast< ::nvdla_prototest_interface::Event_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_flags;
        break;
      }

      // required uint32 event_flags = 3;
      case 3: {
        if (tag == 24) {
         parse_event_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_flags_)));
          set_has_event_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event_timeout;
        break;
      }

      // optional uint32 event_timeout = 4 [default = 4294967295];
      case 4: {
        if (tag == 32) {
         parse_event_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_timeout_)));
          set_has_event_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Event)
  // required uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // required .nvdla_prototest_interface.Event.EventType event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_type(), output);
  }

  // required uint32 event_flags = 3;
  if (has_event_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_flags(), output);
  }

  // optional uint32 event_timeout = 4 [default = 4294967295];
  if (has_event_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->event_timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Event)
  // required uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // required .nvdla_prototest_interface.Event.EventType event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_type(), target);
  }

  // required uint32 event_flags = 3;
  if (has_event_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_flags(), target);
  }

  // optional uint32 event_timeout = 4 [default = 4294967295];
  if (has_event_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->event_timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // required .nvdla_prototest_interface.Event.EventType event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // required uint32 event_flags = 3;
    if (has_event_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_flags());
    }

    // optional uint32 event_timeout = 4 [default = 4294967295];
    if (has_event_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_flags()) {
      set_event_flags(from.event_flags());
    }
    if (from.has_event_timeout()) {
      set_event_timeout(from.event_timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(event_flags_, other->event_flags_);
    std::swap(event_timeout_, other->event_timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventList::kEventFieldNumber;
#endif  // !_MSC_VER

EventList::EventList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.EventList)
}

void EventList::InitAsDefaultInstance() {
}

EventList::EventList(const EventList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.EventList)
}

void EventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventList::~EventList() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.EventList)
  SharedDtor();
}

void EventList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventList_descriptor_;
}

const EventList& EventList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

EventList* EventList::default_instance_ = NULL;

EventList* EventList::New() const {
  return new EventList;
}

void EventList::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.EventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .nvdla_prototest_interface.Event event = 1;
      case 1: {
        if (tag == 10) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.EventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.EventList)
  return false;
#undef DO_
}

void EventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.EventList)
  // repeated .nvdla_prototest_interface.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.EventList)
}

::google::protobuf::uint8* EventList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.EventList)
  // repeated .nvdla_prototest_interface.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.EventList)
  return target;
}

int EventList::ByteSize() const {
  int total_size = 0;

  // repeated .nvdla_prototest_interface.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventList::MergeFrom(const EventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventList::CopyFrom(const EventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->event())) return false;
  return true;
}

void EventList::Swap(EventList* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventList_descriptor_;
  metadata.reflection = EventList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitSlot::kTaskIdFieldNumber;
#endif  // !_MSC_VER

SubmitSlot::SubmitSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.SubmitSlot)
}

void SubmitSlot::InitAsDefaultInstance() {
}

SubmitSlot::SubmitSlot(const SubmitSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.SubmitSlot)
}

void SubmitSlot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitSlot::~SubmitSlot() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.SubmitSlot)
  SharedDtor();
}

void SubmitSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmitSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitSlot_descriptor_;
}

const SubmitSlot& SubmitSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

SubmitSlot* SubmitSlot::default_instance_ = NULL;

SubmitSlot* SubmitSlot::New() const {
  return new SubmitSlot;
}

void SubmitSlot::Clear() {
  task_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.SubmitSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 task_id = 1;
      case 1: {
        if (tag == 8) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_task_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_task_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_task_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.SubmitSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.SubmitSlot)
  return false;
#undef DO_
}

void SubmitSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.SubmitSlot)
  // repeated uint32 task_id = 1;
  for (int i = 0; i < this->task_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->task_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.SubmitSlot)
}

::google::protobuf::uint8* SubmitSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.SubmitSlot)
  // repeated uint32 task_id = 1;
  for (int i = 0; i < this->task_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->task_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.SubmitSlot)
  return target;
}

int SubmitSlot::ByteSize() const {
  int total_size = 0;

  // repeated uint32 task_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->task_id(i));
    }
    total_size += 1 * this->task_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitSlot::MergeFrom(const SubmitSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_id_.MergeFrom(from.task_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitSlot::CopyFrom(const SubmitSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitSlot::IsInitialized() const {

  return true;
}

void SubmitSlot::Swap(SubmitSlot* other) {
  if (other != this) {
    task_id_.Swap(&other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitSlot_descriptor_;
  metadata.reflection = SubmitSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestInfo::kNumTasksFieldNumber;
const int TestInfo::kNumBuffersFieldNumber;
const int TestInfo::kTaskFieldNumber;
const int TestInfo::kEventListFieldNumber;
const int TestInfo::kSlotsFieldNumber;
#endif  // !_MSC_VER

TestInfo::TestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.TestInfo)
}

void TestInfo::InitAsDefaultInstance() {
  event_list_ = const_cast< ::nvdla_prototest_interface::EventList*>(&::nvdla_prototest_interface::EventList::default_instance());
}

TestInfo::TestInfo(const TestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.TestInfo)
}

void TestInfo::SharedCtor() {
  _cached_size_ = 0;
  num_tasks_ = 0u;
  num_buffers_ = 0u;
  event_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestInfo::~TestInfo() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.TestInfo)
  SharedDtor();
}

void TestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete event_list_;
  }
}

void TestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestInfo_descriptor_;
}

const TestInfo& TestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

TestInfo* TestInfo::default_instance_ = NULL;

TestInfo* TestInfo::New() const {
  return new TestInfo;
}

void TestInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TestInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(num_tasks_, num_buffers_);
    if (has_event_list()) {
      if (event_list_ != NULL) event_list_->::nvdla_prototest_interface::EventList::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  task_.Clear();
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.TestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_tasks = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_tasks_)));
          set_has_num_tasks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_buffers;
        break;
      }

      // required uint32 num_buffers = 2;
      case 2: {
        if (tag == 16) {
         parse_num_buffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_buffers_)));
          set_has_num_buffers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task;
        break;
      }

      // repeated .nvdla_prototest_interface.TasksData task = 3;
      case 3: {
        if (tag == 26) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task;
        if (input->ExpectTag(34)) goto parse_event_list;
        break;
      }

      // optional .nvdla_prototest_interface.EventList event_list = 4;
      case 4: {
        if (tag == 34) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slots;
        break;
      }

      // repeated .nvdla_prototest_interface.SubmitSlot slots = 5;
      case 5: {
        if (tag == 42) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.TestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.TestInfo)
  return false;
#undef DO_
}

void TestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.TestInfo)
  // required uint32 num_tasks = 1;
  if (has_num_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_tasks(), output);
  }

  // required uint32 num_buffers = 2;
  if (has_num_buffers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_buffers(), output);
  }

  // repeated .nvdla_prototest_interface.TasksData task = 3;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task(i), output);
  }

  // optional .nvdla_prototest_interface.EventList event_list = 4;
  if (has_event_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_list(), output);
  }

  // repeated .nvdla_prototest_interface.SubmitSlot slots = 5;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.TestInfo)
}

::google::protobuf::uint8* TestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.TestInfo)
  // required uint32 num_tasks = 1;
  if (has_num_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_tasks(), target);
  }

  // required uint32 num_buffers = 2;
  if (has_num_buffers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_buffers(), target);
  }

  // repeated .nvdla_prototest_interface.TasksData task = 3;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task(i), target);
  }

  // optional .nvdla_prototest_interface.EventList event_list = 4;
  if (has_event_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_list(), target);
  }

  // repeated .nvdla_prototest_interface.SubmitSlot slots = 5;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->slots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.TestInfo)
  return target;
}

int TestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_tasks = 1;
    if (has_num_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_tasks());
    }

    // required uint32 num_buffers = 2;
    if (has_num_buffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_buffers());
    }

    // optional .nvdla_prototest_interface.EventList event_list = 4;
    if (has_event_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_list());
    }

  }
  // repeated .nvdla_prototest_interface.TasksData task = 3;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated .nvdla_prototest_interface.SubmitSlot slots = 5;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestInfo::MergeFrom(const TestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_tasks()) {
      set_num_tasks(from.num_tasks());
    }
    if (from.has_num_buffers()) {
      set_num_buffers(from.num_buffers());
    }
    if (from.has_event_list()) {
      mutable_event_list()->::nvdla_prototest_interface::EventList::MergeFrom(from.event_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestInfo::CopyFrom(const TestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  if (has_event_list()) {
    if (!this->event_list().IsInitialized()) return false;
  }
  return true;
}

void TestInfo::Swap(TestInfo* other) {
  if (other != this) {
    std::swap(num_tasks_, other->num_tasks_);
    std::swap(num_buffers_, other->num_buffers_);
    task_.Swap(&other->task_);
    std::swap(event_list_, other->event_list_);
    slots_.Swap(&other->slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestInfo_descriptor_;
  metadata.reflection = TestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Test::kTestFieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nvdla_prototest_interface.Test)
}

void Test::InitAsDefaultInstance() {
  test_ = const_cast< ::nvdla_prototest_interface::TestInfo*>(&::nvdla_prototest_interface::TestInfo::default_instance());
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nvdla_prototest_interface.Test)
}

void Test::SharedCtor() {
  _cached_size_ = 0;
  test_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:nvdla_prototest_interface.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  if (this != default_instance_) {
    delete test_;
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DlaPrototestInterface_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  if (has_test()) {
    if (test_ != NULL) test_->::nvdla_prototest_interface::TestInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nvdla_prototest_interface.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .nvdla_prototest_interface.TestInfo test = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nvdla_prototest_interface.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nvdla_prototest_interface.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nvdla_prototest_interface.Test)
  // required .nvdla_prototest_interface.TestInfo test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->test(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nvdla_prototest_interface.Test)
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvdla_prototest_interface.Test)
  // required .nvdla_prototest_interface.TestInfo test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->test(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvdla_prototest_interface.Test)
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .nvdla_prototest_interface.TestInfo test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      mutable_test()->::nvdla_prototest_interface::TestInfo::MergeFrom(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_test()) {
    if (!this->test().IsInitialized()) return false;
  }
  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nvdla_prototest_interface

// @@protoc_insertion_point(global_scope)
